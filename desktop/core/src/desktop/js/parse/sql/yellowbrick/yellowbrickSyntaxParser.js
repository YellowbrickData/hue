// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/yellowbrick/sqlParseSupport';

var yellowbrickSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[4,8,12,18,192,202,208,289,319,369,385,388,392],$V1=[2,727],$V2=[388,392],$V3=[2,728],$V4=[1,41],$V5=[1,29],$V6=[1,30],$V7=[1,20],$V8=[1,39],$V9=[1,42],$Va=[1,34],$Vb=[1,40],$Vc=[1,35],$Vd=[1,38],$Ve=[1,36],$Vf=[1,51],$Vg=[1,53],$Vh=[1,49],$Vi=[1,52],$Vj=[1,48],$Vk=[85,388,392],$Vl=[2,554],$Vm=[1,59],$Vn=[1,68],$Vo=[1,69],$Vp=[2,516],$Vq=[1,87],$Vr=[1,88],$Vs=[36,315],$Vt=[18,36,47,54,58,59,67,81,83,85,89,99,111,112,113,116,117,124,129,133,144,146,158,162,169,171,186,192,213,215,238,249,262,263,264,265,266,267,268,269,270,274,276,280,287,288,301,310,312,315,317,318,388,392,396,397,400,404,405,407,408,409,411,414,415,416,417,419,422,423,424,425,427,428,430,432,433,434,435,436,439,440,451,485,557],$Vu=[85,310,388,392],$Vv=[67,117,276,388,392,396,397],$Vw=[2,884],$Vx=[1,102],$Vy=[67,117,276,396,397],$Vz=[67,117,276,354,388,392,396,397],$VA=[2,881],$VB=[1,110],$VC=[18,67,117,276,396,397],$VD=[83,89,289],$VE=[1,176],$VF=[1,177],$VG=[1,132],$VH=[1,127],$VI=[1,138],$VJ=[1,140],$VK=[1,142],$VL=[1,125],$VM=[1,174],$VN=[1,178],$VO=[1,179],$VP=[1,143],$VQ=[1,165],$VR=[1,166],$VS=[1,167],$VT=[1,168],$VU=[1,169],$VV=[1,170],$VW=[1,171],$VX=[1,172],$VY=[1,158],$VZ=[1,159],$V_=[1,152],$V$=[1,141],$V01=[1,153],$V11=[1,128],$V21=[1,130],$V31=[1,129],$V41=[1,133],$V51=[1,131],$V61=[1,173],$V71=[1,175],$V81=[58,59,67,83,85,99,100,111,116,117,276,289,301,315,317,318,319,342,343,344,345,346,347,348,349,350,351,352,354,355,396,397,399,400,403,410,418,437,438],$V91=[1,219],$Va1=[47,58,59,67,85,89,117,129,144,158,213,215,238,249,262,263,264,265,266,267,268,269,270,274,276,280,310,312,388,392,396,397],$Vb1=[85,89,215,310,388,392],$Vc1=[2,1201],$Vd1=[1,237],$Ve1=[1,252],$Vf1=[1,253],$Vg1=[1,241],$Vh1=[1,238],$Vi1=[1,239],$Vj1=[1,240],$Vk1=[1,247],$Vl1=[1,246],$Vm1=[1,245],$Vn1=[1,248],$Vo1=[1,243],$Vp1=[1,242],$Vq1=[1,236],$Vr1=[1,244],$Vs1=[1,255],$Vt1=[1,254],$Vu1=[36,47,58,59,67,81,85,89,99,112,113,117,133,146,215,238,249,262,263,264,265,266,267,268,269,274,276,280,287,288,301,310,312,388,392,396,397,400,404,405,407,416,417,422,424,425,427,428,430,434,440,485],$Vv1=[1,261],$Vw1=[1,267],$Vx1=[1,269],$Vy1=[36,47,58,59,67,81,83,85,89,99,112,113,117,133,146,215,238,249,262,263,264,265,266,267,268,269,274,276,280,287,288,301,310,312,388,392,396,397,400,404,405,407,416,417,422,424,425,427,428,430,434,440,485],$Vz1=[1,274],$VA1=[36,47,54,58,59,67,81,83,85,89,99,112,113,117,133,146,215,238,249,262,263,264,265,266,267,268,269,274,276,280,287,288,301,310,312,315,388,392,396,397,400,404,405,407,416,417,422,424,425,427,428,430,434,440,485],$VB1=[36,47,58,59,67,81,85,89,99,112,113,117,133,146,215,238,249,262,263,264,265,266,267,268,269,274,276,280,287,288,301,310,312,366,388,392,396,397,400,404,405,407,416,417,422,424,425,427,428,430,434,440,485],$VC1=[47,54,85,89,99,100,113,215,238,249,262,263,264,265,266,267,268,269,270,274,280,310,312,388,392],$VD1=[85,89],$VE1=[2,50],$VF1=[1,301],$VG1=[47,388,392],$VH1=[47,129,388,392],$VI1=[1,309],$VJ1=[47,54,81,83,129,162,169,186,192,388,392],$VK1=[47,54],$VL1=[312,388,392],$VM1=[89,215,312,388,392],$VN1=[36,54,85,89],$VO1=[192,289],$VP1=[2,1179],$VQ1=[85,238,249,274,280,310,388,392],$VR1=[2,567],$VS1=[1,340],$VT1=[100,295,317,318],$VU1=[85,89,215,238,249,262,263,264,265,266,267,268,269,270,274,280,310,312,388,392],$VV1=[47,58,59,67,85,89,99,117,133,215,238,249,262,263,264,265,266,267,268,269,274,276,280,287,288,310,312,388,392,396,397,404,407,416,417,425,430,434,440,485],$VW1=[36,47,58,59,67,85,89,99,112,113,117,133,146,215,238,249,262,263,264,265,266,267,268,269,274,276,280,287,288,301,310,312,388,392,396,397,400,404,405,407,416,417,425,430,434,440,485],$VX1=[416,417,440],$VY1=[58,59,67,83,99,100,111,116,117,276,315,317,318,319,342,343,344,345,346,347,348,349,350,351,352,354,355,396,397,399,400,403,410,418,437,438],$VZ1=[36,47,54,58,59,67,81,85,89,99,100,112,113,117,133,146,162,173,180,181,215,238,249,262,263,264,265,266,267,268,269,270,274,276,280,287,288,301,310,312,388,392,396,397,400,404,405,407,416,417,422,424,425,427,428,430,434,440,485],$V_1=[36,47,54,58,59,67,81,85,89,99,100,112,113,117,133,146,215,238,249,262,263,264,265,266,267,268,269,270,274,276,280,287,288,301,310,312,388,392,396,397,400,404,405,407,416,417,422,424,425,427,428,430,434,440,485],$V$1=[85,249,274,280,310,388,392],$V02=[85,89,238,249,274,280,310,312,388,392],$V12=[1,448],$V22=[1,451],$V32=[1,449],$V42=[1,453],$V52=[1,450],$V62=[1,452],$V72=[1,455],$V82=[1,454],$V92=[85,89,238,249,262,263,264,265,266,267,268,269,270,274,280,310,312,388,392],$Va2=[47,58,59,67,85,89,117,238,249,262,263,264,265,266,267,268,269,270,274,276,280,310,312,388,392,396,397],$Vb2=[36,47,58,59,67,85,89,99,112,113,117,133,146,215,238,249,262,263,264,265,266,267,268,269,274,276,280,287,288,310,312,388,392,396,397,404,407,416,417,425,430,434,440,485],$Vc2=[47,58,59,67,85,89,117,133,215,238,249,262,263,264,265,266,267,268,269,274,276,280,287,288,310,312,388,392,396,397,404,416,417,425,430,434,440,485],$Vd2=[1,473],$Ve2=[85,280],$Vf2=[1,487],$Vg2=[1,513],$Vh2=[1,514],$Vi2=[1,515],$Vj2=[1,501],$Vk2=[1,502],$Vl2=[1,503],$Vm2=[1,504],$Vn2=[1,505],$Vo2=[1,506],$Vp2=[1,507],$Vq2=[1,508],$Vr2=[1,509],$Vs2=[1,510],$Vt2=[1,511],$Vu2=[1,512],$Vv2=[85,274,280,310,388,392],$Vw2=[67,83,117,276,396,397],$Vx2=[1,557],$Vy2=[85,89,280],$Vz2=[36,47,58,59,67,81,85,89,99,112,113,117,133,146,215,238,249,262,263,264,265,266,267,268,269,270,274,276,280,287,288,301,310,312,388,392,396,397,400,404,405,407,416,417,422,424,425,427,428,430,434,440,485],$VA2=[1,565],$VB2=[89,388,392],$VC2=[1,581],$VD2=[1,582],$VE2=[54,85,89,99,100,113],$VF2=[2,991],$VG2=[1,585],$VH2=[85,274,310,388,392],$VI2=[85,89,238,249,262,263,264,265,266,267,268,269,274,280,310,312,388,392],$VJ2=[2,475],$VK2=[1,608],$VL2=[54,85,89,99,100],$VM2=[1,655],$VN2=[85,89,249,274,280,310,388,392],$VO2=[407,540],$VP2=[1,674],$VQ2=[89,113],$VR2=[85,404,412,437,540],$VS2=[2,1237],$VT2=[85,89,133,274,310,388,392,430],$VU2=[85,404],$VV2=[2,1247],$VW2=[1,728],$VX2=[1,729],$VY2=[1,730],$VZ2=[1,738],$V_2=[1,739],$V$2=[2,1252],$V03=[1,752],$V13=[420,426],$V23=[2,200],$V33=[2,201];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"DataDefinition_EDIT":3,"ALTER":4,"CURSOR":5,"AlterTable_EDIT":6,"AlterView_EDIT":7,"CREATE":8,"DatabaseDefinition_EDIT":9,"TableDefinition_EDIT":10,"ViewDefinition_EDIT":11,"DROP":12,"DropDatabaseStatement_EDIT":13,"DropTableStatement_EDIT":14,"DropViewStatement_EDIT":15,"ExternalDefinition_EDIT":16,"LoadTableStatement_EDIT":17,"SET":18,"TruncateTableStatement_EDIT":19,"UseStatement_EDIT":20,"DataDefinition":21,"AlterTable":22,"AlterView":23,"DatabaseDefinition":24,"RoleDefinition":25,"TableDefinition":26,"ViewDefinition":27,"DropDatabaseStatement":28,"DropRoleStatement":29,"DropTableStatement":30,"DropViewStatement":31,"ExternalDefinition":32,"LoadTableStatement":33,"ALL":34,"SetOption":35,"=":36,"SetValue":37,"TruncateTableStatement":38,"UseStatement":39,"AlterTableLeftSide":40,"PartitionSpec":41,"AlterTableLeftSide_EDIT":42,"TABLE":43,"SchemaQualifiedTableIdentifier":44,"SchemaQualifiedTableIdentifier_EDIT":45,"AlterViewLeftSide":46,"AS":47,"QuerySpecification":48,"AlterViewLeftSide_EDIT":49,"QuerySpecification_EDIT":50,"VIEW":51,"OptionalComment":52,"Comment":53,"COMMENT":54,"QuotedValue":55,"OptionalComment_INVALID":56,"Comment_INVALID":57,"SINGLE_QUOTE":58,"DOUBLE_QUOTE":59,"VALUE":60,"DatabaseOrSchema":61,"OptionalIfNotExists":62,"RegularIdentifier":63,"DatabaseDefinitionOptionals":64,"OptionalIfNotExists_EDIT":65,"DatabaseDefinitionOptionals_EDIT":66,"ROLE":67,"TableDefinitionRightPart":68,"TableDefinitionRightPart_EDIT":69,"TableIdentifierAndOptionalColumnSpecification":70,"OptionalPartitionedBy":71,"OptionalAsSelectStatement":72,"TableIdentifierAndOptionalColumnSpecification_EDIT":73,"PartitionedBy_EDIT":74,"OptionalAsSelectStatement_EDIT":75,"SchemaQualifiedIdentifier":76,"OptionalColumnSpecificationsOrLike":77,"OptionalColumnSpecificationsOrLike_EDIT":78,"SchemaQualifiedIdentifier_EDIT":79,"ParenthesizedColumnSpecificationList":80,"LIKE":81,"ParenthesizedColumnSpecificationList_EDIT":82,"(":83,"ColumnSpecificationList":84,")":85,"ColumnSpecificationList_EDIT":86,"RightParenthesisOrError":87,"ColumnSpecification":88,",":89,"ColumnSpecification_EDIT":90,"ColumnIdentifier":91,"ColumnDataType":92,"OptionalColumnOptions":93,"ColumnDataType_EDIT":94,"ColumnOptions_EDIT":95,"ColumnOptions":96,"ColumnOption":97,"ColumnOption_EDIT":98,"NOT":99,"NULL":100,"PrimitiveType":101,"ArrayType":102,"MapType":103,"StructType":104,"ArrayType_INVALID":105,"MapType_INVALID":106,"StructType_INVALID":107,"ArrayType_EDIT":108,"MapType_EDIT":109,"StructType_EDIT":110,"ARRAY":111,"<":112,">":113,"AnyCursor":114,"GreaterThanOrError":115,"MAP":116,"STRUCT":117,"StructDefinitionList":118,"StructDefinitionList_EDIT":119,"StructDefinition":120,"StructDefinition_EDIT":121,"Commas":122,"RegularOrBacktickedIdentifier":123,":":124,"ColumnDataTypeList":125,"ColumnDataTypeList_EDIT":126,"ColumnDataTypeListInner_EDIT":127,"PartitionedBy":128,"PARTITION":129,"BY":130,"RangeClause":131,"RangeClause_EDIT":132,"RANGE":133,"ParenthesizedColumnList":134,"ParenthesizedPartitionValuesList":135,"ParenthesizedColumnList_EDIT":136,"ParenthesizedPartitionValuesList_EDIT":137,"PartitionValueList":138,"PartitionValueList_EDIT":139,"PartitionValue":140,"PartitionValue_EDIT":141,"ValueExpression":142,"LessThanOrEqualTo":143,"VALUES":144,"ValueExpression_EDIT":145,"COMPARISON_OPERATOR":146,"CommitLocations":147,"OptionalParenthesizedViewColumnList":148,"ParenthesizedViewColumnList_EDIT":149,"ParenthesizedViewColumnList":150,"ViewColumnList":151,"ViewColumnList_EDIT":152,"ColumnReference":153,"OptionalIfExists":154,"OptionalCascade":155,"OptionalIfExists_EDIT":156,"OptionalPurge":157,"PURGE":158,"ExternalStorageDefinition":159,"ExternalLocationDefinition":160,"ExternalFormatDefinition":161,"EXTERNAL":162,"ExternalStorageDefinition_EDIT":163,"ExternalLocationDefinition_EDIT":164,"ExternalFormatDefinition_EDIT":165,"STORAGE":166,"ExternalStorageDefinitionRightPart":167,"ExternalStorageDefinitionRightPart_EDIT":168,"TYPE":169,"StorageType":170,"ENDPOINT":171,"EndpointType":172,"REGION":173,"RegionType":174,"IdentityAndCredential":175,"SingleQuotedValue":176,"EndpointType_EDIT":177,"SingleQuotedValue_EDIT":178,"RegionType_EDIT":179,"IDENTITY":180,"CREDENTIAL":181,"IdentityAndCredential_EDIT":182,"LOCATION":183,"ExternalLocationDefinitionRightPart":184,"ExternalLocationDefinitionRightPart_EDIT":185,"PATH":186,"PathType":187,"FORMAT":188,"ExternalFormatDefinitionRightPart":189,"ExternalFormatDefinitionRightPart_EDIT":190,"FormatType":191,"WITH":192,"WithClause":193,"WithClause_EDIT":194,"DataManipulation":195,"InsertStatement":196,"UpdateStatement":197,"InsertValuesStatement":198,"DataManipulation_EDIT":199,"InsertValuesStatement_EDIT":200,"UpdateStatement_EDIT":201,"INSERT":202,"INTO":203,"OptionalTable":204,"InsertValuesList":205,"ParenthesizedRowValuesList":206,"InValueList":207,"LOAD":208,"LoadFromSpec":209,"LoadSourceFieldsSpec":210,"LoadFromSpec_EDIT":211,"LoadSourceFieldsSpec_EDIT":212,"SOURCE":213,"FIELDS":214,"FROM":215,"LoadFromSpecList":216,"LoadFromSpecList_EDIT":217,"CommonTableExpression":218,"SelectStatement":219,"OptionalUnions":220,"SelectStatement_EDIT":221,"OptionalUnions_EDIT":222,"CommonTableExpression_EDIT":223,"WithQueries":224,"WithQueries_EDIT":225,"WithQuery":226,"WithQuery_EDIT":227,"TableSubQueryInner":228,"TableSubQueryInner_EDIT":229,"FromClause":230,"TableReferenceList":231,"FromClause_EDIT":232,"TableReferenceList_EDIT":233,"TableReference":234,"TableReference_EDIT":235,"OptionalGroupByClause":236,"GroupByClause":237,"GROUP":238,"GroupByColumnList":239,"GroupByClause_EDIT":240,"GroupByColumnList_EDIT":241,"ColumnGroupingSets":242,"ColumnGroupingSets_EDIT":243,"ColumnGroupingSet_EDIT":244,"ColumnReference_EDIT":245,"GroupByColumnListPartTwo_EDIT":246,"OptionalHavingClause":247,"HavingClause":248,"HAVING":249,"HavingClause_EDIT":250,"OptionalJoins":251,"Joins":252,"Joins_INVALID":253,"JoinType":254,"TablePrimary":255,"OptionalJoinCondition":256,"Join_EDIT":257,"JoinType_EDIT":258,"TablePrimary_EDIT":259,"JoinCondition_EDIT":260,"Joins_EDIT":261,"CROSS":262,"JOIN":263,"FULL":264,"OUTER":265,"INNER":266,"LEFT":267,"SEMI":268,"RIGHT":269,"ON":270,"UsingColList":271,"OptionalLimitClause":272,"LimitClause":273,"LIMIT":274,"UnsignedNumericLiteral":275,"VARIABLE_REFERENCE":276,"LimitClause_EDIT":277,"OptionalOrderByClause":278,"OrderByClause":279,"ORDER":280,"OrderByColumnList":281,"OrderByClause_EDIT":282,"OrderByColumnList_EDIT":283,"OrderByIdentifier":284,"OrderByIdentifier_EDIT":285,"OptionalAscOrDesc":286,"ASC":287,"DESC":288,"SELECT":289,"OptionalAllOrDistinct":290,"SelectList":291,"TableExpression":292,"SelectList_EDIT":293,"TableExpression_EDIT":294,"DISTINCT":295,"OptionalSelectConditions":296,"OptionalSelectConditions_EDIT":297,"SelectSpecification":298,"SelectSpecification_EDIT":299,"OptionalCorrelationName":300,"*":301,"OptionalCorrelationName_EDIT":302,"OptionalWhereClause":303,"WhereClause_EDIT":304,"WhereClause":305,"Unions":306,"Unions_EDIT":307,"UnionClause":308,"UnionClause_EDIT":309,"UNION":310,"NewStatement":311,"WHERE":312,"SearchCondition":313,"SearchCondition_EDIT":314,".":315,"SignedInteger":316,"TRUE":317,"FALSE":318,"TRUNCATE":319,"OptionalPartitionSpec":320,"UserDefinedFunction":321,"AggregateFunction":322,"OptionalOverClause":323,"AnalyticFunction":324,"OverClause":325,"CastFunction":326,"UserDefinedFunction_EDIT":327,"AggregateFunction_EDIT":328,"OptionalOverClause_EDIT":329,"AnalyticFunction_EDIT":330,"OverClause_EDIT":331,"CastFunction_EDIT":332,"OtherAggregateFunction":333,"CountFunction":334,"SumFunction":335,"OtherAggregateFunction_EDIT":336,"CountFunction_EDIT":337,"SumFunction_EDIT":338,"OtherAggregateFunction_Type":339,"UdfArgumentList":340,"UdfArgumentList_EDIT":341,"AVG":342,"MAX":343,"MIN":344,"STDDEV_POP":345,"STDDEV_SAMP":346,"VAR_POP":347,"VAR_SAMP":348,"VARIANCE":349,"COUNT":350,"SUM":351,"ANALYTIC":352,"ArbitraryFunctionName":353,"IF":354,"CAST":355,"NonParenthesizedValueExpressionPrimary":356,"ColumnOrArbitraryFunctionRef":357,"ArbitraryFunctionRightPart":358,"UnsignedValueSpecification":359,"NonParenthesizedValueExpressionPrimary_EDIT":360,"ArbitraryFunctionRightPart_EDIT":361,"UnsignedValueSpecification_EDIT":362,"ColumnOrArbitraryFunctionRef_EDIT":363,"ArbitraryFunction":364,"ArbitraryFunction_EDIT":365,"OVER":366,"WindowExpression":367,"WindowExpression_EDIT":368,"UPDATE":369,"TargetTable":370,"SetClauseList":371,"OptionalFromJoinedTable":372,"TargetTable_EDIT":373,"SetClauseList_EDIT":374,"FromJoinedTable_EDIT":375,"TableName":376,"TableName_EDIT":377,"LocalOrSchemaQualifiedName":378,"LocalOrSchemaQualifiedName_EDIT":379,"SetClause":380,"SetClause_EDIT":381,"SetTarget":382,"UpdateSource":383,"UpdateSource_EDIT":384,"USE":385,"SqlSyntax":386,"SqlStatements":387,"EOF":388,"SqlAutocomplete":389,"SqlStatements_EDIT":390,"SqlStatement":391,";":392,"SqlStatement_EDIT":393,"SetSpecification_EDIT":394,"NonReservedKeyword":395,"OPTION":396,"REGULAR_IDENTIFIER":397,"NonStartingToken":398,"!":399,"-":400,"[":401,"]":402,"~":403,"AND":404,"ARITHMETIC_OPERATOR":405,"BACKTICK":406,"BETWEEN":407,"BIGINT":408,"BOOLEAN":409,"CASE":410,"CHAR":411,"CURRENT":412,"DATABASE":413,"DECIMAL":414,"DOUBLE":415,"ELSE":416,"END":417,"EXISTS":418,"FLOAT":419,"FOLLOWING":420,"HDFS_START_QUOTE":421,"IN":422,"INT":423,"IS":424,"OR":425,"PRECEDING":426,"REGEXP":427,"RLIKE":428,"ROW":429,"ROWS":430,"SCHEMA":431,"SMALLINT":432,"STRING":433,"THEN":434,"TIMESTAMP":435,"TINYINT":436,"UNSIGNED_INTEGER":437,"UNSIGNED_INTEGER_E":438,"VARCHAR":439,"WHEN":440,"PARTIAL_CURSOR":441,"FromOrIn":442,"PARTIAL_VALUE":443,"DoubleQuotedValue":444,"DoubleQuotedValue_EDIT":445,"QuotedValue_EDIT":446,"OptionalFromDatabase":447,"DatabaseIdentifier":448,"OptionalFromDatabase_EDIT":449,"DatabaseIdentifier_EDIT":450,"CASCADE":451,"OptionalInDatabase":452,"OptionalPartitionSpec_EDIT":453,"PartitionSpec_EDIT":454,"PartitionSpecList":455,"PartitionSpecList_EDIT":456,"RangePartitionSpec":457,"RangePartitionComparisonOperator":458,"RangePartitionSpec_EDIT":459,"ConfigurationName":460,"PartialBacktickedOrAnyCursor":461,"PartialBacktickedIdentifier":462,"PartialBacktickedOrCursor":463,"PartialBacktickedOrPartialCursor":464,"OptionalParenthesizedColumnList":465,"OptionalParenthesizedColumnList_EDIT":466,"ColumnList":467,"ColumnList_EDIT":468,"ParenthesizedSimpleValueList":469,"SimpleValueList":470,"PartitionExpression":471,"PartitionExpression_EDIT":472,"RegularOrBackTickedSchemaQualifiedName":473,"RegularOrBackTickedSchemaQualifiedName_EDIT":474,"BasicIdentifierChain":475,"BasicIdentifierChain_EDIT":476,"DerivedColumnChain":477,"DerivedColumnChain_EDIT":478,"PartialBacktickedIdentifierOrPartialCursor":479,"OptionalTypeLength":480,"OptionalTypePrecision":481,"OptionalNot":482,"TableSubQuery":483,"ValueExpressionList":484,"BETWEEN_AND":485,"LikeRightPart":486,"CaseRightPart":487,"TableSubQuery_EDIT":488,"ValueExpressionInSecondPart_EDIT":489,"LikeRightPart_EDIT":490,"CaseRightPart_EDIT":491,"EndOrError":492,"ValueExpressionList_EDIT":493,"+":494,"UnsignedLiteral":495,"UnsignedLiteral_EDIT":496,"GeneralLiteral":497,"GeneralLiteral_EDIT":498,"ExactNumericLiteral":499,"ApproximateNumericLiteral":500,"TruthValue":501,"TablePrimaryOrJoinedTable":502,"TablePrimaryOrJoinedTable_EDIT":503,"JoinedTable":504,"JoinedTable_EDIT":505,"TableOrQueryName":506,"DerivedTable":507,"TableOrQueryName_EDIT":508,"DerivedTable_EDIT":509,"OptionalOnColumn":510,"OptionalOnColumn_EDIT":511,"PushQueryState":512,"PopQueryState":513,"SubQuery":514,"SubQuery_EDIT":515,"QueryExpression":516,"QueryExpression_EDIT":517,"QueryExpressionBody":518,"QueryExpressionBody_EDIT":519,"NonJoinQueryExpression":520,"NonJoinQueryExpression_EDIT":521,"NonJoinQueryTerm":522,"NonJoinQueryTerm_EDIT":523,"NonJoinQueryPrimary":524,"NonJoinQueryPrimary_EDIT":525,"SimpleTable":526,"SimpleTable_EDIT":527,"OptionalPartitionBy":528,"OptionalOrderByAndWindow":529,"PartitionBy_EDIT":530,"OptionalOrderByAndWindow_EDIT":531,"PartitionBy":532,"OptionalWindowSpec":533,"WindowSpec_EDIT":534,"WindowSpec":535,"RowsOrRange":536,"PopLexerState":537,"OptionalCurrentOrPreceding":538,"OptionalAndFollowing":539,"UNBOUNDED":540,"OptionalCurrentOrPreceding_EDIT":541,"OptionalAndFollowing_EDIT":542,"PushHdfsLexerState":543,"HdfsPath":544,"HDFS_PATH":545,"HDFS_END_QUOTE":546,"HdfsPath_EDIT":547,"IntegerOrUnbounded":548,"CaseWhenThenList":549,"CaseWhenThenList_EDIT":550,"CaseWhenThenListPartTwo":551,"CaseWhenThenListPartTwo_EDIT":552,"ParenthesizedWithOptionsList":553,"WithOptionList":554,"WithOption":555,"WithValue":556,"OFF":557,"ParenthesizedWithOptionsList_EDIT":558,"WithOptionList_EDIT":559,"WithOption_EDIT":560,"$accept":0,"$end":1},
terminals_: {2:"error",4:"ALTER",5:"CURSOR",8:"CREATE",12:"DROP",18:"SET",34:"ALL",36:"=",43:"TABLE",47:"AS",51:"VIEW",54:"COMMENT",58:"SINGLE_QUOTE",59:"DOUBLE_QUOTE",60:"VALUE",67:"ROLE",81:"LIKE",83:"(",85:")",89:",",99:"NOT",100:"NULL",111:"ARRAY",112:"<",113:">",116:"MAP",117:"STRUCT",124:":",129:"PARTITION",130:"BY",133:"RANGE",144:"VALUES",146:"COMPARISON_OPERATOR",158:"PURGE",162:"EXTERNAL",166:"STORAGE",169:"TYPE",171:"ENDPOINT",173:"REGION",180:"IDENTITY",181:"CREDENTIAL",183:"LOCATION",186:"PATH",188:"FORMAT",192:"WITH",202:"INSERT",203:"INTO",208:"LOAD",213:"SOURCE",214:"FIELDS",215:"FROM",238:"GROUP",249:"HAVING",262:"CROSS",263:"JOIN",264:"FULL",265:"OUTER",266:"INNER",267:"LEFT",268:"SEMI",269:"RIGHT",270:"ON",274:"LIMIT",276:"VARIABLE_REFERENCE",280:"ORDER",287:"ASC",288:"DESC",289:"SELECT",295:"DISTINCT",301:"*",310:"UNION",312:"WHERE",315:".",317:"TRUE",318:"FALSE",319:"TRUNCATE",342:"AVG",343:"MAX",344:"MIN",345:"STDDEV_POP",346:"STDDEV_SAMP",347:"VAR_POP",348:"VAR_SAMP",349:"VARIANCE",350:"COUNT",351:"SUM",352:"ANALYTIC",354:"IF",355:"CAST",366:"OVER",369:"UPDATE",385:"USE",388:"EOF",392:";",394:"SetSpecification_EDIT",396:"OPTION",397:"REGULAR_IDENTIFIER",399:"!",400:"-",401:"[",402:"]",403:"~",404:"AND",405:"ARITHMETIC_OPERATOR",406:"BACKTICK",407:"BETWEEN",408:"BIGINT",409:"BOOLEAN",410:"CASE",411:"CHAR",412:"CURRENT",413:"DATABASE",414:"DECIMAL",415:"DOUBLE",416:"ELSE",417:"END",418:"EXISTS",419:"FLOAT",420:"FOLLOWING",421:"HDFS_START_QUOTE",422:"IN",423:"INT",424:"IS",425:"OR",426:"PRECEDING",427:"REGEXP",428:"RLIKE",429:"ROW",430:"ROWS",431:"SCHEMA",432:"SMALLINT",433:"STRING",434:"THEN",435:"TIMESTAMP",436:"TINYINT",437:"UNSIGNED_INTEGER",438:"UNSIGNED_INTEGER_E",439:"VARCHAR",440:"WHEN",441:"PARTIAL_CURSOR",443:"PARTIAL_VALUE",451:"CASCADE",485:"BETWEEN_AND",494:"+",540:"UNBOUNDED",545:"HDFS_PATH",546:"HDFS_END_QUOTE",557:"OFF"},
productions_: [0,[3,2],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,2],[21,4],[21,1],[21,1],[22,2],[6,1],[6,2],[6,2],[6,3],[40,3],[42,3],[42,3],[23,3],[7,1],[7,2],[7,3],[7,3],[7,3],[46,3],[49,3],[49,3],[52,0],[52,1],[53,2],[56,1],[57,2],[57,2],[57,3],[57,3],[24,3],[24,5],[9,4],[9,3],[9,5],[9,4],[9,6],[64,1],[66,1],[25,3],[26,4],[10,4],[10,4],[10,3],[68,3],[69,3],[69,3],[69,3],[69,3],[70,2],[73,2],[73,2],[77,0],[77,1],[77,2],[78,1],[78,2],[78,2],[80,3],[82,3],[84,1],[84,3],[86,1],[86,3],[86,3],[86,5],[86,2],[86,4],[86,4],[86,6],[88,3],[90,3],[90,3],[90,3],[93,0],[93,1],[96,1],[96,2],[95,1],[95,2],[95,2],[95,3],[97,2],[97,1],[97,1],[98,2],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[94,1],[94,1],[94,1],[102,4],[105,3],[108,4],[108,4],[103,6],[106,3],[109,6],[109,4],[109,6],[109,5],[104,4],[107,3],[110,4],[118,1],[118,3],[119,1],[119,2],[119,3],[119,3],[119,5],[120,4],[121,5],[121,4],[121,4],[121,4],[121,3],[121,3],[125,1],[125,3],[126,1],[126,2],[126,3],[126,3],[126,5],[127,2],[127,2],[127,1],[127,1],[115,1],[115,1],[71,0],[71,1],[128,3],[74,2],[74,3],[74,3],[131,3],[132,2],[132,2],[132,3],[132,3],[132,3],[135,3],[137,3],[137,3],[138,1],[138,3],[139,1],[139,3],[139,5],[139,3],[139,5],[140,6],[140,4],[140,4],[141,2],[141,2],[141,3],[141,4],[141,4],[141,5],[141,6],[141,6],[141,3],[141,4],[141,4],[143,1],[143,1],[72,0],[72,3],[75,3],[75,3],[147,0],[27,8],[11,4],[11,9],[11,3],[11,6],[11,7],[11,8],[11,8],[11,8],[148,0],[148,1],[150,3],[149,3],[151,2],[151,4],[152,3],[152,5],[152,5],[152,7],[28,5],[13,3],[13,3],[13,4],[13,5],[13,5],[13,6],[29,3],[30,5],[14,3],[14,4],[14,5],[14,5],[14,6],[157,0],[157,1],[31,4],[15,4],[15,5],[15,3],[15,4],[15,4],[32,1],[32,1],[32,1],[16,3],[16,1],[16,1],[16,1],[159,5],[163,5],[163,6],[163,5],[163,4],[167,7],[167,8],[170,1],[172,1],[177,1],[174,1],[179,1],[175,4],[182,2],[182,2],[182,3],[182,4],[182,4],[168,2],[168,3],[168,4],[168,5],[168,6],[168,7],[168,8],[168,8],[160,5],[164,5],[164,6],[164,5],[164,4],[184,6],[184,9],[187,1],[185,2],[185,4],[185,6],[185,6],[185,7],[185,9],[185,9],[161,5],[165,5],[165,6],[165,5],[165,4],[189,5],[191,1],[190,2],[190,3],[190,4],[190,5],[195,1],[195,1],[196,1],[199,1],[199,1],[198,6],[200,2],[200,4],[200,4],[200,5],[200,6],[205,1],[205,3],[206,3],[204,0],[204,1],[33,7],[33,9],[33,10],[33,12],[33,8],[33,10],[33,11],[33,13],[17,2],[17,3],[17,4],[17,4],[17,5],[17,7],[17,8],[17,9],[17,10],[17,10],[17,12],[17,4],[17,5],[17,5],[17,6],[17,8],[17,9],[17,10],[17,11],[17,11],[17,13],[210,3],[212,3],[209,4],[211,2],[211,4],[216,1],[216,3],[217,1],[217,3],[217,3],[217,5],[48,3],[48,5],[48,2],[50,4],[50,3],[50,3],[50,1],[50,4],[50,3],[50,2],[50,2],[218,2],[223,2],[224,1],[224,3],[225,1],[225,3],[225,3],[225,5],[226,5],[227,2],[227,5],[227,5],[230,2],[232,2],[232,2],[231,1],[231,3],[233,1],[233,3],[233,3],[233,5],[233,3],[236,0],[236,1],[237,3],[240,3],[240,3],[240,2],[242,0],[242,1],[242,3],[242,3],[243,1],[243,3],[243,3],[243,5],[243,3],[244,1],[244,1],[239,1],[239,3],[241,1],[241,2],[241,3],[241,3],[241,3],[241,4],[241,5],[246,1],[246,2],[246,1],[247,0],[247,1],[248,2],[250,2],[250,2],[251,0],[251,1],[251,1],[252,3],[252,4],[253,1],[253,2],[257,3],[257,1],[257,3],[257,3],[257,3],[261,1],[261,2],[261,2],[261,3],[254,2],[254,2],[254,3],[254,2],[254,1],[254,3],[254,2],[254,3],[254,3],[254,2],[254,3],[254,2],[254,3],[254,3],[254,2],[258,2],[258,3],[258,3],[258,2],[258,3],[258,3],[258,3],[258,3],[258,2],[258,3],[258,3],[258,3],[258,3],[258,2],[256,0],[256,2],[271,1],[271,3],[260,2],[260,2],[272,0],[272,1],[273,2],[273,4],[273,2],[273,4],[277,2],[278,0],[278,1],[279,3],[282,3],[282,2],[281,1],[281,3],[283,1],[283,2],[283,3],[283,4],[283,5],[284,2],[285,2],[285,2],[286,0],[286,1],[286,1],[219,3],[219,4],[221,3],[221,3],[221,4],[221,4],[221,4],[221,5],[221,6],[221,4],[290,0],[290,1],[290,1],[292,2],[294,2],[294,4],[294,3],[291,1],[291,3],[293,1],[293,2],[293,3],[293,3],[293,3],[293,4],[293,3],[293,3],[293,4],[293,4],[293,4],[293,5],[293,5],[298,2],[298,1],[299,2],[299,3],[299,2],[296,5],[297,5],[297,5],[297,5],[297,5],[297,5],[297,6],[297,6],[297,6],[297,6],[297,6],[220,0],[220,1],[222,1],[306,1],[306,2],[307,1],[307,2],[307,2],[307,3],[308,4],[309,3],[309,4],[309,4],[303,0],[303,1],[305,2],[304,2],[304,2],[313,1],[314,1],[35,1],[35,3],[37,1],[37,1],[37,2],[37,1],[37,1],[37,1],[37,1],[38,4],[19,2],[19,4],[19,3],[19,4],[19,5],[19,5],[19,5],[321,2],[321,2],[321,1],[327,1],[327,2],[327,1],[327,2],[327,2],[327,2],[327,1],[322,1],[322,1],[322,1],[328,1],[328,1],[328,1],[333,4],[333,5],[336,5],[336,6],[336,5],[339,1],[339,1],[339,1],[339,1],[339,1],[339,1],[339,1],[339,1],[334,4],[334,3],[334,5],[337,5],[337,6],[337,5],[335,5],[335,3],[338,5],[338,6],[338,5],[324,3],[324,4],[330,4],[330,5],[330,4],[353,1],[353,1],[353,1],[353,1],[326,6],[326,3],[332,6],[332,5],[332,4],[332,6],[332,5],[332,4],[332,6],[332,5],[332,6],[332,5],[356,2],[356,2],[356,1],[356,1],[356,1],[356,1],[360,2],[360,2],[360,1],[360,1],[360,1],[364,2],[364,2],[365,2],[365,2],[358,2],[358,3],[361,3],[361,4],[361,3],[340,1],[340,3],[341,1],[341,3],[341,3],[341,5],[341,3],[341,5],[341,4],[341,3],[341,2],[341,2],[341,4],[323,0],[323,1],[329,1],[325,2],[325,2],[331,2],[197,6],[201,6],[201,6],[201,6],[201,6],[201,7],[201,3],[201,2],[201,2],[201,2],[370,1],[373,1],[376,1],[377,1],[371,1],[371,3],[374,1],[374,3],[374,3],[374,5],[380,3],[381,3],[381,2],[381,1],[382,1],[383,1],[384,1],[372,0],[372,2],[375,2],[375,2],[39,2],[20,2],[386,3],[389,3],[389,3],[311,0],[387,0],[387,1],[387,4],[390,1],[390,4],[390,4],[390,7],[391,1],[391,1],[391,1],[393,1],[393,2],[393,1],[393,1],[393,1],[393,1],[395,1],[395,1],[395,1],[63,1],[63,1],[63,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[398,1],[122,1],[122,2],[114,1],[114,1],[442,1],[442,1],[61,1],[61,1],[176,3],[176,2],[178,2],[444,3],[444,2],[445,2],[55,1],[55,1],[446,1],[446,1],[447,0],[447,2],[449,2],[155,0],[155,1],[154,0],[154,2],[156,2],[62,0],[62,3],[65,2],[65,3],[452,0],[452,2],[452,2],[320,0],[320,1],[453,1],[41,4],[454,4],[457,5],[459,2],[459,3],[459,4],[459,5],[459,5],[459,5],[458,1],[458,1],[458,1],[458,1],[460,1],[460,1],[461,1],[461,1],[463,1],[463,1],[464,1],[464,1],[462,1],[87,1],[87,1],[465,0],[465,1],[466,1],[134,3],[136,3],[136,3],[467,1],[467,3],[468,3],[468,5],[469,3],[470,1],[470,3],[44,1],[44,3],[45,1],[45,3],[45,3],[76,1],[76,3],[79,1],[79,3],[79,3],[448,1],[450,1],[455,1],[455,3],[456,1],[456,3],[456,3],[456,5],[471,3],[472,3],[472,3],[472,3],[472,1],[123,1],[473,1],[473,3],[474,1],[474,3],[378,1],[378,2],[379,1],[379,2],[153,1],[153,3],[245,1],[475,1],[475,3],[476,3],[476,5],[477,1],[477,3],[478,1],[478,3],[478,5],[478,3],[91,1],[479,1],[479,1],[101,1],[101,1],[101,2],[101,2],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,2],[480,0],[480,3],[481,0],[481,3],[481,5],[142,1],[142,2],[142,2],[142,2],[142,2],[142,4],[142,4],[142,4],[142,6],[142,2],[142,3],[142,3],[142,3],[142,3],[142,3],[142,6],[142,6],[142,5],[142,5],[142,6],[142,5],[142,3],[142,3],[142,3],[142,3],[142,3],[142,2],[142,3],[142,2],[142,3],[145,1],[145,3],[145,2],[145,2],[145,2],[145,2],[145,2],[145,2],[145,2],[145,2],[145,3],[145,4],[145,5],[145,4],[145,4],[145,4],[145,6],[145,6],[145,2],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,4],[145,3],[145,6],[145,6],[145,5],[145,5],[145,6],[145,6],[145,6],[145,6],[145,5],[145,4],[145,5],[145,5],[145,5],[145,5],[145,4],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,2],[145,3],[145,2],[145,3],[145,2],[145,3],[145,2],[145,3],[145,3],[145,4],[145,3],[145,3],[145,3],[484,1],[484,3],[493,1],[493,3],[493,3],[493,5],[493,3],[493,5],[493,4],[493,3],[493,2],[493,2],[493,4],[207,1],[207,3],[357,1],[357,3],[363,1],[316,1],[316,2],[316,2],[359,1],[362,1],[495,1],[495,1],[496,1],[275,1],[275,1],[499,1],[499,2],[499,3],[499,2],[500,2],[500,3],[500,4],[497,1],[497,1],[497,1],[498,1],[498,1],[501,1],[501,1],[482,0],[482,1],[234,1],[235,1],[502,1],[502,1],[503,1],[503,1],[504,2],[505,2],[505,2],[255,2],[255,2],[259,2],[259,2],[259,2],[506,1],[508,1],[507,1],[509,1],[510,0],[510,2],[511,2],[511,2],[512,0],[513,0],[483,3],[483,4],[488,3],[488,3],[228,2],[229,3],[514,1],[515,1],[516,1],[517,1],[518,1],[519,1],[520,1],[521,1],[522,1],[523,1],[524,1],[525,1],[526,1],[527,1],[300,0],[300,1],[300,1],[300,2],[300,2],[302,1],[302,1],[302,2],[302,2],[302,2],[367,4],[368,4],[368,4],[368,5],[368,7],[528,0],[528,1],[532,3],[530,2],[530,3],[530,3],[529,0],[529,2],[531,1],[531,3],[531,2],[533,0],[533,1],[535,5],[535,5],[534,2],[534,6],[534,5],[534,5],[534,5],[534,4],[537,0],[543,0],[544,3],[547,5],[547,4],[547,3],[547,3],[547,2],[536,1],[536,1],[538,0],[538,2],[538,2],[541,2],[541,2],[539,0],[539,3],[539,3],[542,2],[542,3],[542,3],[548,1],[548,1],[489,3],[489,3],[489,3],[486,2],[486,2],[486,2],[490,2],[490,2],[490,2],[490,2],[490,2],[490,2],[487,2],[487,4],[491,2],[491,4],[491,4],[491,3],[491,4],[491,3],[491,4],[491,4],[491,3],[491,4],[491,3],[492,1],[492,1],[549,1],[549,2],[550,1],[550,2],[550,3],[550,3],[550,2],[551,4],[552,2],[552,3],[552,4],[552,4],[552,3],[552,3],[552,4],[552,2],[552,3],[552,2],[552,3],[552,3],[552,4],[552,3],[552,4],[552,4],[552,5],[552,4],[552,3],[193,1],[553,3],[554,1],[554,3],[555,2],[556,1],[556,1],[556,1],[556,1],[556,1],[194,1],[558,1],[558,2],[558,3],[559,1],[559,3],[559,5],[560,2],[560,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

     parser.suggestKeywords(['TABLE', 'VIEW']);
   
break;
case 4:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW', 'EXTERNAL']);
   
break;
case 8:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW']);
   
break;
case 14:

     parser.suggestSetOptions();
   
break;
case 38: case 47: case 242: case 246: case 583: case 703:

     parser.addTablePrimary($$[$0]);
   
break;
case 39: case 237:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyTables = true;
     }
   
break;
case 40:

     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 43: case 383:

     parser.suggestKeywords(['AS']);
   
break;
case 45: case 204: case 213: case 384: case 739: case 1184:

     parser.suggestKeywords(['SELECT']);
   
break;
case 48: case 247:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyViews = true;
     }
   
break;
case 49:

     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 59:

     parser.addNewDatabaseLocation(_$[$0-1], [{ name: $$[$0-1] }]);
   
break;
case 60: case 70:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 62:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 63:

     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 64:

     parser.addNewDatabaseLocation(_$[$0-2], [{ name: $$[$0-2] }]);
   
break;
case 65:

     if (!$$[$0]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 76:

     var keywords = [];
     if (!$$[$0-2] && !$$[$0-1]) {
       keywords.push({ value: 'LIKE', weight: 1 });
     } else {
       if (!$$[$0-1]) {
         keywords.push({ value: 'PARTITIONED BY', weight: 12 });
       }
       keywords.push({ value: 'AS', weight: 1 });
     }

     if (keywords.length > 0) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 77:

     parser.addNewTableLocation(_$[$0-1], $$[$0-1], $$[$0]);
     this.$ = $$[$0];
   
break;
case 82:
this.$ = [];
break;
case 84: case 700: case 720: case 933:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 86: case 222: case 224: case 365: case 535: case 668: case 671: case 866: case 869: case 1006: case 1181:
this.$ = $$[$0-1];
break;
case 88: case 376:
this.$ = [$$[$0]];
break;
case 89:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 94: case 96:

     parser.checkForKeywords($$[$0-1]);
   
break;
case 95: case 97:

     parser.checkForKeywords($$[$0-3]);
   
break;
case 98:

     this.$ = $$[$0-2];
     this.$.type = $$[$0-1];
     var keywords = [];
     if (!$$[$0]['comment']) {
       keywords.push('COMMENT');
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 99: case 126: case 132: case 133: case 146: case 149: case 158: case 160:

     parser.suggestKeywords(parser.getColumnDataTypeKeywords());
   
break;
case 102:
this.$ = {};
break;
case 104:

     this.$ = {};
     this.$[$$[$0]] = true;
   
break;
case 105:

     $$[$0-1][$$[$0]] = true;
   
break;
case 110: case 111:
this.$ = 'null';
break;
case 112:
this.$ = 'comment';
break;
case 113:

     parser.suggestKeywords(['NULL']);
   
break;
case 131:

     parser.suggestKeywords(parser.getTypeKeywords());
   
break;
case 145: case 148:

     parser.suggestKeywords(['COMMENT']);
   
break;
case 167: case 1219:

     parser.suggestKeywords(['BY']);
   
break;
case 168:

     parser.suggestKeywords(['RANGE']);
   
break;
case 177: case 182: case 183:

     parser.suggestKeywords(['PARTITION']);
   
break;
case 189:

     parser.suggestKeywords(['VALUE', 'VALUES']);
   
break;
case 190:

     if ($$[$0].endsWithLessThanOrEqual) {
      parser.suggestKeywords(['VALUES']);
     }
   
break;
case 191: case 194: case 197:

     parser.suggestKeywords(['<', '<=']);
   
break;
case 192: case 898: case 901:

     parser.suggestKeywords(['VALUES']);
   
break;
case 195: case 198:

     parser.suggestFunctions();
   
break;
case 206:

     parser.commitLocations();
   
break;
case 208:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.suggestDatabases({ appendDot: true });
   
break;
case 209:

     if (!$$[$0-6]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 212:

     var keywords = [{value: 'AS', weight: 1 }];
     if (!$$[$0-1]) {
       keywords.push({ value: 'COMMENT', weight: 3 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 219:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 223: case 225:
this.$ = $$[$0-3];
break;
case 229:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestDatabases();
   
break;
case 230:

     parser.suggestKeywords(['CASCADE']);
   
break;
case 232:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 234: case 588:

     parser.addTablePrimary($$[$0-1]);
   
break;
case 236:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 239:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0-1]) {
       parser.suggestKeywords(['PURGE']);
     }
   
break;
case 243:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 244:

     parser.addTablePrimary($$[$0]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 251:

   parser.suggestKeywords(['STORAGE', 'LOCATION', 'FORMAT']);
 
break;
case 256: case 282: case 297:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.suggestSchemas({ appendDot: true });
   
break;
case 257: case 283: case 298:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 268: case 271: case 1332:

   parser.suggestKeywords(["''"]);
 
break;
case 270:

   parser.suggestKeywords(["CREDENTIAL ''"]);
 
break;
case 273: case 303:

   parser.suggestKeywords(['TYPE']);
 
break;
case 274:

   parser.suggestKeywords(['S3', 'NFS']);
 
break;
case 275:

   parser.suggestKeywords(["ENDPOINT ''"]);
 
break;
case 277:

   parser.suggestKeywords(["REGION ''"]);
 
break;
case 279:

   parser.suggestKeywords(["IDENTITY ''"]);
 
break;
case 289:

   parser.suggestKeywords(["PATH ''"]);
 
break;
case 290:

   parser.suggestKeywords(['EXTERNAL STORAGE']);
 
break;
case 291:

   parser.suggestExternalStorage();
 
break;
case 293:

   parser.suggestKeywords(['EXTERNAL FORMAT']);
 
break;
case 294:

   parser.suggestExternalFormats();
 
break;
case 304:

   parser.suggestKeywords(['CSV', 'TEXT', 'BCP', 'PARQUET']);
 
break;
case 305:

   parser.suggestKeywords(['WITH']);
 
break;
case 312:

     $$[$0-2].owner = 'insert';
     parser.addTablePrimary($$[$0-2]);
   
break;
case 313:

     parser.suggestKeywords(['INTO']);
   
break;
case 314:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['TABLE']);
     }
     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 316:

     $$[$0-1].owner = 'insert';
     parser.addTablePrimary($$[$0-1]);
     parser.suggestKeywords(['VALUES']);
   
break;
case 331:

    parser.suggestKeywords(['TABLE']);
  
break;
case 332:

    parser.suggestTables();
    parser.suggestDatabases({ appendDot: true });
  
break;
case 333:

    parser.suggestKeywords(['FROM', 'SOURCE FIELDS']);
  
break;
case 335: case 345:

    parser.suggestKeywords(['EXTERNAL LOCATION']);
  
break;
case 336: case 346:

    parser.suggestExternalLocations();
  
break;
case 337: case 347:

    parser.suggestKeywords(['EXTERNAL FORMAT', 'WITH']);
  
break;
case 339: case 349:

    parser.suggestExternalFormats();
  
break;
case 340: case 350:

    parser.suggestKeywords(['WITH']);
  
break;
case 343:

    parser.suggestKeywords(['FROM']);
  
break;
case 355:

    parser.suggestKeywords(['(']);
  
break;
case 364: case 537:
this.$ = $$[$0-2];
break;
case 366:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 367: case 368: case 379:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 374: case 390: case 414: case 490: case 494: case 532: case 542: case 569: case 719: case 1106: case 1108: case 1163: case 1218: case 1293:
this.$ = $$[$0];
break;
case 377:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 381:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 382:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 386:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 387: case 395:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 398:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 399: case 501:

     parser.suggestSelectListAliases();
   
break;
case 400:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 401:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 411: case 714: case 923: case 926: case 927: case 952: case 953: case 972: case 975:

     parser.suggestColumns();
   
break;
case 416: case 417: case 423: case 424: case 951: case 1177: case 1220:

     parser.valueExpressionSuggest();
   
break;
case 428:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 429:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 433:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 434:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 435:
this.$ = { joinType: $$[$0] };
break;
case 436:
this.$ = { joinType: $$[$0-1] };
break;
case 437:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 438:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 441:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 446:
this.$ = 'CROSS JOIN';
break;
case 447:
this.$ = 'FULL JOIN';
break;
case 448:
this.$ = 'FULL OUTER JOIN';
break;
case 449:
this.$ = 'INNER JOIN';
break;
case 450:
this.$ = 'JOIN';
break;
case 451:
this.$ = 'LEFT INNER JOIN';
break;
case 452:
this.$ = 'LEFT JOIN';
break;
case 453:
this.$ = 'LEFT OUTER JOIN';
break;
case 454:
this.$ = 'LEFT SEMI JOIN';
break;
case 455:
this.$ = 'OUTER JOIN';
break;
case 456: case 458:
this.$ = 'RIGHT OUTER JOIN';
break;
case 457:
this.$ = 'RIGHT JOIN';
break;
case 459:
this.$ = 'RIGHT SEMI JOIN';
break;
case 460:
this.$ = 'SEMI JOIN';
break;
case 461: case 463: case 464: case 466: case 467: case 468: case 469: case 471: case 472: case 473: case 474:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 462: case 465: case 470:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 475:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 476:
this.$ = { valueExpression: $$[$0] };
break;
case 480:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 487:

     parser.suggestKeywords([{ value: '10', weight: 10000 }, { value: '100', weight: 10000 }, { value: '1000', weight: 10000 }, { value: '5000', weight: 10000 }, { value: '10000', weight: 10000 }])
   
break;
case 491:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 492:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 496:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 497: case 498: case 499:
this.$ = { emptyOrderBy: false };
break;
case 500:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 502:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 503:
this.$ = { suggestKeywords: ['ASC', 'DESC'] };;
break;
case 506:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 507:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 508:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 509:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 510:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 511:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 512:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 513:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 514:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 515:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 519: case 520:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 521:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 522:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 523:
this.$ = [ $$[$0] ];
break;
case 524:

     $$[$0-2].push($$[$0]);
   
break;
case 526: case 527:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 529:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 530:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 531:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 533: case 534: case 536:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 538:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push($$[$0-1].function && $$[$0-1].types && $$[$0-1].types.length && $$[$0-1].types[0] === 'UDFREF' ? { name: $$[$0].alias, udfRef: $$[$0-1].function, types: $$[$0-1].types } : { name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 539:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 540:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 541:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 543:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 544:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 545:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 547:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 549:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 550:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 551:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 552:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 553:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 564:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 565:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 570:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 571:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 584:

     parser.suggestKeywords(['TABLE']);
   
break;
case 585:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 589:

     parser.addTablePrimary($$[$0-1]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 591:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 598:

     parser.suggestKeywords(['OVER']);
   
break;
case 607:

     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 608: case 626:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 609:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 610: case 624:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 611:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].activePosition);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 620:

     parser.addFunctionArgumentLocations($$[$0-3], [{
       expression: { text: $$[$0-1] },
       location: _$[$0-1]
     }]);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] }
   
break;
case 621: case 627:

     this.$ = { function: $$[$0-2], types: ['UDFREF'] }
   
break;
case 622:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] }
   
break;
case 623:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 625:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 628:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 629:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 630:

     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 631:

    this.$ = { function: $$[$0-2], types: ['UDFREF'] }
  
break;
case 632:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     this.$ = {
       function: $$[$0-3],
       expression: $$[$0-1].expressions[$$[$0-1].expressions.length - 1].expression,
       types: ['UDFREF']
     }
   
break;
case 633:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 634:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-2].expressions);
     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 635:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].activePosition);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 640:

     var expression = $$[$0-3];
     parser.extractExpressionText(expression, $$[$0-3], $$[$0-2], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-5], [{
       expression: expression,
       location: {
         first_line: _$[$0-3].first_line,
         last_line: _$[$0-1].last_line,
         first_column: _$[$0-3].first_column,
         last_column: _$[$0-1].last_column
       }
     }]);
     this.$ = { types: [ $$[$0-1].toUpperCase() ] }
   
break;
case 641: case 646: case 647: case 1112:
this.$ = { types: [ 'T' ] };
break;
case 642:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 643: case 644:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 645:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 648:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 649:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 650: case 651:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 652:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     if ($$[$0-1].lastLoc && $$[$0-1].lastLoc.location) {
       $$[$0-1].lastLoc.type = 'function';
       $$[$0-1].lastLoc.function = fn;
       $$[$0-1].lastLoc.location = {
         first_line: $$[$0-1].lastLoc.location.first_line,
         last_line: $$[$0-1].lastLoc.location.last_line,
         first_column: $$[$0-1].lastLoc.location.first_column,
         last_column: $$[$0-1].lastLoc.location.last_column - 1
       }
       if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
          $$[$0-1].firstLoc.type = 'database';
       } else {
         delete $$[$0-1].lastLoc.identifierChain;
       }
     }
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: fn, expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: fn, types: ['UDFREF'] }
     }
   
break;
case 653:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expressions && $$[$0].expressions.length) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
    } else {
      this.$ = { function: $$[$0-1], types: ['UDFREF'] }
    }
  
break;
case 656:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 657:
this.$ = { types: [ 'NULL' ], text: $$[$0] };
break;
case 658:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].activePosition);
     }
     this.$ = { function: fn, types: ['UDFREF'] };
   
break;
case 659: case 665: case 666:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].activePosition);
     }
     this.$ = { function: $$[$0-1], types: ['UDFREF'] };
   
break;
case 662:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 663: case 664:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: $$[$0-1], types: ['UDFREF'] }
     }
   
break;
case 669:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }]
     }
   
break;
case 670:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = $$[$0-3];
   
break;
case 672: case 674:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0], location: _$[$0] }]
     }
   
break;
case 673: case 675:

     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: $$[$0], location: _$[$0] }])
     }
   
break;
case 676:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0-2], location: _$[$0-2] }].concat($$[$0].expressions)
     }
   
break;
case 677:

     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: $$[$0-2], location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 678:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: { text: '' }, location: _$[$0] }])
     }
   
break;
case 679:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: { text: '' }, location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 680:

     parser.suggestValueExpressionKeywords($$[$0-3].expressions[$$[$0-3].expressions.length - 1].expression);
     this.$ = {
       activePosition: $$[$0-3].activePosition,
       expressions: $$[$0-3].expressions.concat($$[$0].expressions)
     }
   
break;
case 681:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 682:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 683:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 684:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-3] }, { expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 696:

     parser.suggestKeywords([ 'WHERE' ]);
   
break;
case 697:

     parser.suggestKeywords([ 'SET' ]);
   
break;
case 713:

     parser.suggestKeywords([ '=' ]);
   
break;
case 722:

     if (! parser.yy.cursorFound) {
       parser.yy.result.useDatabase = $$[$0];
     }
   
break;
case 723: case 942:

     parser.suggestDatabases();
   
break;
case 725: case 726:

     return parser.yy.result;
   
break;
case 727:

     parser.prepareNewStatement();
   
break;
case 729: case 731: case 733:

     parser.addStatementLocation(_$[$0]);
   
break;
case 732: case 734:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 738:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 867: case 870:
this.$ = '';
break;
case 882: case 885:

     parser.yy.correlatedSubQuery = false;
   
break;
case 883: case 887:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 886:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 897: case 899: case 900: case 902:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 931: case 955:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 932: case 956:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 934: case 939:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 935: case 958:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 936:
this.$ = [{ name: $$[$0] }];
break;
case 937:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 938:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 957:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 960:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 963:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 964: case 1129:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 966:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 967:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 968:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 969:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 970:
this.$ = [ $$[$0].identifier ];
break;
case 971:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 973:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 974:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 976:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 997: case 998:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 999: case 1024:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1000:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1001: case 1002: case 1003:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1004:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1005:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 1007: case 1008: case 1009: case 1010:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1011: case 1012: case 1013: case 1014: case 1044: case 1102: case 1103:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 1015:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1016:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1017: case 1018:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1019: case 1020: case 1021:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1022:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1023:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1025:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1027:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1028: case 1030:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 1029:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1031:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1032:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 1033:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 1034:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1035:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 1036:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1037:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1038:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1039: case 1040: case 1041:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1042:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1043:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 1045:

     this.$ = $$[$0-1];
   
break;
case 1046:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 1047:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1048: case 1049: case 1050:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1051: case 1052: case 1053: case 1054:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0]);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1055: case 1057:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1056:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 1058:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 1059: case 1060: case 1061: case 1062:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 1063:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1064:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1065: case 1066:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 1067: case 1068:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 1069:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 1070:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 1071:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1072:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1073: case 1079:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1074:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1075:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 1076:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 1077:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1078:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1080:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1081: case 1083: case 1085: case 1087:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 1082: case 1086:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1084: case 1088:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 1089: case 1090:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1091: case 1092: case 1093:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1094: case 1095: case 1096:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1097: case 1098: case 1099:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1100:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1101:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1104:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1105:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1107:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1109:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1110:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 1111:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1113: case 1115:

     $$[$0].position = 1;
   
break;
case 1114:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 1116:

     $$[$0-2].position += 1;
   
break;
case 1117:

     $$[$0-2].position = 1;
   
break;
case 1118:

     $$[$0-4].position += 1;
   
break;
case 1119:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 1120:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 1121:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 1122: case 1123:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 1124: case 1125:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 1128:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 1135:

     parser.suggestValues($$[$0]);
   
break;
case 1136:
this.$ = { types: [ 'NUMBER' ], text: $$[$0] };
break;
case 1142: case 1144: case 1145:
this.$ = $$[$0-1] + $$[$0];
break;
case 1143: case 1146:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1147:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1148:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: "'" + $$[$0] + "'" }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 1149:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: '"' + $$[$0] + '"' }
     } else {
       this.$ = { types: [ 'STRING' ], text: '"' + $$[$0] + '"' }
     }
   
break;
case 1150:
this.$ = { types: [ 'BOOLEAN' ], text: $$[$0] };
break;
case 1151:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1152:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1159:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 1166:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1167:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1168:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 1169:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 1179:

     parser.pushQueryState();
   
break;
case 1180:

     parser.popQueryState();
   
break;
case 1182:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 1185:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 1202: case 1203: case 1204: case 1205:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 1212: case 1213:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 1214:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 1215:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 1224:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 1225:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 1231:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 1232:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 1237:

    lexer.popState();
  
break;
case 1238:

    lexer.begin('hdfs');
  
break;
case 1240:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 1241:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 1242:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 1243:

     parser.suggestHdfs({ path: '' });
   
break;
case 1244:

      parser.suggestHdfs({ path: '' });
    
break;
case 1250:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 1251: case 1256:

     parser.suggestKeywords(['ROW']);
   
break;
case 1255:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 1257:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 1261:
this.$ = { inValueEdit: true };
break;
case 1262:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 1263: case 1264: case 1265:

     this.$ = { suggestKeywords: ['NOT'] }
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1269: case 1270: case 1271:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 1272:

     this.$ = parser.findCaseType($$[$0-1])
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1273:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1274:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 1275:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1276:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1277:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 1278:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1279:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 1280:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 1281:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1282:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1283:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 1284:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 1287:

     this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] }
     parser.extractExpressionText(this.$, $$[$0]);
   
break;
case 1288:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1292:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 1294:

     this.$ = $$[$0]
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1295:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 1296:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1297:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1298: case 1299:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 1300:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1301:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 1302:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1303:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 1304: case 1306:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1305:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1307:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 1308:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1309:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1310: case 1311: case 1312: case 1313:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1325:

   parser.suggestKeywords(["(name 'value')"]);
 
break;
case 1328:

   parser.suggestKeywords([',']);
 
break;
case 1330:

   parser.suggestKeywords([',', ')']);
 
break;
case 1331:

   parser.suggestKeywords(["name 'value'"]);
 
break;
}
},
table: [o($V0,$V1,{386:1,311:2}),{1:[3]},o($V2,$V3,{387:3,391:4,21:5,195:6,48:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,38:21,39:22,196:23,197:24,218:25,219:26,40:27,46:28,159:31,160:32,161:33,198:37,4:$V4,8:$V5,12:$V6,18:$V7,192:$V8,202:$V9,208:$Va,289:$Vb,319:$Vc,369:$Vd,385:$Ve}),{388:[1,43],392:[1,44]},o($V2,[2,729]),o($V2,[2,735]),o($V2,[2,736]),o($V2,[2,737]),o($V2,[2,17]),o($V2,[2,18]),o($V2,[2,19]),o($V2,[2,20]),o($V2,[2,21]),o($V2,[2,22]),o($V2,[2,23]),o($V2,[2,24]),o($V2,[2,25]),o($V2,[2,26]),o($V2,[2,27]),o($V2,[2,28]),{34:[1,45],35:46,63:47,67:$Vf,117:$Vg,276:$Vh,395:50,396:$Vi,397:$Vj},o($V2,[2,31]),o($V2,[2,32]),o($V2,[2,307]),o($V2,[2,308]),{83:[1,55],219:54,289:$Vb},o($Vk,$Vl,{220:56,306:57,308:58,310:$Vm}),{41:60,129:[1,61]},{47:[1,62]},{43:[1,65],51:[1,66],61:63,67:[1,64],162:[1,67],413:$Vn,431:$Vo},{43:[1,72],51:[1,73],61:70,67:[1,71],413:$Vn,431:$Vo},o($V2,[2,248]),o($V2,[2,249]),o($V2,[2,250]),{43:[1,74]},{43:[1,75]},{63:76,67:$Vf,117:$Vg,276:$Vh,395:50,396:$Vi,397:$Vj},o($V2,[2,309]),{63:82,67:$Vf,117:$Vg,123:81,276:$Vh,370:77,376:78,378:79,395:50,396:$Vi,397:$Vj,473:80},{63:82,67:$Vf,117:$Vg,123:85,224:83,226:84,276:$Vh,395:50,396:$Vi,397:$Vj},o([58,59,67,83,99,100,111,116,117,276,301,315,317,318,319,342,343,344,345,346,347,348,349,350,351,352,354,355,396,397,399,400,403,410,418,437,438],$Vp,{290:86,34:$Vq,295:$Vr}),{43:[1,89],51:[1,90]},{203:[1,91]},{1:[2,724]},o($V0,$V1,{311:92}),o($V2,[2,29]),{36:[1,93],315:[1,94]},o($Vs,[2,574]),o($Vt,[2,747]),o($Vt,[2,748]),o($Vt,[2,749]),o($Vt,[2,744]),o($Vt,[2,745]),o($Vt,[2,746]),o($Vk,$Vl,{306:57,308:58,220:95,310:$Vm}),{48:96,192:$V8,218:25,219:26,289:$Vb},o($Vk,[2,365]),o($Vk,[2,555],{308:97,310:$Vm}),o($Vu,[2,557]),o([34,289,295],$V1,{311:98}),o($V2,[2,33]),{83:[1,99]},{48:100,192:$V8,218:25,219:26,289:$Vb},o($Vv,$Vw,{62:101,354:$Vx}),{63:103,67:$Vf,117:$Vg,276:$Vh,395:50,396:$Vi,397:$Vj},o($Vy,$Vw,{62:104,354:$Vx}),o($Vy,$Vw,{62:105,354:$Vx}),{166:[1,106],183:[1,107],188:[1,108]},o($Vz,[2,864]),o($Vz,[2,865]),o($Vy,$VA,{154:109,354:$VB}),{63:111,67:$Vf,117:$Vg,276:$Vh,395:50,396:$Vi,397:$Vj},o($Vy,$VA,{154:112,354:$VB}),o($Vy,$VA,{154:113,354:$VB}),{44:114,63:82,67:$Vf,117:$Vg,123:115,276:$Vh,395:50,396:$Vi,397:$Vj},o($Vy,$VA,{154:116,354:$VB}),o($V2,[2,722]),{18:[1,117]},{18:[2,701]},{18:[2,703]},{18:[2,959],63:82,67:$Vf,117:$Vg,123:118,276:$Vh,395:50,396:$Vi,397:$Vj},o($VC,[2,955],{315:[1,119]}),o([18,36,47,54,58,59,67,81,83,85,89,99,111,112,113,116,117,124,129,133,144,146,158,162,169,186,192,213,215,238,249,262,263,264,265,266,267,268,269,270,274,276,280,287,288,301,310,312,315,388,392,396,397,400,404,405,407,408,409,411,414,415,416,417,419,422,423,424,425,427,428,430,432,433,434,435,436,439,440,451,485],[2,954]),o([83,289],[2,374],{89:[1,120]}),o($VD,[2,376]),{47:[1,121]},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:124,176:162,275:154,276:$Vh,291:122,298:123,301:$VL,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($V81,[2,517]),o($V81,[2,518]),{44:180,63:82,67:$Vf,117:$Vg,123:115,276:$Vh,395:50,396:$Vi,397:$Vj},{44:181,63:82,67:$Vf,117:$Vg,123:115,276:$Vh,395:50,396:$Vi,397:$Vj},o($Vy,[2,321],{204:182,43:[1,183]}),o($V2,$V3,{391:4,21:5,195:6,48:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,38:21,39:22,196:23,197:24,218:25,219:26,40:27,46:28,159:31,160:32,161:33,198:37,387:184,4:$V4,8:$V5,12:$V6,18:$V7,192:$V8,202:$V9,208:$Va,289:$Vb,319:$Vc,369:$Vd,385:$Ve}),{37:185,55:188,58:$VE,59:$VF,63:186,67:$Vf,100:[1,191],117:$Vg,176:195,275:192,276:$Vh,315:$VM,316:187,317:[1,189],318:[1,190],395:50,396:$Vi,397:$Vj,400:[1,193],437:$V61,438:$V71,444:196,494:[1,194],499:160,500:161},{63:197,67:$Vf,117:$Vg,276:$Vh,395:50,396:$Vi,397:$Vj},o($Vk,[2,363]),{85:[1,198]},o($Vu,[2,558]),{34:$Vq,289:$Vp,290:199,295:$Vr},{63:82,67:$Vf,91:202,117:$Vg,123:156,276:$Vh,395:50,396:$Vi,397:$Vj,455:200,471:201},o($V2,[2,41]),o($V2,[2,58],{395:50,63:203,67:$Vf,117:$Vg,276:$Vh,396:$Vi,397:$Vj}),{99:[1,204]},o($V2,[2,67]),{63:82,67:$Vf,68:205,70:206,76:207,117:$Vg,123:208,276:$Vh,395:50,396:$Vi,397:$Vj},{63:82,67:$Vf,76:209,117:$Vg,123:208,276:$Vh,395:50,396:$Vi,397:$Vj},o($Vy,$Vw,{62:210,354:$Vx}),o($Vy,$Vw,{62:211,354:$Vx}),o($Vy,$Vw,{62:212,354:$Vx}),{63:82,67:$Vf,117:$Vg,123:213,276:$Vh,395:50,396:$Vi,397:$Vj},{418:[1,214]},o($V2,[2,233]),{44:215,63:82,67:$Vf,117:$Vg,123:115,276:$Vh,395:50,396:$Vi,397:$Vj},{44:216,63:82,67:$Vf,117:$Vg,123:115,276:$Vh,395:50,396:$Vi,397:$Vj},{209:217,210:218,213:[1,220],215:$V91},o($Va1,[2,931],{315:[1,221]}),{44:222,63:82,67:$Vf,117:$Vg,123:115,276:$Vh,395:50,396:$Vi,397:$Vj},{63:82,67:$Vf,91:148,117:$Vg,123:156,153:226,276:$Vh,371:223,380:224,382:225,395:50,396:$Vi,397:$Vj,475:227},{18:[2,960]},{63:82,67:$Vf,117:$Vg,123:228,276:$Vh,395:50,396:$Vi,397:$Vj},{63:82,67:$Vf,117:$Vg,123:85,226:229,276:$Vh,395:50,396:$Vi,397:$Vj},{83:[1,230]},o($Vu,[2,506],{292:231,230:233,89:[1,232],215:[1,234]}),o($Vb1,[2,523]),o($Vb1,$Vc1,{395:50,63:82,176:195,444:196,300:235,486:249,123:250,55:251,36:$Vd1,47:$Ve1,58:$VE,59:$VF,67:$Vf,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,117:$Vg,146:$Vj1,276:$Vh,301:$Vk1,396:$Vi,397:$Vj,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),o($Vb1,[2,539]),o($Vu1,[2,996]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:256,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:257,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:258,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:259,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{83:$Vv1,483:260},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:262,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:264,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,440:$Vw1,444:163,475:139,487:263,495:147,497:155,499:160,500:161,501:164,549:265,551:266},o($Vu1,[2,656],{358:268,83:$Vx1}),{83:$Vx1,358:270},o($Vu1,[2,654]),o($Vu1,[2,655]),o($Vu1,[2,657]),o($Vy1,[2,1128],{315:[1,271]}),{83:[2,636]},{83:[2,637]},{83:[2,638]},{83:[2,639]},o($Vu1,[2,685],{323:272,325:273,366:$Vz1}),{325:275,366:$Vz1},o($Vu1,[2,593]),o($Vu1,[2,1134]),o($VA1,[2,966]),o($VB1,[2,601]),o($VB1,[2,602]),o($VB1,[2,603]),{83:[1,276]},{83:[1,277]},o($Vu1,[2,1136]),o($Vu1,[2,1137]),o([36,47,54,58,59,67,81,83,85,89,99,111,112,113,116,117,133,146,215,238,249,262,263,264,265,266,267,268,269,274,276,280,287,288,301,310,312,315,388,392,396,397,400,404,405,407,408,409,411,414,415,416,417,419,422,423,424,425,427,428,430,432,433,434,435,436,439,440,485],[2,976]),{83:[1,278]},{83:[1,279]},{83:[1,280]},o($Vu1,[2,1139]),o($Vu1,[2,1140]),o($Vu1,[2,1148]),o($Vu1,[2,1149]),o($Vu1,[2,1150]),{83:[2,612]},{83:[2,613]},{83:[2,614]},{83:[2,615]},{83:[2,616]},{83:[2,617]},{83:[2,618]},{83:[2,619]},o($Vu1,[2,1141],{315:[1,281]}),{437:[1,282],438:[1,283]},{437:[1,284]},{58:[1,286],60:[1,285]},{59:[1,288],60:[1,287]},o($Vu1,[2,1153]),o($Vu1,[2,1154]),{129:[2,38]},{47:[2,47]},{44:289,63:82,67:$Vf,117:$Vg,123:115,276:$Vh,395:50,396:$Vi,397:$Vj},o($Vy,[2,322]),o($V2,[2,730]),o($V2,[2,30]),o($V2,[2,576]),o($V2,[2,577],{395:50,63:290,67:$Vf,117:$Vg,276:$Vh,396:$Vi,397:$Vj}),o($V2,[2,579]),o($V2,[2,580]),o($V2,[2,581]),o($V2,[2,582]),o($Vv,[2,1131]),{275:291,315:$VM,437:$V61,438:$V71,499:160,500:161},{275:292,315:$VM,437:$V61,438:$V71,499:160,500:161},o($VC1,[2,872]),o($VC1,[2,873]),o($Vs,[2,575]),o($Vk,$Vl,{306:57,308:58,220:293,310:$Vm}),{219:294,289:$Vb},{85:[1,295],89:[1,296]},o($VD1,[2,943]),{36:[1,297]},o($V2,$VE1,{64:298,52:299,53:300,54:$VF1}),{418:[1,302]},o($V2,[2,68]),o($VG1,[2,164],{71:303,128:304,129:[1,305]}),o($VH1,[2,80],{77:306,80:307,81:[1,308],83:$VI1}),o($VJ1,[2,936],{315:[1,310]}),o($VK1,[2,216],{148:311,150:312,83:[1,313]}),{63:82,67:$Vf,76:315,117:$Vg,123:208,167:314,276:$Vh,395:50,396:$Vi,397:$Vj},{63:82,67:$Vf,76:317,117:$Vg,123:208,184:316,276:$Vh,395:50,396:$Vi,397:$Vj},{63:82,67:$Vf,76:319,117:$Vg,123:208,189:318,276:$Vh,395:50,396:$Vi,397:$Vj},o($V2,[2,879],{155:320,451:[1,321]}),o($Vy,[2,882]),o($V2,[2,240],{157:322,158:[1,323]}),o($V2,[2,242]),{162:[1,324]},{209:325,215:$V91},{83:[1,326]},{214:[1,327]},{63:82,67:$Vf,117:$Vg,123:328,276:$Vh,395:50,396:$Vi,397:$Vj},o($V2,[2,583]),o($VL1,[2,718],{372:329,89:[1,330],215:[1,331]}),o($VM1,[2,705]),{36:[1,332]},{36:[2,715]},o($VN1,[2,963],{315:[1,333]}),o($VC,[2,956]),o($VD,[2,377]),o($VO1,$VP1,{228:334,512:335}),o($Vu,[2,507]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:124,176:162,275:154,276:$Vh,298:336,301:$VL,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($VQ1,$VR1,{296:337,303:338,305:339,312:$VS1}),{44:348,63:82,67:$Vf,83:$Vv1,117:$Vg,123:115,231:341,234:342,255:344,276:$Vh,395:50,396:$Vi,397:$Vj,483:349,502:343,504:345,506:346,507:347},o($Vb1,[2,538]),o($VT1,[2,1155],{482:350,99:[1,351]}),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:352,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:353,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:354,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:355,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{81:$Vf1,407:[1,357],422:[1,356],427:$Vs1,428:$Vt1,486:358},{83:[1,359]},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:360,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:361,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:362,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:363,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:364,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:365,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($Vu1,[2,1022]),o($VU1,[2,1202]),o($VU1,[2,1203]),{55:367,58:$VE,59:$VF,63:82,67:$Vf,117:$Vg,123:366,176:195,276:$Vh,395:50,396:$Vi,397:$Vj,444:196},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:368,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:369,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:370,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($VV1,[2,997],{486:249,36:$Vd1,81:$Vf1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,405:$Vn1,422:$Vp1,424:$Vq1,427:$Vs1,428:$Vt1}),o($VV1,[2,998],{486:249,36:$Vd1,81:$Vf1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,405:$Vn1,422:$Vp1,424:$Vq1,427:$Vs1,428:$Vt1}),o($VV1,[2,999],{486:249,36:$Vd1,81:$Vf1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,405:$Vn1,422:$Vp1,424:$Vq1,427:$Vs1,428:$Vt1}),o($VW1,[2,1000],{486:249}),o($Vu1,[2,1005]),o($VO1,$VP1,{512:335,483:349,228:371,507:372,83:$Vv1}),{36:$Vd1,81:$Vf1,85:[1,373],99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1,486:249},o($Vu1,[2,1024]),{36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1,440:$Vw1,486:249,487:374,549:265,551:266},{416:[1,376],417:[1,375],440:$Vw1,551:377},o($VX1,[2,1287]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:378,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($Vu1,[2,652]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,85:[1,379],91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:381,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,340:380,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($Vu1,[2,653]),{63:82,67:$Vf,91:383,117:$Vg,123:156,276:$Vh,301:[1,382],395:50,396:$Vi,397:$Vj},o($Vu1,[2,591]),o($Vu1,[2,686]),{63:82,67:$Vf,83:[1,386],117:$Vg,123:384,276:$Vh,367:385,395:50,396:$Vi,397:$Vj},o($Vu1,[2,592]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,85:[1,387],91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:381,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,340:388,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,85:[1,390],91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:389,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o([58,59,67,83,85,99,100,111,116,117,276,315,317,318,319,342,343,344,345,346,347,348,349,350,351,352,354,355,396,397,399,400,403,410,418,437,438],$Vp,{290:391,34:$Vq,295:$Vr}),o($VY1,$Vp,{290:394,34:$Vq,85:[1,393],295:$Vr,301:[1,392]}),o($VY1,$Vp,{290:395,34:$Vq,85:[1,396],295:$Vr}),o($Vu1,[2,1142],{437:[1,397],438:[1,398]}),o($Vu1,[2,1144]),{437:[1,399]},o($Vu1,[2,1145]),{58:[1,400]},o($VZ1,[2,867]),{59:[1,401]},o($V_1,[2,870]),{144:[1,402]},o($V2,[2,578]),o($Vv,[2,1132]),o($Vv,[2,1133]),o($Vk,[2,364]),o($Vu,[2,563]),o($V2,[2,894]),{63:82,67:$Vf,91:202,117:$Vg,123:156,276:$Vh,395:50,396:$Vi,397:$Vj,471:403},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:404,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($V2,[2,59]),o($V2,[2,65]),o([47,85,89,113,388,392],[2,51]),{55:405,58:$VE,59:$VF,176:195,444:196},o($Vv,[2,885]),o($V2,[2,202],{72:406,47:[1,407]}),o($VG1,[2,165]),{130:[1,408]},o($VH1,[2,77]),o($VH1,[2,81]),{44:409,63:82,67:$Vf,117:$Vg,123:115,276:$Vh,395:50,396:$Vi,397:$Vj},{63:82,67:$Vf,84:410,88:411,91:412,117:$Vg,123:156,276:$Vh,395:50,396:$Vi,397:$Vj},{63:82,67:$Vf,117:$Vg,123:413,276:$Vh,395:50,396:$Vi,397:$Vj},{47:$VE1,52:414,53:300,54:$VF1},o($VK1,[2,217]),{63:82,67:$Vf,91:148,117:$Vg,123:156,151:415,153:416,276:$Vh,395:50,396:$Vi,397:$Vj,475:227},o($V2,[2,255]),{169:[1,417]},o($V2,[2,281]),{186:[1,418]},o($V2,[2,296]),{169:[1,419]},o($V2,[2,226]),o($V2,[2,880]),o($V2,[2,234]),o($V2,[2,241]),{183:[1,420]},{162:[1,421]},{58:$VE,176:423,216:422},{80:424,83:$VI1},o($Va1,[2,932]),o($V2,$VR1,{305:339,303:425,312:$VS1}),{63:82,67:$Vf,91:148,117:$Vg,123:156,153:226,276:$Vh,380:426,382:225,395:50,396:$Vi,397:$Vj,475:227},{44:348,63:82,67:$Vf,83:$Vv1,117:$Vg,123:115,234:427,255:344,276:$Vh,395:50,396:$Vi,397:$Vj,483:349,502:343,504:345,506:346,507:347},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:429,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,383:428,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{63:82,67:$Vf,91:383,117:$Vg,123:156,276:$Vh,301:[1,430],395:50,396:$Vi,397:$Vj},{85:[1,431]},{48:439,192:$V8,218:25,219:26,289:$Vb,514:432,516:433,518:434,520:435,522:436,524:437,526:438},o($Vb1,[2,524]),o($Vu,[2,519]),o($V$1,[2,396],{236:440,237:441,238:[1,442]}),o($VQ1,[2,568]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:444,176:162,275:154,276:$Vh,313:443,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o([85,238,249,274,280,310,312,388,392],[2,386],{89:[1,445]}),o($V02,[2,389]),o($V02,[2,1157]),o($V02,[2,1159],{252:446,254:447,262:$V12,263:$V22,264:$V32,265:$V42,266:$V52,267:$V62,268:$V72,269:$V82}),o($V02,[2,1160]),o($V92,$Vc1,{395:50,63:82,176:195,444:196,123:250,55:251,300:456,47:$Ve1,58:$VE,59:$VF,67:$Vf,117:$Vg,276:$Vh,396:$Vi,397:$Vj}),o($V92,$Vc1,{395:50,63:82,176:195,444:196,123:250,55:251,300:457,47:$Ve1,58:$VE,59:$VF,67:$Vf,117:$Vg,276:$Vh,396:$Vi,397:$Vj}),o($Va2,[2,1171]),o($Va2,[2,1173]),{100:[1,458],295:[1,461],317:[1,459],318:[1,460]},o($VT1,[2,1156]),o($Vb2,[2,1007],{486:249,81:$Vf1,301:$Vk1,400:$Vl1,405:$Vn1,422:$Vp1,424:$Vq1,427:$Vs1,428:$Vt1}),o($Vb2,[2,1008],{486:249,81:$Vf1,301:$Vk1,400:$Vl1,405:$Vn1,422:$Vp1,424:$Vq1,427:$Vs1,428:$Vt1}),o($Vb2,[2,1009],{486:249,81:$Vf1,301:$Vk1,400:$Vl1,405:$Vn1,422:$Vp1,424:$Vq1,427:$Vs1,428:$Vt1}),o($Vb2,[2,1010],{486:249,81:$Vf1,301:$Vk1,400:$Vl1,405:$Vn1,422:$Vp1,424:$Vq1,427:$Vs1,428:$Vt1}),{83:[1,462]},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:463,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($Vu1,[2,1023]),o($VO1,$VP1,{395:50,63:82,356:126,357:134,353:135,321:136,359:137,475:139,322:144,324:145,326:146,495:147,91:148,333:149,334:150,335:151,275:154,497:155,123:156,339:157,499:160,500:161,176:162,444:163,501:164,512:335,228:464,484:465,142:466,58:$VE,59:$VF,67:$Vf,83:$VG,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,354:$V$,355:$V01,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71}),{36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1,485:[1,467],486:249},o($Vc2,[2,1017],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,427:$Vs1,428:$Vt1}),o($Vc2,[2,1018],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,427:$Vs1,428:$Vt1}),o($VW1,[2,1019],{486:249,81:$Vf1,422:$Vp1,424:$Vq1,427:$Vs1,428:$Vt1}),o($VW1,[2,1020],{486:249,81:$Vf1,422:$Vp1,424:$Vq1,427:$Vs1,428:$Vt1}),o($VW1,[2,1021],{486:249,81:$Vf1,422:$Vp1,424:$Vq1,427:$Vs1,428:$Vt1}),o($VU1,[2,1204]),o($VU1,[2,1205]),o($VW1,[2,1263],{486:249}),o($VW1,[2,1264],{486:249}),o($VW1,[2,1265],{486:249}),{85:[1,468]},{47:$Ve1,55:251,58:$VE,59:$VF,63:82,67:$Vf,85:$Vc1,117:$Vg,123:250,176:195,276:$Vh,300:469,395:50,396:$Vi,397:$Vj,444:196},o($Vu1,[2,1006]),o($Vu1,[2,1025]),o($Vu1,[2,1272]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:470,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($VX1,[2,1288]),{36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1,434:[1,471],486:249},o($Vu1,[2,667]),{85:[1,472],89:$Vd2},o($VD1,[2,672],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),o($Vy1,[2,1129]),o($VA1,[2,967]),o($Vu1,[2,688]),o($Vu1,[2,689]),o($Ve2,[2,1216],{528:474,532:475,129:[1,476]}),{366:[2,631]},{85:[1,477],89:$Vd2},{36:$Vd1,47:[1,478],81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1,486:249},o($Vu1,[2,641]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,85:[1,479],91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:381,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,340:480,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{85:[1,481]},o($VB1,[2,621]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:381,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,340:482,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:483,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($VB1,[2,627]),o($Vu1,[2,1143]),{437:[1,484]},o($Vu1,[2,1146]),o($VZ1,[2,866]),o($V_1,[2,869]),{83:$Vf2,205:485,206:486},o($VD1,[2,944]),o($VD1,[2,949],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),o([47,54,85,89,99,100,113,388,392],[2,52]),o($V2,[2,72]),o($VO1,[2,206],{147:488}),{131:489,133:[1,490]},o($VH1,[2,82]),{85:[1,491],89:[1,492]},o($VD1,[2,88]),{92:493,101:494,102:495,103:496,104:497,105:498,106:499,107:500,111:$Vg2,116:$Vh2,117:$Vi2,408:$Vj2,409:$Vk2,411:$Vl2,414:$Vm2,415:$Vn2,419:$Vo2,423:$Vp2,432:$Vq2,433:$Vr2,435:$Vs2,436:$Vt2,439:$Vu2},o($VJ1,[2,937]),{47:[1,516]},{85:[1,517],89:[1,518]},o($VD1,$VE1,{53:300,52:519,54:$VF1}),{63:521,67:$Vf,117:$Vg,170:520,276:$Vh,395:50,396:$Vi,397:$Vj},{58:$VE,176:523,187:522},{63:525,67:$Vf,117:$Vg,191:524,276:$Vh,395:50,396:$Vi,397:$Vj},{63:82,67:$Vf,76:526,117:$Vg,123:208,276:$Vh,395:50,396:$Vi,397:$Vj},{183:[1,527]},{85:[1,528],89:[1,529]},o($VD1,[2,357]),{215:[2,352]},o($V2,[2,691]),o($VM1,[2,706]),o($VL1,[2,719]),o($VM1,[2,711]),o($VM1,[2,716],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),o($VN1,[2,964]),o($VD,[2,382]),{85:[2,1185]},{85:[2,1187]},{85:[2,1189]},{85:[2,1191]},{85:[2,1193]},{85:[2,1195]},{85:[2,1197]},{85:[2,1199]},o($Vv2,[2,425],{247:530,248:531,249:[1,532]}),o($V$1,[2,397]),{130:[1,533]},o($VQ1,[2,569]),o($VQ1,[2,572],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),{44:348,63:82,67:$Vf,83:$Vv1,117:$Vg,123:115,234:534,255:344,276:$Vh,395:50,396:$Vi,397:$Vj,483:349,502:343,504:345,506:346,507:347},o($V02,[2,1163],{254:535,262:$V12,263:$V22,264:$V32,265:$V42,266:$V52,267:$V62,268:$V72,269:$V82}),{44:348,63:82,67:$Vf,83:$Vv1,117:$Vg,123:115,255:536,276:$Vh,395:50,396:$Vi,397:$Vj,483:349,506:346,507:347},{263:[1,537]},{263:[1,538],265:[1,539]},{263:[1,540]},o($Vw2,[2,450]),{263:[1,542],265:[1,543],266:[1,541],268:[1,544]},{263:[1,545]},{263:[1,547],265:[1,548],266:[1,546],268:[1,549]},{263:[1,550]},o($V92,[2,1166]),o($V92,[2,1167]),o($Vu1,[2,1001]),o($Vu1,[2,1002]),o($Vu1,[2,1003]),{215:[1,551]},o($VO1,$VP1,{395:50,63:82,356:126,357:134,353:135,321:136,359:137,475:139,322:144,324:145,326:146,495:147,91:148,333:149,334:150,335:151,275:154,497:155,123:156,339:157,499:160,500:161,176:162,444:163,501:164,512:335,142:466,228:552,484:553,58:$VE,59:$VF,67:$Vf,83:$VG,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,354:$V$,355:$V01,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71}),{36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1,485:[1,554],486:249},{85:[1,555]},{85:[1,556],89:$Vx2},o($Vy2,[2,1113],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:558,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($Vz2,[2,1181]),{85:[1,559]},{36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,417:[1,560],422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1,486:249},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:561,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($Vu1,[2,668]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:562,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{85:[2,1222],279:564,280:$VA2,529:563},o($Ve2,[2,1217]),{130:[1,566]},{366:[2,632]},{101:567,408:$Vj2,409:$Vk2,411:$Vl2,414:$Vm2,415:$Vn2,419:$Vo2,423:$Vp2,432:$Vq2,433:$Vr2,435:$Vs2,436:$Vt2,439:$Vu2},o($VB1,[2,607]),{85:[1,568],89:$Vd2},o($VB1,[2,620]),{85:[1,569],89:$Vd2},{36:$Vd1,81:$Vf1,85:[1,570],99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1,486:249},o($Vu1,[2,1147]),o($V2,[2,312],{89:[1,571]}),o($VB2,[2,318]),{58:$VE,59:$VF,63:82,67:$Vf,91:148,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,176:162,207:572,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:573,357:134,359:137,395:50,396:$Vi,397:$Vj,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{48:574,192:$V8,218:25,219:26,289:$Vb},o($VG1,[2,166]),{83:[1,576],134:575},o([47,129,215,388,392],[2,86]),{63:82,67:$Vf,88:577,91:412,117:$Vg,123:156,276:$Vh,395:50,396:$Vi,397:$Vj},o($VD1,[2,102],{93:578,96:579,97:580,53:583,54:$VF1,99:$VC2,100:$VD2}),o($VE2,[2,114]),o($VE2,[2,115]),o($VE2,[2,116]),o($VE2,[2,117]),o($VE2,[2,118]),o($VE2,[2,119]),o($VE2,[2,120]),o($VE2,[2,979]),o($VE2,[2,980]),o($VE2,$VF2,{480:584,83:$VG2}),o($VE2,[2,993],{481:586,83:[1,587]}),o($VE2,[2,983]),o($VE2,[2,984]),o($VE2,[2,985]),o($VE2,[2,986]),o($VE2,[2,987]),o($VE2,[2,988]),o($VE2,[2,989]),o($VE2,$VF2,{480:588,83:$VG2}),{112:[1,589]},{112:[1,590]},{112:[1,591]},{48:592,192:$V8,218:25,219:26,289:$Vb},o($VK1,[2,218]),{63:82,67:$Vf,91:148,117:$Vg,123:156,153:593,276:$Vh,395:50,396:$Vi,397:$Vj,475:227},o($VD1,[2,220]),{171:[1,594]},{171:[2,262]},{162:[1,595]},{162:[2,288]},{192:[1,596]},{192:[2,302]},o($V2,[2,323],{162:[1,598],192:[1,597]}),{63:82,67:$Vf,76:599,117:$Vg,123:208,276:$Vh,395:50,396:$Vi,397:$Vj},{162:[2,354]},{58:$VE,176:600},o($VH2,[2,488],{278:601,279:602,280:$VA2}),o($Vv2,[2,426]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:603,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:605,176:162,239:604,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($V02,[2,390]),{44:348,63:82,67:$Vf,83:$Vv1,117:$Vg,123:115,255:606,276:$Vh,395:50,396:$Vi,397:$Vj,483:349,506:346,507:347},o($VI2,$VJ2,{256:607,270:$VK2}),o($Vw2,[2,446]),o($Vw2,[2,447]),{263:[1,609]},o($Vw2,[2,449]),{263:[1,610]},o($Vw2,[2,452]),{263:[1,611]},{263:[1,612]},o($Vw2,[2,455]),{263:[1,613]},o($Vw2,[2,457]),{263:[1,614]},{263:[1,615]},o($Vw2,[2,460]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:616,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{85:[1,617]},{85:[1,618],89:$Vx2},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:619,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($Vu1,[2,1013]),o($Vu1,[2,1014]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:620,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o([47,58,59,67,85,89,117,133,215,238,249,262,263,264,265,266,267,268,269,274,276,280,287,288,310,312,388,392,396,397,404,407,416,417,425,430,434,440,485],[2,1016],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,405:$Vn1,422:$Vp1,424:$Vq1,427:$Vs1,428:$Vt1}),o($Vz2,[2,1182]),o($Vu1,[2,1273]),o($VX1,[2,1294],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),o($VD1,[2,673],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),{85:[1,621]},{85:[2,1227],133:[1,626],430:[1,625],533:622,535:623,536:624},{130:[1,627]},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:466,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,484:628,495:147,497:155,499:160,500:161,501:164},{85:[1,629]},o($VB1,[2,608]),o($VB1,[2,622]),o($VB1,[2,626]),{83:$Vf2,206:630},{85:[1,631],89:[1,632]},o($VD1,[2,1126]),o($V2,[2,203]),{83:[1,634],135:633},{63:82,67:$Vf,91:636,117:$Vg,123:156,276:$Vh,395:50,396:$Vi,397:$Vj,467:635},o($VD1,[2,89]),o($VD1,[2,98]),o($VD1,[2,103],{53:583,97:637,54:$VF1,99:$VC2,100:$VD2}),o($VL2,[2,104]),{100:[1,638]},o($VL2,[2,111]),o($VL2,[2,112]),o($VE2,[2,981]),{437:[1,639]},o($VE2,[2,982]),{437:[1,640]},o($VE2,[2,990]),{92:641,101:494,102:495,103:496,104:497,105:498,106:499,107:500,111:$Vg2,113:[1,642],116:$Vh2,117:$Vi2,408:$Vj2,409:$Vk2,411:$Vl2,414:$Vm2,415:$Vn2,419:$Vo2,423:$Vp2,432:$Vq2,433:$Vr2,435:$Vs2,436:$Vt2,439:$Vu2},{101:643,113:[1,644],408:$Vj2,409:$Vk2,411:$Vl2,414:$Vm2,415:$Vn2,419:$Vo2,423:$Vp2,432:$Vq2,433:$Vr2,435:$Vs2,436:$Vt2,439:$Vu2},{63:82,67:$Vf,113:[1,646],117:$Vg,118:645,120:647,123:648,276:$Vh,395:50,396:$Vi,397:$Vj},o($V2,[2,207]),o($VD1,$VE1,{53:300,52:649,54:$VF1}),{58:$VE,172:650,176:651},{166:[1,652]},{83:$VM2,193:653,553:654},{83:$VM2,193:656,553:654},{188:[1,657]},o($V2,[2,327],{162:[1,659],192:[1,658]}),o($VD1,[2,358]),o($Vu,[2,481],{272:660,273:661,274:[1,662]}),o($VH2,[2,489]),o($Vv2,[2,427],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),o($V$1,[2,398],{89:[1,663]}),o($VN2,[2,413],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),o($VI2,$VJ2,{256:664,270:$VK2}),o($VI2,[2,433]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:665,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($Vw2,[2,448]),o($Vw2,[2,451]),o($Vw2,[2,453]),o($Vw2,[2,454]),o($Vw2,[2,456]),o($Vw2,[2,458]),o($Vw2,[2,459]),o($VW1,[2,1004],{486:249}),o($Vu1,[2,1011]),o($Vu1,[2,1012]),o($VV1,[2,1015],{486:249,36:$Vd1,81:$Vf1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,405:$Vn1,422:$Vp1,424:$Vq1,427:$Vs1,428:$Vt1}),o($Vy2,[2,1114],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),o($Vu1,[2,1211]),{85:[2,1223]},{85:[2,1228]},{407:[1,666],540:[1,667]},o($VO2,[2,1245]),o($VO2,[2,1246]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:670,176:162,275:154,276:$Vh,281:668,284:669,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($Ve2,[2,1218],{89:$Vx2}),o($Vu1,[2,640]),o($VB2,[2,319]),o($VB2,[2,320]),{58:$VE,59:$VF,63:82,67:$Vf,91:148,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:671,357:134,359:137,395:50,396:$Vi,397:$Vj,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($VG1,[2,170]),{129:$VP2,138:672,140:673},{85:[1,675],89:[1,676]},o($VD1,[2,924]),o($VL2,[2,105]),o($VL2,[2,110]),{85:[1,677]},{85:[1,678],89:[1,679]},{113:[1,680]},o($VE2,[2,125]),{89:[1,681]},o($VE2,[2,129]),{89:[1,683],113:[1,682]},o($VE2,[2,135]),o($VQ2,[2,137]),{124:[1,684]},o($VD1,[2,221]),{173:[1,685]},{173:[2,263]},{63:82,67:$Vf,76:686,117:$Vg,123:208,276:$Vh,395:50,396:$Vi,397:$Vj},o($V2,[2,301]),o($V2,[2,1314]),{63:689,67:$Vf,117:$Vg,276:$Vh,395:50,396:$Vi,397:$Vj,554:687,555:688},o($V2,[2,324]),{63:82,67:$Vf,76:690,117:$Vg,123:208,276:$Vh,395:50,396:$Vi,397:$Vj},{83:$VM2,193:691,553:654},{188:[1,692]},o($Vu,[2,543]),o($Vu,[2,482]),{275:693,276:[1,694],315:$VM,437:$V61,438:$V71,499:160,500:161},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:695,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($VI2,[2,434]),o($VI2,[2,476],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),o($VR2,$VS2,{537:696}),o($VR2,$VS2,{537:697}),o([85,133,274,310,388,392,430],[2,490],{89:[1,698]}),o($VT2,[2,493]),o($VT2,[2,503],{486:249,286:699,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,287:[1,700],288:[1,701],301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),o($VD1,[2,1127]),{85:[1,702],89:[1,703]},o($VD1,[2,179]),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:704,144:[1,705],176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{83:[2,921]},{63:82,67:$Vf,91:706,117:$Vg,123:156,276:$Vh,395:50,396:$Vi,397:$Vj},o($VE2,[2,992]),o($VE2,[2,994]),{437:[1,707]},o($VE2,[2,124]),{92:708,101:494,102:495,103:496,104:497,105:498,106:499,107:500,111:$Vg2,116:$Vh2,117:$Vi2,408:$Vj2,409:$Vk2,411:$Vl2,414:$Vm2,415:$Vn2,419:$Vo2,423:$Vp2,432:$Vq2,433:$Vr2,435:$Vs2,436:$Vt2,439:$Vu2},o($VE2,[2,134]),{63:82,67:$Vf,117:$Vg,120:709,123:648,276:$Vh,395:50,396:$Vi,397:$Vj},{92:710,101:494,102:495,103:496,104:497,105:498,106:499,107:500,111:$Vg2,116:$Vh2,117:$Vi2,408:$Vj2,409:$Vk2,411:$Vl2,414:$Vm2,415:$Vn2,419:$Vo2,423:$Vp2,432:$Vq2,433:$Vr2,435:$Vs2,436:$Vt2,439:$Vu2},{58:$VE,174:711,176:712},o($V2,[2,286],{162:[1,713]}),{85:[1,714],89:[1,715]},o($VD1,[2,1316]),{58:$VE,176:721,270:[1,719],317:[1,717],318:[1,718],556:716,557:[1,720]},o($V2,[2,325],{192:[1,722]}),o($V2,[2,328]),{63:82,67:$Vf,76:723,117:$Vg,123:208,276:$Vh,395:50,396:$Vi,397:$Vj},o($Vu,[2,483],{89:[1,724]}),o($Vu,[2,485],{89:[1,725]}),o($VN2,[2,414],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),o($VU2,$VV2,{538:726,548:727,412:$VW2,437:$VX2,540:$VY2}),o($VU2,$VV2,{548:727,538:731,412:$VW2,437:$VX2,540:$VY2}),{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:670,176:162,275:154,276:$Vh,284:732,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($VT2,[2,500]),o($VT2,[2,504]),o($VT2,[2,505]),o($VG1,[2,176]),{129:$VP2,140:733},{36:$Vd1,81:$Vf1,99:$Vg1,112:[1,735],113:$Vi1,143:734,146:[1,736],301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1,486:249},{112:$VZ2,143:737,146:$V_2},o($VD1,[2,925]),{85:[1,740]},{113:[1,741]},o($VQ2,[2,138]),o($VQ2,$VE1,{53:300,52:742,54:$VF1}),o($V2,[2,260],{175:743,180:[1,744]}),o([180,388,392],[2,265]),{188:[1,745]},o($V2,[2,1315]),{63:689,67:$Vf,117:$Vg,276:$Vh,395:50,396:$Vi,397:$Vj,555:746},o($VD1,[2,1318]),o($VD1,[2,1319]),o($VD1,[2,1320]),o($VD1,[2,1321]),o($VD1,[2,1322]),o($VD1,[2,1323]),{83:$VM2,193:747,553:654},o($V2,[2,329],{192:[1,748]}),{275:749,315:$VM,437:$V61,438:$V71,499:160,500:161},{276:[1,750]},{85:$V$2,404:$V03,539:751},{426:[1,753]},{429:[1,754]},o($V13,[2,1258]),o($V13,[2,1259]),{85:$V$2,404:$V03,539:755},o($VT2,[2,494]),o($VD1,[2,180]),{144:[1,756]},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:353,144:$V23,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:355,144:$V33,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:757,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},o($VY1,$V23),o($VY1,$V33),o($VE2,[2,995]),o($VE2,[2,128]),o($VQ2,[2,144]),o($V2,[2,261]),{58:$VE,176:758},{63:82,67:$Vf,76:759,117:$Vg,123:208,276:$Vh,395:50,396:$Vi,397:$Vj},o($VD1,[2,1317]),o($V2,[2,326]),{83:$VM2,193:760,553:654},o($Vu,[2,484]),o($Vu,[2,486]),{85:[2,1229]},{412:[1,761],437:$VX2,540:$VY2,548:762},o($VU2,[2,1248]),o($VU2,[2,1249]),{85:[2,1230]},o($VD1,[2,188],{143:763,112:$VZ2,146:$V_2}),o($VD1,[2,187],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),{181:[1,764]},o($V2,[2,287]),o($V2,[2,330]),{429:[1,765]},{420:[1,766]},{58:$VE,59:$VF,63:82,67:$Vf,83:$VG,91:148,99:$VH,100:$VI,111:$VJ,116:$VK,117:$Vg,123:156,142:767,176:162,275:154,276:$Vh,315:$VM,317:$VN,318:$VO,319:$VP,321:136,322:144,324:145,326:146,333:149,334:150,335:151,339:157,342:$VQ,343:$VR,344:$VS,345:$VT,346:$VU,347:$VV,348:$VW,349:$VX,350:$VY,351:$VZ,352:$V_,353:135,354:$V$,355:$V01,356:126,357:134,359:137,395:50,396:$Vi,397:$Vj,399:$V11,400:$V21,403:$V31,410:$V41,418:$V51,437:$V61,438:$V71,444:163,475:139,495:147,497:155,499:160,500:161,501:164},{58:$VE,176:768},{85:[2,1253]},{85:[2,1254]},o($VD1,[2,186],{486:249,36:$Vd1,81:$Vf1,99:$Vg1,112:$Vh1,113:$Vi1,146:$Vj1,301:$Vk1,400:$Vl1,404:$Vm1,405:$Vn1,407:$Vo1,422:$Vp1,424:$Vq1,425:$Vr1,427:$Vs1,428:$Vt1}),o($V2,[2,267])],
defaultActions: {43:[2,724],78:[2,701],79:[2,703],118:[2,960],140:[2,636],141:[2,637],142:[2,638],143:[2,639],165:[2,612],166:[2,613],167:[2,614],168:[2,615],169:[2,616],170:[2,617],171:[2,618],172:[2,619],180:[2,38],181:[2,47],226:[2,715],387:[2,631],424:[2,352],432:[2,1185],433:[2,1187],434:[2,1189],435:[2,1191],436:[2,1193],437:[2,1195],438:[2,1197],439:[2,1199],477:[2,632],521:[2,262],523:[2,288],525:[2,302],528:[2,354],622:[2,1223],623:[2,1228],651:[2,263],675:[2,921],751:[2,1229],755:[2,1230],765:[2,1253],766:[2,1254]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 5; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 441; 
break;
case 5: this.popState(); return 485; 
break;
case 6: return 34; 
break;
case 7: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('ALTER', yy_.yylloc, yy.lexer.upcomingInput()); return 4; 
break;
case 8: return 404; 
break;
case 9: return 47; 
break;
case 10: return 287; 
break;
case 11: this.begin('between'); return 407; 
break;
case 12: return 408; 
break;
case 13: return 409; 
break;
case 14: return 130; 
break;
case 15: return 451; 
break;
case 16: return 410; 
break;
case 17: return 411; 
break;
case 18: return 54; 
break;
case 19: parser.determineCase(yy_.yytext); return 8; 
break;
case 20: return 262; 
break;
case 21: return 412; 
break;
case 22: return 413; 
break;
case 23: return 414; 
break;
case 24: return 288; 
break;
case 25: return 295; 
break;
case 26: return 405; 
break;
case 27: return 415; 
break;
case 28: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('DROP', yy_.yylloc, yy.lexer.upcomingInput()); return 12; 
break;
case 29: return 416; 
break;
case 30: return 417; 
break;
case 31: parser.yy.correlatedSubQuery = true; return 418; 
break;
case 32: return 318; 
break;
case 33: return 419; 
break;
case 34: return 420; 
break;
case 35: parser.determineCase(yy_.yytext); return 215; 
break;
case 36: return 264; 
break;
case 37: return 238; 
break;
case 38: return 249; 
break;
case 39: return 354; 
break;
case 40: return 422; 
break;
case 41: return 266; 
break;
case 42: return 202; 
break;
case 43: return 423; 
break;
case 44: return 203; 
break;
case 45: return 424; 
break;
case 46: return 263; 
break;
case 47: return 267; 
break;
case 48: return 81; 
break;
case 49: return 274; 
break;
case 50: return 99; 
break;
case 51: return 100; 
break;
case 52: return 270; 
break;
case 53: return 396; 
break;
case 54: return 425; 
break;
case 55: return 280; 
break;
case 56: return 265; 
break;
case 57: return 129; 
break;
case 58: return 426; 
break;
case 59: return 158; 
break;
case 60: return 133; 
break;
case 61: return 427; 
break;
case 62: return 269; 
break;
case 63: return 428; 
break;
case 64: return 429; 
break;
case 65: return 67; 
break;
case 66: return 430; 
break;
case 67: return 431; 
break;
case 68: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 289; 
break;
case 69: return 268; 
break;
case 70: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 18; 
break;
case 71: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 'SHOW'; 
break;
case 72: return 432; 
break;
case 73: return 433; 
break;
case 74: return 43; 
break;
case 75: return 434; 
break;
case 76: return 435; 
break;
case 77: return 436; 
break;
case 78: return 'TO'; 
break;
case 79: return 317; 
break;
case 80: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('TRUNCATE', yy_.yylloc, yy.lexer.upcomingInput()); return 319; 
break;
case 81: return 540; 
break;
case 82: return 310; 
break;
case 83: parser.determineCase(yy_.yytext); return 369; 
break;
case 84: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('USE', yy_.yylloc); return 385; 
break;
case 85: return 144; 
break;
case 86: return 439; 
break;
case 87: return 51; 
break;
case 88: return 440; 
break;
case 89: return 312; 
break;
case 90: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 192; 
break;
case 91: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('LOAD', yy_.yylloc, yy.lexer.upcomingInput()); return 208; 
break;
case 92: return 213; 
break;
case 93: return 214; 
break;
case 94: return 162; 
break;
case 95: return 166; 
break;
case 96: return 183; 
break;
case 97: return 188; 
break;
case 98: return 169; 
break;
case 99: return 171; 
break;
case 100: return 173; 
break;
case 101: return 180; 
break;
case 102: return 181; 
break;
case 103: return 186; 
break;
case 104: return 557; 
break;
case 105: return 366; 
break;
case 106: return 67; 
break;
case 107: yy.lexer.unput('('); yy_.yytext = 'avg'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 342; 
break;
case 108: yy.lexer.unput('('); yy_.yytext = 'cast'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 355; 
break;
case 109: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 350; 
break;
case 110: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 343; 
break;
case 111: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 344; 
break;
case 112: yy.lexer.unput('('); yy_.yytext = 'stddev_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 345; 
break;
case 113: yy.lexer.unput('('); yy_.yytext = 'stddev_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 346; 
break;
case 114: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 351; 
break;
case 115: yy.lexer.unput('('); yy_.yytext = 'var_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 347; 
break;
case 116: yy.lexer.unput('('); yy_.yytext = 'var_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 348; 
break;
case 117: yy.lexer.unput('('); yy_.yytext = 'variance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 349; 
break;
case 118: yy.lexer.unput('('); yy_.yytext = 'cume_dist'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 352; 
break;
case 119: yy.lexer.unput('('); yy_.yytext = 'dense_rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 352; 
break;
case 120: yy.lexer.unput('('); yy_.yytext = 'first_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 352; 
break;
case 121: yy.lexer.unput('('); yy_.yytext = 'lag'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 352; 
break;
case 122: yy.lexer.unput('('); yy_.yytext = 'last_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 352; 
break;
case 123: yy.lexer.unput('('); yy_.yytext = 'lead'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 352; 
break;
case 124: yy.lexer.unput('('); yy_.yytext = 'rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 352; 
break;
case 125: yy.lexer.unput('('); yy_.yytext = 'row_number'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 352; 
break;
case 126: return 437; 
break;
case 127: return 437; 
break;
case 128: return 438; 
break;
case 129: return 397; 
break;
case 130: parser.yy.cursorFound = true; return 5; 
break;
case 131: parser.yy.cursorFound = true; return 441; 
break;
case 132: return 421; 
break;
case 133: parser.addFileLocation(yy_.yylloc, yy_.yytext); return 545; 
break;
case 134: this.popState(); return 546; 
break;
case 135: return 388; 
break;
case 136: return 404; 
break;
case 137: return 425; 
break;
case 138: return 36; 
break;
case 139: return 112; 
break;
case 140: return 113; 
break;
case 141: return 146; 
break;
case 142: return 146; 
break;
case 143: return 146; 
break;
case 144: return 146; 
break;
case 145: return 146; 
break;
case 146: return 400; 
break;
case 147: return 301; 
break;
case 148: return 405; 
break;
case 149: return 405; 
break;
case 150: return 405; 
break;
case 151: return 405; 
break;
case 152: return 405; 
break;
case 153: return 405; 
break;
case 154: return 89; 
break;
case 155: return 315; 
break;
case 156: return 124; 
break;
case 157: return 392; 
break;
case 158: return 403; 
break;
case 159: return 399; 
break;
case 160: return 83; 
break;
case 161: return 85; 
break;
case 162: return 401; 
break;
case 163: return 402; 
break;
case 164: return 276; 
break;
case 165: this.begin('backtickedValue'); return 406; 
break;
case 166:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 443;
                                             }
                                             return 60;
                                           
break;
case 167: this.popState(); return 406; 
break;
case 168: this.begin('singleQuotedValue'); return 58; 
break;
case 169:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 443;
                                             }
                                             return 60;
                                           
break;
case 170: this.popState(); return 58; 
break;
case 171: this.begin('doubleQuotedValue'); return 59; 
break;
case 172:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 443;
                                             }
                                             return 60;
                                           
break;
case 173: this.popState(); return 59; 
break;
case 174: return 388; 
break;
case 175: /* To prevent console logging of unknown chars */ 
break;
case 176: 
break;
case 177: 
break;
case 178: 
break;
case 179: 
break;
case 180: 
break;
case 181:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:ALL)/i,/^(?:ALTER)/i,/^(?:AND)/i,/^(?:AS)/i,/^(?:ASC)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BOOLEAN)/i,/^(?:BY)/i,/^(?:CASCADE)/i,/^(?:CASE)/i,/^(?:CHAR)/i,/^(?:COMMENT)/i,/^(?:CREATE)/i,/^(?:CROSS)/i,/^(?:CURRENT)/i,/^(?:DATABASE)/i,/^(?:DECIMAL)/i,/^(?:DESC)/i,/^(?:DISTINCT)/i,/^(?:DIV)/i,/^(?:DOUBLE)/i,/^(?:DROP)/i,/^(?:ELSE)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:FALSE)/i,/^(?:FLOAT)/i,/^(?:FOLLOWING)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:GROUP)/i,/^(?:HAVING)/i,/^(?:IF)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JOIN)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:ON)/i,/^(?:OPTION)/i,/^(?:OR)/i,/^(?:ORDER)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PRECEDING)/i,/^(?:PURGE)/i,/^(?:RANGE)/i,/^(?:REGEXP)/i,/^(?:RIGHT)/i,/^(?:RLIKE)/i,/^(?:ROW)/i,/^(?:ROLE)/i,/^(?:ROWS)/i,/^(?:SCHEMA)/i,/^(?:SELECT)/i,/^(?:SEMI)/i,/^(?:SET)/i,/^(?:SHOW)/i,/^(?:SMALLINT)/i,/^(?:STRING)/i,/^(?:TABLE)/i,/^(?:THEN)/i,/^(?:TIMESTAMP)/i,/^(?:TINYINT)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TRUNCATE)/i,/^(?:UNBOUNDED)/i,/^(?:UNION)/i,/^(?:UPDATE)/i,/^(?:USE)/i,/^(?:VALUES)/i,/^(?:VARCHAR)/i,/^(?:VIEW)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:LOAD)/i,/^(?:SOURCE)/i,/^(?:FIELDS)/i,/^(?:EXTERNAL)/i,/^(?:STORAGE)/i,/^(?:LOCATION)/i,/^(?:FORMAT)/i,/^(?:TYPE)/i,/^(?:ENDPOINT)/i,/^(?:REGION)/i,/^(?:IDENTITY)/i,/^(?:CREDENTIAL)/i,/^(?:PATH)/i,/^(?:OFF)/i,/^(?:OVER)/i,/^(?:ROLE)/i,/^(?:AVG\s*\()/i,/^(?:CAST\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:STDDEV_POP\s*\()/i,/^(?:STDDEV_SAMP\s*\()/i,/^(?:SUM\s*\()/i,/^(?:VAR_POP\s*\()/i,/^(?:VAR_SAMP\s*\()/i,/^(?:VARIANCE\s*\()/i,/^(?:CUME_DIST\s*\()/i,/^(?:DENSE_RANK\s*\()/i,/^(?:FIRST_VALUE\s*\()/i,/^(?:LAG\s*\()/i,/^(?:LAST_VALUE\s*\()/i,/^(?:LEAD\s*\()/i,/^(?:RANK\s*\()/i,/^(?:ROW_NUMBER\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:\s+['"])/i,/^(?:[^'"\u2020\u2021]+)/i,/^(?:['"])/i,/^(?:$)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[130,131,132,133,134,135,177],"inclusive":false},"doubleQuotedValue":{"rules":[172,173,180],"inclusive":false},"singleQuotedValue":{"rules":[169,170,179],"inclusive":false},"backtickedValue":{"rules":[166,167,178],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,168,171,174,175,176,181],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,168,171,174,175,181],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default yellowbrickSyntaxParser;
