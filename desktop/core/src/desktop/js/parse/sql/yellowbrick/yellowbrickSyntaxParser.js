// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/yellowbrick/sqlParseSupport';

var yellowbrickSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[4,8,12,18,161,197,203,219,285,315,365,381,384,388],$V1=[2,703],$V2=[384,388],$V3=[2,704],$V4=[1,41],$V5=[1,29],$V6=[1,30],$V7=[1,20],$V8=[1,33],$V9=[1,42],$Va=[1,34],$Vb=[1,39],$Vc=[1,40],$Vd=[1,35],$Ve=[1,38],$Vf=[1,36],$Vg=[1,51],$Vh=[1,53],$Vi=[1,49],$Vj=[1,52],$Vk=[1,48],$Vl=[85,384,388],$Vm=[2,530],$Vn=[1,59],$Vo=[1,68],$Vp=[1,69],$Vq=[1,83],$Vr=[2,492],$Vs=[1,88],$Vt=[1,89],$Vu=[36,311],$Vv=[18,36,47,54,58,59,67,81,83,85,89,99,111,112,113,116,117,124,129,133,144,146,158,162,169,171,186,204,206,234,245,258,259,260,261,262,263,264,265,266,270,272,276,283,284,297,306,308,311,384,388,392,393,396,400,401,402,403,404,405,407,410,411,412,413,415,418,419,420,421,423,424,426,428,429,430,431,432,435,436,447,481],$Vw=[85,306,384,388],$Vx=[67,117,272,384,388,392,393],$Vy=[2,860],$Vz=[1,103],$VA=[67,117,272,392,393,402],$VB=[67,117,272,350,384,388,392,393,402],$VC=[2,857],$VD=[1,110],$VE=[18,67,117,272,392,393,402],$VF=[18,36,47,54,58,59,67,81,83,85,89,99,111,112,113,116,117,124,129,133,144,146,158,162,169,186,204,206,234,245,258,259,260,261,262,263,264,265,266,270,272,276,283,284,297,306,308,311,384,388,392,393,396,400,401,402,403,404,405,407,410,411,412,413,415,418,419,420,421,423,424,426,428,429,430,431,432,435,436,447,481],$VG=[83,89,285],$VH=[1,178],$VI=[1,179],$VJ=[1,134],$VK=[1,129],$VL=[1,140],$VM=[1,142],$VN=[1,144],$VO=[1,127],$VP=[1,176],$VQ=[1,180],$VR=[1,181],$VS=[1,145],$VT=[1,167],$VU=[1,168],$VV=[1,169],$VW=[1,170],$VX=[1,171],$VY=[1,172],$VZ=[1,173],$V_=[1,174],$V$=[1,160],$V01=[1,161],$V11=[1,154],$V21=[1,143],$V31=[1,155],$V41=[1,130],$V51=[1,132],$V61=[1,131],$V71=[1,135],$V81=[1,133],$V91=[1,175],$Va1=[1,177],$Vb1=[58,59,67,83,85,99,100,111,116,117,272,285,297,311,313,314,315,338,339,340,341,342,343,344,345,346,347,348,350,351,392,393,395,396,399,402,406,414,433,434],$Vc1=[47,58,59,67,85,89,117,129,144,158,204,206,234,245,258,259,260,261,262,263,264,265,266,270,272,276,306,308,384,388,392,393,402],$Vd1=[85,89,204,306,384,388],$Ve1=[2,1179],$Vf1=[1,237],$Vg1=[1,252],$Vh1=[1,253],$Vi1=[1,241],$Vj1=[1,238],$Vk1=[1,239],$Vl1=[1,240],$Vm1=[1,247],$Vn1=[1,246],$Vo1=[1,245],$Vp1=[1,248],$Vq1=[1,243],$Vr1=[1,242],$Vs1=[1,236],$Vt1=[1,244],$Vu1=[1,255],$Vv1=[1,254],$Vw1=[36,47,58,59,67,81,85,89,99,112,113,117,133,146,204,234,245,258,259,260,261,262,263,264,265,270,272,276,283,284,297,306,308,384,388,392,393,396,400,401,402,403,412,413,418,420,421,423,424,426,430,436,481],$Vx1=[1,261],$Vy1=[1,267],$Vz1=[1,269],$VA1=[36,47,58,59,67,81,83,85,89,99,112,113,117,133,146,204,234,245,258,259,260,261,262,263,264,265,270,272,276,283,284,297,306,308,384,388,392,393,396,400,401,402,403,412,413,418,420,421,423,424,426,430,436,481],$VB1=[1,274],$VC1=[36,47,54,58,59,67,81,83,85,89,99,112,113,117,133,146,204,234,245,258,259,260,261,262,263,264,265,270,272,276,283,284,297,306,308,311,384,388,392,393,396,400,401,402,403,412,413,418,420,421,423,424,426,430,436,481],$VD1=[36,47,58,59,67,81,85,89,99,112,113,117,133,146,204,234,245,258,259,260,261,262,263,264,265,270,272,276,283,284,297,306,308,362,384,388,392,393,396,400,401,402,403,412,413,418,420,421,423,424,426,430,436,481],$VE1=[47,54,85,89,99,100,113,204,234,245,258,259,260,261,262,263,264,265,266,270,276,306,308,384,388],$VF1=[85,89],$VG1=[2,50],$VH1=[1,301],$VI1=[47,384,388],$VJ1=[47,129,384,388],$VK1=[1,309],$VL1=[47,54,81,83,129,162,169,186,384,388],$VM1=[47,54],$VN1=[1,323],$VO1=[308,384,388],$VP1=[89,204,308,384,388],$VQ1=[36,54,85,89],$VR1=[219,285],$VS1=[2,1157],$VT1=[85,234,245,270,276,306,384,388],$VU1=[2,543],$VV1=[1,337],$VW1=[100,291,313,314],$VX1=[85,89,204,234,245,258,259,260,261,262,263,264,265,266,270,276,306,308,384,388],$VY1=[47,58,59,67,85,89,99,117,133,204,234,245,258,259,260,261,262,263,264,265,270,272,276,283,284,306,308,384,388,392,393,400,402,403,412,413,421,426,430,436,481],$VZ1=[36,47,58,59,67,85,89,99,112,113,117,133,146,204,234,245,258,259,260,261,262,263,264,265,270,272,276,283,284,297,306,308,384,388,392,393,396,400,401,402,403,412,413,421,426,430,436,481],$V_1=[412,413,436],$V$1=[58,59,67,83,99,100,111,116,117,272,311,313,314,315,338,339,340,341,342,343,344,345,346,347,348,350,351,392,393,395,396,399,402,406,414,433,434],$V02=[36,47,54,58,59,67,81,85,89,99,100,112,113,117,133,146,162,173,180,181,204,234,245,258,259,260,261,262,263,264,265,266,270,272,276,283,284,297,306,308,384,388,392,393,396,400,401,402,403,412,413,418,420,421,423,424,426,430,436,481],$V12=[36,47,54,58,59,67,81,85,89,99,100,112,113,117,133,146,204,234,245,258,259,260,261,262,263,264,265,266,270,272,276,283,284,297,306,308,384,388,392,393,396,400,401,402,403,412,413,418,420,421,423,424,426,430,436,481],$V22=[85,245,270,276,306,384,388],$V32=[85,89,234,245,270,276,306,308,384,388],$V42=[1,443],$V52=[1,446],$V62=[1,444],$V72=[1,448],$V82=[1,445],$V92=[1,447],$Va2=[1,450],$Vb2=[1,449],$Vc2=[85,89,234,245,258,259,260,261,262,263,264,265,266,270,276,306,308,384,388],$Vd2=[47,58,59,67,85,89,117,234,245,258,259,260,261,262,263,264,265,266,270,272,276,306,308,384,388,392,393,402],$Ve2=[36,47,58,59,67,85,89,99,112,113,117,133,146,204,234,245,258,259,260,261,262,263,264,265,270,272,276,283,284,306,308,384,388,392,393,400,402,403,412,413,421,426,430,436,481],$Vf2=[47,58,59,67,85,89,117,133,204,234,245,258,259,260,261,262,263,264,265,270,272,276,283,284,306,308,384,388,392,393,400,402,412,413,421,426,430,436,481],$Vg2=[1,468],$Vh2=[85,276],$Vi2=[1,482],$Vj2=[1,508],$Vk2=[1,509],$Vl2=[1,510],$Vm2=[1,496],$Vn2=[1,497],$Vo2=[1,498],$Vp2=[1,499],$Vq2=[1,500],$Vr2=[1,501],$Vs2=[1,502],$Vt2=[1,503],$Vu2=[1,504],$Vv2=[1,505],$Vw2=[1,506],$Vx2=[1,507],$Vy2=[85,270,276,306,384,388],$Vz2=[67,83,117,272,392,393,402],$VA2=[1,551],$VB2=[85,89,276],$VC2=[36,47,58,59,67,81,85,89,99,112,113,117,133,146,204,234,245,258,259,260,261,262,263,264,265,266,270,272,276,283,284,297,306,308,384,388,392,393,396,400,401,402,403,412,413,418,420,421,423,424,426,430,436,481],$VD2=[1,559],$VE2=[89,384,388],$VF2=[1,575],$VG2=[1,576],$VH2=[54,85,89,99,100,113],$VI2=[2,969],$VJ2=[1,579],$VK2=[85,270,306,384,388],$VL2=[85,89,234,245,258,259,260,261,262,263,264,265,270,276,306,308,384,388],$VM2=[2,451],$VN2=[1,602],$VO2=[54,85,89,99,100],$VP2=[85,89,245,270,276,306,384,388],$VQ2=[403,536],$VR2=[1,664],$VS2=[89,113],$VT2=[85,400,408,433,536],$VU2=[2,1215],$VV2=[85,89,133,270,306,384,388,426],$VW2=[85,400],$VX2=[2,1225],$VY2=[1,707],$VZ2=[1,708],$V_2=[1,709],$V$2=[1,717],$V03=[1,718],$V13=[2,1230],$V23=[1,729],$V33=[416,422],$V43=[2,200],$V53=[2,201];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"DataDefinition_EDIT":3,"ALTER":4,"CURSOR":5,"AlterTable_EDIT":6,"AlterView_EDIT":7,"CREATE":8,"DatabaseDefinition_EDIT":9,"TableDefinition_EDIT":10,"ViewDefinition_EDIT":11,"DROP":12,"DropDatabaseStatement_EDIT":13,"DropTableStatement_EDIT":14,"DropViewStatement_EDIT":15,"ExternalDefinition_EDIT":16,"LoadTableStatement_EDIT":17,"SET":18,"TruncateTableStatement_EDIT":19,"UseStatement_EDIT":20,"DataDefinition":21,"AlterTable":22,"AlterView":23,"DatabaseDefinition":24,"RoleDefinition":25,"TableDefinition":26,"ViewDefinition":27,"DropDatabaseStatement":28,"DropRoleStatement":29,"DropTableStatement":30,"DropViewStatement":31,"ExternalDefinition":32,"LoadTableStatement":33,"ALL":34,"SetOption":35,"=":36,"SetValue":37,"TruncateTableStatement":38,"UseStatement":39,"AlterTableLeftSide":40,"PartitionSpec":41,"AlterTableLeftSide_EDIT":42,"TABLE":43,"SchemaQualifiedTableIdentifier":44,"SchemaQualifiedTableIdentifier_EDIT":45,"AlterViewLeftSide":46,"AS":47,"QuerySpecification":48,"AlterViewLeftSide_EDIT":49,"QuerySpecification_EDIT":50,"VIEW":51,"OptionalComment":52,"Comment":53,"COMMENT":54,"QuotedValue":55,"OptionalComment_INVALID":56,"Comment_INVALID":57,"SINGLE_QUOTE":58,"DOUBLE_QUOTE":59,"VALUE":60,"DatabaseOrSchema":61,"OptionalIfNotExists":62,"RegularIdentifier":63,"DatabaseDefinitionOptionals":64,"OptionalIfNotExists_EDIT":65,"DatabaseDefinitionOptionals_EDIT":66,"ROLE":67,"TableDefinitionRightPart":68,"TableDefinitionRightPart_EDIT":69,"TableIdentifierAndOptionalColumnSpecification":70,"OptionalPartitionedBy":71,"OptionalAsSelectStatement":72,"TableIdentifierAndOptionalColumnSpecification_EDIT":73,"PartitionedBy_EDIT":74,"OptionalAsSelectStatement_EDIT":75,"SchemaQualifiedIdentifier":76,"OptionalColumnSpecificationsOrLike":77,"OptionalColumnSpecificationsOrLike_EDIT":78,"SchemaQualifiedIdentifier_EDIT":79,"ParenthesizedColumnSpecificationList":80,"LIKE":81,"ParenthesizedColumnSpecificationList_EDIT":82,"(":83,"ColumnSpecificationList":84,")":85,"ColumnSpecificationList_EDIT":86,"RightParenthesisOrError":87,"ColumnSpecification":88,",":89,"ColumnSpecification_EDIT":90,"ColumnIdentifier":91,"ColumnDataType":92,"OptionalColumnOptions":93,"ColumnDataType_EDIT":94,"ColumnOptions_EDIT":95,"ColumnOptions":96,"ColumnOption":97,"ColumnOption_EDIT":98,"NOT":99,"NULL":100,"PrimitiveType":101,"ArrayType":102,"MapType":103,"StructType":104,"ArrayType_INVALID":105,"MapType_INVALID":106,"StructType_INVALID":107,"ArrayType_EDIT":108,"MapType_EDIT":109,"StructType_EDIT":110,"ARRAY":111,"<":112,">":113,"AnyCursor":114,"GreaterThanOrError":115,"MAP":116,"STRUCT":117,"StructDefinitionList":118,"StructDefinitionList_EDIT":119,"StructDefinition":120,"StructDefinition_EDIT":121,"Commas":122,"RegularOrBacktickedIdentifier":123,":":124,"ColumnDataTypeList":125,"ColumnDataTypeList_EDIT":126,"ColumnDataTypeListInner_EDIT":127,"PartitionedBy":128,"PARTITION":129,"BY":130,"RangeClause":131,"RangeClause_EDIT":132,"RANGE":133,"ParenthesizedColumnList":134,"ParenthesizedPartitionValuesList":135,"ParenthesizedColumnList_EDIT":136,"ParenthesizedPartitionValuesList_EDIT":137,"PartitionValueList":138,"PartitionValueList_EDIT":139,"PartitionValue":140,"PartitionValue_EDIT":141,"ValueExpression":142,"LessThanOrEqualTo":143,"VALUES":144,"ValueExpression_EDIT":145,"COMPARISON_OPERATOR":146,"CommitLocations":147,"OptionalParenthesizedViewColumnList":148,"ParenthesizedViewColumnList_EDIT":149,"ParenthesizedViewColumnList":150,"ViewColumnList":151,"ViewColumnList_EDIT":152,"ColumnReference":153,"OptionalIfExists":154,"OptionalCascade":155,"OptionalIfExists_EDIT":156,"OptionalPurge":157,"PURGE":158,"ExternalStorageDefinition":159,"ExternalLocationDefinition":160,"ExternalFormatDefinition":161,"EXTERNAL":162,"ExternalStorageDefinition_EDIT":163,"ExternalLocationDefinition_EDIT":164,"ExternalFormatDefinition_EDIT":165,"STORAGE":166,"ExternalStorageDefinitionRightPart":167,"ExternalStorageDefinitionRightPart_EDIT":168,"TYPE":169,"StorageType":170,"ENDPOINT":171,"EndpointType":172,"REGION":173,"RegionType":174,"OptionalIdentityAndCredential":175,"SingleQuotedValue":176,"EndpointType_EDIT":177,"SingleQuotedValue_EDIT":178,"RegionType_EDIT":179,"IDENTITY":180,"CREDENTIAL":181,"IdentityAndCredential_EDIT":182,"LOCATION":183,"ExternalLocationDefinitionRightPart":184,"ExternalLocationDefinitionRightPart_EDIT":185,"PATH":186,"PathType":187,"OptionalExternalFormat":188,"FORMAT":189,"DataManipulation":190,"InsertStatement":191,"UpdateStatement":192,"InsertValuesStatement":193,"DataManipulation_EDIT":194,"InsertValuesStatement_EDIT":195,"UpdateStatement_EDIT":196,"INSERT":197,"INTO":198,"OptionalTable":199,"InsertValuesList":200,"ParenthesizedRowValuesList":201,"InValueList":202,"LOAD":203,"FROM":204,"LoadFromSpec":205,"SOURCE":206,"FIELDS":207,"LoadSourceFieldsSpec":208,"LoadFromSpec_EDIT":209,"LoadSourceFieldsSpec_EDIT":210,"LoadFromSpecList":211,"LoadFromSpecList_EDIT":212,"CommonTableExpression":213,"SelectStatement":214,"OptionalUnions":215,"SelectStatement_EDIT":216,"OptionalUnions_EDIT":217,"CommonTableExpression_EDIT":218,"WITH":219,"WithQueries":220,"WithQueries_EDIT":221,"WithQuery":222,"WithQuery_EDIT":223,"TableSubQueryInner":224,"TableSubQueryInner_EDIT":225,"FromClause":226,"TableReferenceList":227,"FromClause_EDIT":228,"TableReferenceList_EDIT":229,"TableReference":230,"TableReference_EDIT":231,"OptionalGroupByClause":232,"GroupByClause":233,"GROUP":234,"GroupByColumnList":235,"GroupByClause_EDIT":236,"GroupByColumnList_EDIT":237,"ColumnGroupingSets":238,"ColumnGroupingSets_EDIT":239,"ColumnGroupingSet_EDIT":240,"ColumnReference_EDIT":241,"GroupByColumnListPartTwo_EDIT":242,"OptionalHavingClause":243,"HavingClause":244,"HAVING":245,"HavingClause_EDIT":246,"OptionalJoins":247,"Joins":248,"Joins_INVALID":249,"JoinType":250,"TablePrimary":251,"OptionalJoinCondition":252,"Join_EDIT":253,"JoinType_EDIT":254,"TablePrimary_EDIT":255,"JoinCondition_EDIT":256,"Joins_EDIT":257,"CROSS":258,"JOIN":259,"FULL":260,"OUTER":261,"INNER":262,"LEFT":263,"SEMI":264,"RIGHT":265,"ON":266,"UsingColList":267,"OptionalLimitClause":268,"LimitClause":269,"LIMIT":270,"UnsignedNumericLiteral":271,"VARIABLE_REFERENCE":272,"LimitClause_EDIT":273,"OptionalOrderByClause":274,"OrderByClause":275,"ORDER":276,"OrderByColumnList":277,"OrderByClause_EDIT":278,"OrderByColumnList_EDIT":279,"OrderByIdentifier":280,"OrderByIdentifier_EDIT":281,"OptionalAscOrDesc":282,"ASC":283,"DESC":284,"SELECT":285,"OptionalAllOrDistinct":286,"SelectList":287,"TableExpression":288,"SelectList_EDIT":289,"TableExpression_EDIT":290,"DISTINCT":291,"OptionalSelectConditions":292,"OptionalSelectConditions_EDIT":293,"SelectSpecification":294,"SelectSpecification_EDIT":295,"OptionalCorrelationName":296,"*":297,"OptionalCorrelationName_EDIT":298,"OptionalWhereClause":299,"WhereClause_EDIT":300,"WhereClause":301,"Unions":302,"Unions_EDIT":303,"UnionClause":304,"UnionClause_EDIT":305,"UNION":306,"NewStatement":307,"WHERE":308,"SearchCondition":309,"SearchCondition_EDIT":310,".":311,"SignedInteger":312,"TRUE":313,"FALSE":314,"TRUNCATE":315,"OptionalPartitionSpec":316,"UserDefinedFunction":317,"AggregateFunction":318,"OptionalOverClause":319,"AnalyticFunction":320,"OverClause":321,"CastFunction":322,"UserDefinedFunction_EDIT":323,"AggregateFunction_EDIT":324,"OptionalOverClause_EDIT":325,"AnalyticFunction_EDIT":326,"OverClause_EDIT":327,"CastFunction_EDIT":328,"OtherAggregateFunction":329,"CountFunction":330,"SumFunction":331,"OtherAggregateFunction_EDIT":332,"CountFunction_EDIT":333,"SumFunction_EDIT":334,"OtherAggregateFunction_Type":335,"UdfArgumentList":336,"UdfArgumentList_EDIT":337,"AVG":338,"MAX":339,"MIN":340,"STDDEV_POP":341,"STDDEV_SAMP":342,"VAR_POP":343,"VAR_SAMP":344,"VARIANCE":345,"COUNT":346,"SUM":347,"ANALYTIC":348,"ArbitraryFunctionName":349,"IF":350,"CAST":351,"NonParenthesizedValueExpressionPrimary":352,"ColumnOrArbitraryFunctionRef":353,"ArbitraryFunctionRightPart":354,"UnsignedValueSpecification":355,"NonParenthesizedValueExpressionPrimary_EDIT":356,"ArbitraryFunctionRightPart_EDIT":357,"UnsignedValueSpecification_EDIT":358,"ColumnOrArbitraryFunctionRef_EDIT":359,"ArbitraryFunction":360,"ArbitraryFunction_EDIT":361,"OVER":362,"WindowExpression":363,"WindowExpression_EDIT":364,"UPDATE":365,"TargetTable":366,"SetClauseList":367,"OptionalFromJoinedTable":368,"TargetTable_EDIT":369,"SetClauseList_EDIT":370,"FromJoinedTable_EDIT":371,"TableName":372,"TableName_EDIT":373,"LocalOrSchemaQualifiedName":374,"LocalOrSchemaQualifiedName_EDIT":375,"SetClause":376,"SetClause_EDIT":377,"SetTarget":378,"UpdateSource":379,"UpdateSource_EDIT":380,"USE":381,"SqlSyntax":382,"SqlStatements":383,"EOF":384,"SqlAutocomplete":385,"SqlStatements_EDIT":386,"SqlStatement":387,";":388,"SqlStatement_EDIT":389,"SetSpecification_EDIT":390,"NonReservedKeyword":391,"OPTION":392,"REGULAR_IDENTIFIER":393,"NonStartingToken":394,"!":395,"-":396,"[":397,"]":398,"~":399,"AND":400,"ARITHMETIC_OPERATOR":401,"BACKTICK":402,"BETWEEN":403,"BIGINT":404,"BOOLEAN":405,"CASE":406,"CHAR":407,"CURRENT":408,"DATABASE":409,"DECIMAL":410,"DOUBLE":411,"ELSE":412,"END":413,"EXISTS":414,"FLOAT":415,"FOLLOWING":416,"HDFS_START_QUOTE":417,"IN":418,"INT":419,"IS":420,"OR":421,"PRECEDING":422,"REGEXP":423,"RLIKE":424,"ROW":425,"ROWS":426,"SCHEMA":427,"SMALLINT":428,"STRING":429,"THEN":430,"TIMESTAMP":431,"TINYINT":432,"UNSIGNED_INTEGER":433,"UNSIGNED_INTEGER_E":434,"VARCHAR":435,"WHEN":436,"PARTIAL_CURSOR":437,"FromOrIn":438,"PARTIAL_VALUE":439,"DoubleQuotedValue":440,"DoubleQuotedValue_EDIT":441,"QuotedValue_EDIT":442,"OptionalFromDatabase":443,"DatabaseIdentifier":444,"OptionalFromDatabase_EDIT":445,"DatabaseIdentifier_EDIT":446,"CASCADE":447,"OptionalInDatabase":448,"OptionalPartitionSpec_EDIT":449,"PartitionSpec_EDIT":450,"PartitionSpecList":451,"PartitionSpecList_EDIT":452,"RangePartitionSpec":453,"RangePartitionComparisonOperator":454,"RangePartitionSpec_EDIT":455,"ConfigurationName":456,"PartialBacktickedOrAnyCursor":457,"PartialBacktickedIdentifier":458,"PartialBacktickedOrCursor":459,"PartialBacktickedOrPartialCursor":460,"OptionalParenthesizedColumnList":461,"OptionalParenthesizedColumnList_EDIT":462,"ColumnList":463,"ColumnList_EDIT":464,"ParenthesizedSimpleValueList":465,"SimpleValueList":466,"PartitionExpression":467,"PartitionExpression_EDIT":468,"RegularOrBackTickedSchemaQualifiedName":469,"RegularOrBackTickedSchemaQualifiedName_EDIT":470,"BasicIdentifierChain":471,"BasicIdentifierChain_EDIT":472,"DerivedColumnChain":473,"DerivedColumnChain_EDIT":474,"PartialBacktickedIdentifierOrPartialCursor":475,"OptionalTypeLength":476,"OptionalTypePrecision":477,"OptionalNot":478,"TableSubQuery":479,"ValueExpressionList":480,"BETWEEN_AND":481,"LikeRightPart":482,"CaseRightPart":483,"TableSubQuery_EDIT":484,"ValueExpressionInSecondPart_EDIT":485,"LikeRightPart_EDIT":486,"CaseRightPart_EDIT":487,"EndOrError":488,"ValueExpressionList_EDIT":489,"+":490,"UnsignedLiteral":491,"UnsignedLiteral_EDIT":492,"GeneralLiteral":493,"GeneralLiteral_EDIT":494,"ExactNumericLiteral":495,"ApproximateNumericLiteral":496,"TruthValue":497,"TablePrimaryOrJoinedTable":498,"TablePrimaryOrJoinedTable_EDIT":499,"JoinedTable":500,"JoinedTable_EDIT":501,"TableOrQueryName":502,"DerivedTable":503,"TableOrQueryName_EDIT":504,"DerivedTable_EDIT":505,"OptionalOnColumn":506,"OptionalOnColumn_EDIT":507,"PushQueryState":508,"PopQueryState":509,"SubQuery":510,"SubQuery_EDIT":511,"QueryExpression":512,"QueryExpression_EDIT":513,"QueryExpressionBody":514,"QueryExpressionBody_EDIT":515,"NonJoinQueryExpression":516,"NonJoinQueryExpression_EDIT":517,"NonJoinQueryTerm":518,"NonJoinQueryTerm_EDIT":519,"NonJoinQueryPrimary":520,"NonJoinQueryPrimary_EDIT":521,"SimpleTable":522,"SimpleTable_EDIT":523,"OptionalPartitionBy":524,"OptionalOrderByAndWindow":525,"PartitionBy_EDIT":526,"OptionalOrderByAndWindow_EDIT":527,"PartitionBy":528,"OptionalWindowSpec":529,"WindowSpec_EDIT":530,"WindowSpec":531,"RowsOrRange":532,"PopLexerState":533,"OptionalCurrentOrPreceding":534,"OptionalAndFollowing":535,"UNBOUNDED":536,"OptionalCurrentOrPreceding_EDIT":537,"OptionalAndFollowing_EDIT":538,"PushHdfsLexerState":539,"HdfsPath":540,"HDFS_PATH":541,"HDFS_END_QUOTE":542,"HdfsPath_EDIT":543,"IntegerOrUnbounded":544,"CaseWhenThenList":545,"CaseWhenThenList_EDIT":546,"CaseWhenThenListPartTwo":547,"CaseWhenThenListPartTwo_EDIT":548,"$accept":0,"$end":1},
terminals_: {2:"error",4:"ALTER",5:"CURSOR",8:"CREATE",12:"DROP",18:"SET",34:"ALL",36:"=",43:"TABLE",47:"AS",51:"VIEW",54:"COMMENT",58:"SINGLE_QUOTE",59:"DOUBLE_QUOTE",60:"VALUE",67:"ROLE",81:"LIKE",83:"(",85:")",89:",",99:"NOT",100:"NULL",111:"ARRAY",112:"<",113:">",116:"MAP",117:"STRUCT",124:":",129:"PARTITION",130:"BY",133:"RANGE",144:"VALUES",146:"COMPARISON_OPERATOR",158:"PURGE",161:"ExternalFormatDefinition",162:"EXTERNAL",165:"ExternalFormatDefinition_EDIT",166:"STORAGE",169:"TYPE",171:"ENDPOINT",173:"REGION",180:"IDENTITY",181:"CREDENTIAL",183:"LOCATION",186:"PATH",189:"FORMAT",197:"INSERT",198:"INTO",203:"LOAD",204:"FROM",206:"SOURCE",207:"FIELDS",219:"WITH",234:"GROUP",245:"HAVING",258:"CROSS",259:"JOIN",260:"FULL",261:"OUTER",262:"INNER",263:"LEFT",264:"SEMI",265:"RIGHT",266:"ON",270:"LIMIT",272:"VARIABLE_REFERENCE",276:"ORDER",283:"ASC",284:"DESC",285:"SELECT",291:"DISTINCT",297:"*",306:"UNION",308:"WHERE",311:".",313:"TRUE",314:"FALSE",315:"TRUNCATE",338:"AVG",339:"MAX",340:"MIN",341:"STDDEV_POP",342:"STDDEV_SAMP",343:"VAR_POP",344:"VAR_SAMP",345:"VARIANCE",346:"COUNT",347:"SUM",348:"ANALYTIC",350:"IF",351:"CAST",362:"OVER",365:"UPDATE",381:"USE",384:"EOF",388:";",390:"SetSpecification_EDIT",392:"OPTION",393:"REGULAR_IDENTIFIER",395:"!",396:"-",397:"[",398:"]",399:"~",400:"AND",401:"ARITHMETIC_OPERATOR",402:"BACKTICK",403:"BETWEEN",404:"BIGINT",405:"BOOLEAN",406:"CASE",407:"CHAR",408:"CURRENT",409:"DATABASE",410:"DECIMAL",411:"DOUBLE",412:"ELSE",413:"END",414:"EXISTS",415:"FLOAT",416:"FOLLOWING",417:"HDFS_START_QUOTE",418:"IN",419:"INT",420:"IS",421:"OR",422:"PRECEDING",423:"REGEXP",424:"RLIKE",425:"ROW",426:"ROWS",427:"SCHEMA",428:"SMALLINT",429:"STRING",430:"THEN",431:"TIMESTAMP",432:"TINYINT",433:"UNSIGNED_INTEGER",434:"UNSIGNED_INTEGER_E",435:"VARCHAR",436:"WHEN",437:"PARTIAL_CURSOR",439:"PARTIAL_VALUE",447:"CASCADE",481:"BETWEEN_AND",490:"+",536:"UNBOUNDED",541:"HDFS_PATH",542:"HDFS_END_QUOTE"},
productions_: [0,[3,2],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,2],[21,4],[21,1],[21,1],[22,2],[6,1],[6,2],[6,2],[6,3],[40,3],[42,3],[42,3],[23,3],[7,1],[7,2],[7,3],[7,3],[7,3],[46,3],[49,3],[49,3],[52,0],[52,1],[53,2],[56,1],[57,2],[57,2],[57,3],[57,3],[24,3],[24,5],[9,4],[9,3],[9,5],[9,4],[9,6],[64,1],[66,1],[25,3],[26,4],[10,4],[10,4],[10,3],[68,3],[69,3],[69,3],[69,3],[69,3],[70,2],[73,2],[73,2],[77,0],[77,1],[77,2],[78,1],[78,2],[78,2],[80,3],[82,3],[84,1],[84,3],[86,1],[86,3],[86,3],[86,5],[86,2],[86,4],[86,4],[86,6],[88,3],[90,3],[90,3],[90,3],[93,0],[93,1],[96,1],[96,2],[95,1],[95,2],[95,2],[95,3],[97,2],[97,1],[97,1],[98,2],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[94,1],[94,1],[94,1],[102,4],[105,3],[108,4],[108,4],[103,6],[106,3],[109,6],[109,4],[109,6],[109,5],[104,4],[107,3],[110,4],[118,1],[118,3],[119,1],[119,2],[119,3],[119,3],[119,5],[120,4],[121,5],[121,4],[121,4],[121,4],[121,3],[121,3],[125,1],[125,3],[126,1],[126,2],[126,3],[126,3],[126,5],[127,2],[127,2],[127,1],[127,1],[115,1],[115,1],[71,0],[71,1],[128,3],[74,2],[74,3],[74,3],[131,3],[132,2],[132,2],[132,3],[132,3],[132,3],[135,3],[137,3],[137,3],[138,1],[138,3],[139,1],[139,3],[139,5],[139,3],[139,5],[140,6],[140,4],[140,4],[141,2],[141,2],[141,3],[141,4],[141,4],[141,5],[141,6],[141,6],[141,3],[141,4],[141,4],[143,1],[143,1],[72,0],[72,3],[75,3],[75,3],[147,0],[27,8],[11,4],[11,9],[11,3],[11,6],[11,7],[11,8],[11,8],[11,8],[148,0],[148,1],[150,3],[149,3],[151,2],[151,4],[152,3],[152,5],[152,5],[152,7],[28,5],[13,3],[13,3],[13,4],[13,5],[13,5],[13,6],[29,3],[30,5],[14,3],[14,4],[14,5],[14,5],[14,6],[157,0],[157,1],[31,4],[15,4],[15,5],[15,3],[15,4],[15,4],[32,1],[32,1],[32,1],[16,3],[16,1],[16,1],[16,1],[159,5],[163,5],[163,6],[163,5],[163,4],[167,8],[170,1],[172,1],[177,1],[174,1],[179,1],[175,0],[175,4],[182,2],[182,3],[182,4],[168,2],[168,3],[168,4],[168,5],[168,6],[168,7],[168,8],[168,8],[160,5],[164,5],[164,6],[164,5],[164,4],[184,7],[187,1],[188,0],[188,3],[185,2],[185,4],[185,6],[185,7],[185,9],[190,1],[190,1],[191,1],[194,1],[194,1],[193,6],[195,2],[195,4],[195,4],[195,5],[195,6],[200,1],[200,3],[201,3],[199,0],[199,1],[33,8],[33,11],[33,11],[33,14],[17,2],[17,3],[17,4],[17,4],[17,5],[17,7],[17,8],[17,10],[17,4],[17,5],[17,5],[17,6],[17,8],[17,9],[17,11],[208,3],[210,3],[205,4],[209,2],[209,4],[211,1],[211,3],[212,1],[212,3],[212,3],[212,5],[48,3],[48,5],[48,2],[50,4],[50,3],[50,3],[50,1],[50,4],[50,3],[50,2],[50,2],[213,2],[218,2],[220,1],[220,3],[221,1],[221,3],[221,3],[221,5],[222,5],[223,2],[223,5],[223,5],[226,2],[228,2],[228,2],[227,1],[227,3],[229,1],[229,3],[229,3],[229,5],[229,3],[232,0],[232,1],[233,3],[236,3],[236,3],[236,2],[238,0],[238,1],[238,3],[238,3],[239,1],[239,3],[239,3],[239,5],[239,3],[240,1],[240,1],[235,1],[235,3],[237,1],[237,2],[237,3],[237,3],[237,3],[237,4],[237,5],[242,1],[242,2],[242,1],[243,0],[243,1],[244,2],[246,2],[246,2],[247,0],[247,1],[247,1],[248,3],[248,4],[249,1],[249,2],[253,3],[253,1],[253,3],[253,3],[253,3],[257,1],[257,2],[257,2],[257,3],[250,2],[250,2],[250,3],[250,2],[250,1],[250,3],[250,2],[250,3],[250,3],[250,2],[250,3],[250,2],[250,3],[250,3],[250,2],[254,2],[254,3],[254,3],[254,2],[254,3],[254,3],[254,3],[254,3],[254,2],[254,3],[254,3],[254,3],[254,3],[254,2],[252,0],[252,2],[267,1],[267,3],[256,2],[256,2],[268,0],[268,1],[269,2],[269,4],[269,2],[269,4],[273,2],[274,0],[274,1],[275,3],[278,3],[278,2],[277,1],[277,3],[279,1],[279,2],[279,3],[279,4],[279,5],[280,2],[281,2],[281,2],[282,0],[282,1],[282,1],[214,3],[214,4],[216,3],[216,3],[216,4],[216,4],[216,4],[216,5],[216,6],[216,4],[286,0],[286,1],[286,1],[288,2],[290,2],[290,4],[290,3],[287,1],[287,3],[289,1],[289,2],[289,3],[289,3],[289,3],[289,4],[289,3],[289,3],[289,4],[289,4],[289,4],[289,5],[289,5],[294,2],[294,1],[295,2],[295,3],[295,2],[292,5],[293,5],[293,5],[293,5],[293,5],[293,5],[293,6],[293,6],[293,6],[293,6],[293,6],[215,0],[215,1],[217,1],[302,1],[302,2],[303,1],[303,2],[303,2],[303,3],[304,4],[305,3],[305,4],[305,4],[299,0],[299,1],[301,2],[300,2],[300,2],[309,1],[310,1],[35,1],[35,3],[37,1],[37,1],[37,2],[37,1],[37,1],[37,1],[37,1],[38,4],[19,2],[19,4],[19,3],[19,4],[19,5],[19,5],[19,5],[317,2],[317,2],[317,1],[323,1],[323,2],[323,1],[323,2],[323,2],[323,2],[323,1],[318,1],[318,1],[318,1],[324,1],[324,1],[324,1],[329,4],[329,5],[332,5],[332,6],[332,5],[335,1],[335,1],[335,1],[335,1],[335,1],[335,1],[335,1],[335,1],[330,4],[330,3],[330,5],[333,5],[333,6],[333,5],[331,5],[331,3],[334,5],[334,6],[334,5],[320,3],[320,4],[326,4],[326,5],[326,4],[349,1],[349,1],[349,1],[349,1],[322,6],[322,3],[328,6],[328,5],[328,4],[328,6],[328,5],[328,4],[328,6],[328,5],[328,6],[328,5],[352,2],[352,2],[352,1],[352,1],[352,1],[352,1],[356,2],[356,2],[356,1],[356,1],[356,1],[360,2],[360,2],[361,2],[361,2],[354,2],[354,3],[357,3],[357,4],[357,3],[336,1],[336,3],[337,1],[337,3],[337,3],[337,5],[337,3],[337,5],[337,4],[337,3],[337,2],[337,2],[337,4],[319,0],[319,1],[325,1],[321,2],[321,2],[327,2],[192,6],[196,6],[196,6],[196,6],[196,6],[196,7],[196,3],[196,2],[196,2],[196,2],[366,1],[369,1],[372,1],[373,1],[367,1],[367,3],[370,1],[370,3],[370,3],[370,5],[376,3],[377,3],[377,2],[377,1],[378,1],[379,1],[380,1],[368,0],[368,2],[371,2],[371,2],[39,2],[20,2],[382,3],[385,3],[385,3],[307,0],[383,0],[383,1],[383,4],[386,1],[386,4],[386,4],[386,7],[387,1],[387,1],[387,1],[389,1],[389,2],[389,1],[389,1],[389,1],[389,1],[391,1],[391,1],[391,1],[63,1],[63,1],[63,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[394,1],[122,1],[122,2],[114,1],[114,1],[438,1],[438,1],[61,1],[61,1],[176,3],[176,2],[178,2],[440,3],[440,2],[441,2],[55,1],[55,1],[442,1],[442,1],[443,0],[443,2],[445,2],[155,0],[155,1],[154,0],[154,2],[156,2],[62,0],[62,3],[65,2],[65,3],[448,0],[448,2],[448,2],[316,0],[316,1],[449,1],[41,4],[450,4],[453,5],[455,2],[455,3],[455,4],[455,5],[455,5],[455,5],[454,1],[454,1],[454,1],[454,1],[456,1],[456,1],[457,1],[457,1],[459,1],[459,1],[460,1],[460,1],[458,2],[87,1],[87,1],[461,0],[461,1],[462,1],[134,3],[136,3],[136,3],[463,1],[463,3],[464,3],[464,5],[465,3],[466,1],[466,3],[44,1],[44,3],[45,1],[45,3],[45,3],[76,1],[76,3],[79,1],[79,3],[79,3],[444,1],[446,1],[451,1],[451,3],[452,1],[452,3],[452,3],[452,5],[467,3],[468,3],[468,3],[468,3],[468,1],[123,1],[123,3],[123,2],[469,1],[469,3],[470,1],[470,3],[374,1],[374,2],[375,1],[375,2],[153,1],[153,3],[241,1],[471,1],[471,3],[472,3],[472,5],[473,1],[473,3],[474,1],[474,3],[474,5],[474,3],[91,1],[475,1],[475,1],[101,1],[101,1],[101,2],[101,2],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,2],[476,0],[476,3],[477,0],[477,3],[477,5],[142,1],[142,2],[142,2],[142,2],[142,2],[142,4],[142,4],[142,4],[142,6],[142,2],[142,3],[142,3],[142,3],[142,3],[142,3],[142,6],[142,6],[142,5],[142,5],[142,6],[142,5],[142,3],[142,3],[142,3],[142,3],[142,3],[142,2],[142,3],[142,2],[142,3],[145,1],[145,3],[145,2],[145,2],[145,2],[145,2],[145,2],[145,2],[145,2],[145,2],[145,3],[145,4],[145,5],[145,4],[145,4],[145,4],[145,6],[145,6],[145,2],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,4],[145,3],[145,6],[145,6],[145,5],[145,5],[145,6],[145,6],[145,6],[145,6],[145,5],[145,4],[145,5],[145,5],[145,5],[145,5],[145,4],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,2],[145,3],[145,2],[145,3],[145,2],[145,3],[145,2],[145,3],[145,3],[145,4],[145,3],[145,3],[145,3],[480,1],[480,3],[489,1],[489,3],[489,3],[489,5],[489,3],[489,5],[489,4],[489,3],[489,2],[489,2],[489,4],[202,1],[202,3],[353,1],[353,3],[359,1],[312,1],[312,2],[312,2],[355,1],[358,1],[491,1],[491,1],[492,1],[271,1],[271,1],[495,1],[495,2],[495,3],[495,2],[496,2],[496,3],[496,4],[493,1],[493,1],[493,1],[494,1],[494,1],[497,1],[497,1],[478,0],[478,1],[230,1],[231,1],[498,1],[498,1],[499,1],[499,1],[500,2],[501,2],[501,2],[251,2],[251,2],[255,2],[255,2],[255,2],[502,1],[504,1],[503,1],[505,1],[506,0],[506,2],[507,2],[507,2],[508,0],[509,0],[479,3],[479,4],[484,3],[484,3],[224,2],[225,3],[510,1],[511,1],[512,1],[513,1],[514,1],[515,1],[516,1],[517,1],[518,1],[519,1],[520,1],[521,1],[522,1],[523,1],[296,0],[296,1],[296,1],[296,2],[296,2],[298,1],[298,1],[298,2],[298,2],[298,2],[363,4],[364,4],[364,4],[364,5],[364,7],[524,0],[524,1],[528,3],[526,2],[526,3],[526,3],[525,0],[525,2],[527,1],[527,3],[527,2],[529,0],[529,1],[531,5],[531,5],[530,2],[530,6],[530,5],[530,5],[530,5],[530,4],[533,0],[539,0],[540,3],[543,5],[543,4],[543,3],[543,3],[543,2],[532,1],[532,1],[534,0],[534,2],[534,2],[537,2],[537,2],[535,0],[535,3],[535,3],[538,2],[538,3],[538,3],[544,1],[544,1],[485,3],[485,3],[485,3],[482,2],[482,2],[482,2],[486,2],[486,2],[486,2],[486,2],[486,2],[486,2],[483,2],[483,4],[487,2],[487,4],[487,4],[487,3],[487,4],[487,3],[487,4],[487,4],[487,3],[487,4],[487,3],[488,1],[488,1],[545,1],[545,2],[546,1],[546,2],[546,3],[546,3],[546,2],[547,4],[548,2],[548,3],[548,4],[548,4],[548,3],[548,3],[548,4],[548,2],[548,3],[548,2],[548,3],[548,3],[548,4],[548,3],[548,4],[548,4],[548,5],[548,4],[548,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

     parser.suggestKeywords(['TABLE', 'VIEW']);
   
break;
case 4:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW', 'EXTERNAL']);
   
break;
case 8:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW']);
   
break;
case 14:

     parser.suggestSetOptions();
   
break;
case 38: case 47: case 242: case 246: case 559: case 679:

     parser.addTablePrimary($$[$0]);
   
break;
case 39: case 237:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyTables = true;
     }
   
break;
case 40:

     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 43: case 359:

     parser.suggestKeywords(['AS']);
   
break;
case 45: case 204: case 213: case 360: case 715: case 1162:

     parser.suggestKeywords(['SELECT']);
   
break;
case 48: case 247:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyViews = true;
     }
   
break;
case 49:

     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 59:

     parser.addNewDatabaseLocation(_$[$0-1], [{ name: $$[$0-1] }]);
   
break;
case 60: case 70:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 62:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 63:

     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 64:

     parser.addNewDatabaseLocation(_$[$0-2], [{ name: $$[$0-2] }]);
   
break;
case 65:

     if (!$$[$0]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 76:

     var keywords = [];
     if (!$$[$0-2] && !$$[$0-1]) {
       keywords.push({ value: 'LIKE', weight: 1 });
     } else {
       if (!$$[$0-1]) {
         keywords.push({ value: 'PARTITIONED BY', weight: 12 });
       }
       keywords.push({ value: 'AS', weight: 1 });
     }

     if (keywords.length > 0) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 77:

     parser.addNewTableLocation(_$[$0-1], $$[$0-1], $$[$0]);
     this.$ = $$[$0];
   
break;
case 82:
this.$ = [];
break;
case 84: case 676: case 696: case 909:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 86: case 222: case 224: case 341: case 511: case 644: case 647: case 842: case 845: case 931: case 984: case 1159:
this.$ = $$[$0-1];
break;
case 88: case 352:
this.$ = [$$[$0]];
break;
case 89:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 94: case 96:

     parser.checkForKeywords($$[$0-1]);
   
break;
case 95: case 97:

     parser.checkForKeywords($$[$0-3]);
   
break;
case 98:

     this.$ = $$[$0-2];
     this.$.type = $$[$0-1];
     var keywords = [];
     if (!$$[$0]['comment']) {
       keywords.push('COMMENT');
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 99: case 126: case 132: case 133: case 146: case 149: case 158: case 160:

     parser.suggestKeywords(parser.getColumnDataTypeKeywords());
   
break;
case 102:
this.$ = {};
break;
case 104:

     this.$ = {};
     this.$[$$[$0]] = true;
   
break;
case 105:

     $$[$0-1][$$[$0]] = true;
   
break;
case 110: case 111:
this.$ = 'null';
break;
case 112:
this.$ = 'comment';
break;
case 113:

     parser.suggestKeywords(['NULL']);
   
break;
case 131:

     parser.suggestKeywords(parser.getTypeKeywords());
   
break;
case 145: case 148:

     parser.suggestKeywords(['COMMENT']);
   
break;
case 167: case 1197:

     parser.suggestKeywords(['BY']);
   
break;
case 168:

     parser.suggestKeywords(['RANGE']);
   
break;
case 177: case 182: case 183:

     parser.suggestKeywords(['PARTITION']);
   
break;
case 189:

     parser.suggestKeywords(['VALUE', 'VALUES']);
   
break;
case 190:

     if ($$[$0].endsWithLessThanOrEqual) {
      parser.suggestKeywords(['VALUES']);
     }
   
break;
case 191: case 194: case 197:

     parser.suggestKeywords(['<', '<=']);
   
break;
case 192: case 874: case 877:

     parser.suggestKeywords(['VALUES']);
   
break;
case 195: case 198:

     parser.suggestFunctions();
   
break;
case 206:

     parser.commitLocations();
   
break;
case 208: case 256: case 280:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.suggestDatabases({ appendDot: true });
   
break;
case 209:

     if (!$$[$0-6]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 212:

     var keywords = [{value: 'AS', weight: 1 }];
     if (!$$[$0-1]) {
       keywords.push({ value: 'COMMENT', weight: 3 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 219:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 223: case 225:
this.$ = $$[$0-3];
break;
case 229:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestDatabases();
   
break;
case 230:

     parser.suggestKeywords(['CASCADE']);
   
break;
case 232:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 234: case 564:

     parser.addTablePrimary($$[$0-1]);
   
break;
case 236:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 239:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0-1]) {
       parser.suggestKeywords(['PURGE']);
     }
   
break;
case 243:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 244:

     parser.addTablePrimary($$[$0]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 251:

   parser.suggestKeywords(['STORAGE', 'LOCATION', 'FORMAT']);
 
break;
case 257: case 281:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 269:

   parser.suggestKeywords(['CREDENTIAL']);
 
break;
case 271:

   parser.suggestKeywords(['TYPE']);
 
break;
case 272:

   parser.suggestKeywords(['S3', 'NFS']);
 
break;
case 273:

   parser.suggestKeywords(['ENDPOINT']);
 
break;
case 275:

   parser.suggestKeywords(['REGION']);
 
break;
case 277:

   parser.suggestKeywords(['IDENTITY']);
 
break;
case 288:

   parser.suggestKeywords(['PATH']);
 
break;
case 289:

   parser.suggestKeywords(['EXTERNAL STORAGE']);
 
break;
case 291:

   parser.suggestKeywords(['EXTERNAL FORMAT']);
 
break;
case 298:

     $$[$0-2].owner = 'insert';
     parser.addTablePrimary($$[$0-2]);
   
break;
case 299:

     parser.suggestKeywords(['INTO']);
   
break;
case 300:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['TABLE']);
     }
     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 302:

     $$[$0-1].owner = 'insert';
     parser.addTablePrimary($$[$0-1]);
     parser.suggestKeywords(['VALUES']);
   
break;
case 313:

    parser.suggestKeywords(['TABLE']);
  
break;
case 314:

    parser.suggestTables();
    parser.suggestDatabases({ appendDot: true });
  
break;
case 315:

    parser.suggestKeywords(['FROM', 'SOURCE FIELDS']);
  
break;
case 317: case 324:

    parser.suggestKeywords(['EXTERNAL LOCATION']);
  
break;
case 318: case 325:

    parser.suggestExternalLocations();
  
break;
case 319: case 326:

    parser.suggestKeywords(['EXTERNAL FORMAT']);
  
break;
case 320: case 327:

    parser.suggestExternalFormats();
  
break;
case 322:

    parser.suggestKeywords(['FROM']);
  
break;
case 331:

    parser.suggestKeywords(['(']);
  
break;
case 340: case 513:
this.$ = $$[$0-2];
break;
case 342:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 343: case 344: case 355:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 350: case 366: case 390: case 466: case 470: case 508: case 518: case 545: case 695: case 1084: case 1086: case 1141: case 1196: case 1271:
this.$ = $$[$0];
break;
case 353:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 357:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 358:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 362:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 363: case 371:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 374:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 375: case 477:

     parser.suggestSelectListAliases();
   
break;
case 376:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 377:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 387: case 690: case 899: case 902: case 903: case 928: case 929: case 950: case 953:

     parser.suggestColumns();
   
break;
case 392: case 393: case 399: case 400: case 927: case 1155: case 1198:

     parser.valueExpressionSuggest();
   
break;
case 404:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 405:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 409:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 410:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 411:
this.$ = { joinType: $$[$0] };
break;
case 412:
this.$ = { joinType: $$[$0-1] };
break;
case 413:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 414:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 417:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 422:
this.$ = 'CROSS JOIN';
break;
case 423:
this.$ = 'FULL JOIN';
break;
case 424:
this.$ = 'FULL OUTER JOIN';
break;
case 425:
this.$ = 'INNER JOIN';
break;
case 426:
this.$ = 'JOIN';
break;
case 427:
this.$ = 'LEFT INNER JOIN';
break;
case 428:
this.$ = 'LEFT JOIN';
break;
case 429:
this.$ = 'LEFT OUTER JOIN';
break;
case 430:
this.$ = 'LEFT SEMI JOIN';
break;
case 431:
this.$ = 'OUTER JOIN';
break;
case 432: case 434:
this.$ = 'RIGHT OUTER JOIN';
break;
case 433:
this.$ = 'RIGHT JOIN';
break;
case 435:
this.$ = 'RIGHT SEMI JOIN';
break;
case 436:
this.$ = 'SEMI JOIN';
break;
case 437: case 439: case 440: case 442: case 443: case 444: case 445: case 447: case 448: case 449: case 450:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 438: case 441: case 446:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 451:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 452:
this.$ = { valueExpression: $$[$0] };
break;
case 456:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 463:

     parser.suggestKeywords([{ value: '10', weight: 10000 }, { value: '100', weight: 10000 }, { value: '1000', weight: 10000 }, { value: '5000', weight: 10000 }, { value: '10000', weight: 10000 }])
   
break;
case 467:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 468:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 472:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 473: case 474: case 475:
this.$ = { emptyOrderBy: false };
break;
case 476:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 478:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 479:
this.$ = { suggestKeywords: ['ASC', 'DESC'] };;
break;
case 482:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 483:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 484:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 485:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 486:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 487:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 488:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 489:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 490:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 491:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 495: case 496:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 497:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 498:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 499:
this.$ = [ $$[$0] ];
break;
case 500:

     $$[$0-2].push($$[$0]);
   
break;
case 502: case 503:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 505:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 506:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 507:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 509: case 510: case 512:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 514:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push($$[$0-1].function && $$[$0-1].types && $$[$0-1].types.length && $$[$0-1].types[0] === 'UDFREF' ? { name: $$[$0].alias, udfRef: $$[$0-1].function, types: $$[$0-1].types } : { name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 515:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 516:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 517:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 519:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 520:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 521:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 523:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 525:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 526:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 527:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 528:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 529:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 540:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 541:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 546:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 547:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 560:

     parser.suggestKeywords(['TABLE']);
   
break;
case 561:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 565:

     parser.addTablePrimary($$[$0-1]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 567:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 574:

     parser.suggestKeywords(['OVER']);
   
break;
case 583:

     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 584: case 602:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 585:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 586: case 600:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 587:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].activePosition);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 596:

     parser.addFunctionArgumentLocations($$[$0-3], [{
       expression: { text: $$[$0-1] },
       location: _$[$0-1]
     }]);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] }
   
break;
case 597: case 603:

     this.$ = { function: $$[$0-2], types: ['UDFREF'] }
   
break;
case 598:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] }
   
break;
case 599:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 601:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 604:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 605:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 606:

     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 607:

    this.$ = { function: $$[$0-2], types: ['UDFREF'] }
  
break;
case 608:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     this.$ = {
       function: $$[$0-3],
       expression: $$[$0-1].expressions[$$[$0-1].expressions.length - 1].expression,
       types: ['UDFREF']
     }
   
break;
case 609:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 610:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-2].expressions);
     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 611:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].activePosition);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 616:

     var expression = $$[$0-3];
     parser.extractExpressionText(expression, $$[$0-3], $$[$0-2], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-5], [{
       expression: expression,
       location: {
         first_line: _$[$0-3].first_line,
         last_line: _$[$0-1].last_line,
         first_column: _$[$0-3].first_column,
         last_column: _$[$0-1].last_column
       }
     }]);
     this.$ = { types: [ $$[$0-1].toUpperCase() ] }
   
break;
case 617: case 622: case 623: case 1090:
this.$ = { types: [ 'T' ] };
break;
case 618:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 619: case 620:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 621:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 624:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 625:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 626: case 627:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 628:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     if ($$[$0-1].lastLoc && $$[$0-1].lastLoc.location) {
       $$[$0-1].lastLoc.type = 'function';
       $$[$0-1].lastLoc.function = fn;
       $$[$0-1].lastLoc.location = {
         first_line: $$[$0-1].lastLoc.location.first_line,
         last_line: $$[$0-1].lastLoc.location.last_line,
         first_column: $$[$0-1].lastLoc.location.first_column,
         last_column: $$[$0-1].lastLoc.location.last_column - 1
       }
       if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
          $$[$0-1].firstLoc.type = 'database';
       } else {
         delete $$[$0-1].lastLoc.identifierChain;
       }
     }
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: fn, expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: fn, types: ['UDFREF'] }
     }
   
break;
case 629:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expressions && $$[$0].expressions.length) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
    } else {
      this.$ = { function: $$[$0-1], types: ['UDFREF'] }
    }
  
break;
case 632:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 633:
this.$ = { types: [ 'NULL' ], text: $$[$0] };
break;
case 634:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].activePosition);
     }
     this.$ = { function: fn, types: ['UDFREF'] };
   
break;
case 635: case 641: case 642:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].activePosition);
     }
     this.$ = { function: $$[$0-1], types: ['UDFREF'] };
   
break;
case 638:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 639: case 640:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: $$[$0-1], types: ['UDFREF'] }
     }
   
break;
case 645:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }]
     }
   
break;
case 646:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = $$[$0-3];
   
break;
case 648: case 650:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0], location: _$[$0] }]
     }
   
break;
case 649: case 651:

     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: $$[$0], location: _$[$0] }])
     }
   
break;
case 652:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0-2], location: _$[$0-2] }].concat($$[$0].expressions)
     }
   
break;
case 653:

     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: $$[$0-2], location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 654:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: { text: '' }, location: _$[$0] }])
     }
   
break;
case 655:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: { text: '' }, location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 656:

     parser.suggestValueExpressionKeywords($$[$0-3].expressions[$$[$0-3].expressions.length - 1].expression);
     this.$ = {
       activePosition: $$[$0-3].activePosition,
       expressions: $$[$0-3].expressions.concat($$[$0].expressions)
     }
   
break;
case 657:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 658:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 659:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 660:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-3] }, { expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 672:

     parser.suggestKeywords([ 'WHERE' ]);
   
break;
case 673:

     parser.suggestKeywords([ 'SET' ]);
   
break;
case 689:

     parser.suggestKeywords([ '=' ]);
   
break;
case 698:

     if (! parser.yy.cursorFound) {
       parser.yy.result.useDatabase = $$[$0];
     }
   
break;
case 699: case 918:

     parser.suggestDatabases();
   
break;
case 701: case 702:

     return parser.yy.result;
   
break;
case 703:

     parser.prepareNewStatement();
   
break;
case 705: case 707: case 709:

     parser.addStatementLocation(_$[$0]);
   
break;
case 708: case 710:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 714:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 843: case 846: case 932:
this.$ = '';
break;
case 858: case 861:

     parser.yy.correlatedSubQuery = false;
   
break;
case 859: case 863:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 862:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 873: case 875: case 876: case 878:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 907: case 933:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 908: case 934:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 910: case 915:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 911: case 936:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 912:
this.$ = [{ name: $$[$0] }];
break;
case 913:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 914:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 935:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 938:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 941:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 942: case 1107:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 944:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 945:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 946:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 947:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 948:
this.$ = [ $$[$0].identifier ];
break;
case 949:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 951:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 952:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 954:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 975: case 976:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 977: case 1002:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 978:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 979: case 980: case 981:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 982:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 983:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 985: case 986: case 987: case 988:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 989: case 990: case 991: case 992: case 1022: case 1080: case 1081:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 993:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 994:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 995: case 996:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 997: case 998: case 999:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1000:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1001:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1003:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1005:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1006: case 1008:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 1007:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1009:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1010:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 1011:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 1012:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1013:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 1014:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1015:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1016:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1017: case 1018: case 1019:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1020:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1021:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 1023:

     this.$ = $$[$0-1];
   
break;
case 1024:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 1025:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1026: case 1027: case 1028:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1029: case 1030: case 1031: case 1032:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0]);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1033: case 1035:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1034:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 1036:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 1037: case 1038: case 1039: case 1040:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 1041:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1042:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1043: case 1044:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 1045: case 1046:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 1047:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 1048:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 1049:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1050:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1051: case 1057:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1052:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1053:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 1054:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 1055:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1056:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1058:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1059: case 1061: case 1063: case 1065:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 1060: case 1064:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1062: case 1066:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 1067: case 1068:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1069: case 1070: case 1071:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1072: case 1073: case 1074:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1075: case 1076: case 1077:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1078:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1079:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1082:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1083:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1085:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1087:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1088:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 1089:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1091: case 1093:

     $$[$0].position = 1;
   
break;
case 1092:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 1094:

     $$[$0-2].position += 1;
   
break;
case 1095:

     $$[$0-2].position = 1;
   
break;
case 1096:

     $$[$0-4].position += 1;
   
break;
case 1097:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 1098:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 1099:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 1100: case 1101:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 1102: case 1103:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 1106:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 1113:

     parser.suggestValues($$[$0]);
   
break;
case 1114:
this.$ = { types: [ 'NUMBER' ], text: $$[$0] };
break;
case 1120: case 1122: case 1123:
this.$ = $$[$0-1] + $$[$0];
break;
case 1121: case 1124:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1125:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1126:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: "'" + $$[$0] + "'" }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 1127:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: '"' + $$[$0] + '"' }
     } else {
       this.$ = { types: [ 'STRING' ], text: '"' + $$[$0] + '"' }
     }
   
break;
case 1128:
this.$ = { types: [ 'BOOLEAN' ], text: $$[$0] };
break;
case 1129:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1130:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1137:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 1144:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1145:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1146:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 1147:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 1157:

     parser.pushQueryState();
   
break;
case 1158:

     parser.popQueryState();
   
break;
case 1160:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 1163:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 1180: case 1181: case 1182: case 1183:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 1190: case 1191:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 1192:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 1193:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 1202:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 1203:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 1209:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 1210:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 1215:

    lexer.popState();
  
break;
case 1216:

    lexer.begin('hdfs');
  
break;
case 1218:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 1219:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 1220:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 1221:

     parser.suggestHdfs({ path: '' });
   
break;
case 1222:

      parser.suggestHdfs({ path: '' });
    
break;
case 1228:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 1229: case 1234:

     parser.suggestKeywords(['ROW']);
   
break;
case 1233:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 1235:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 1239:
this.$ = { inValueEdit: true };
break;
case 1240:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 1241: case 1242: case 1243:

     this.$ = { suggestKeywords: ['NOT'] }
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1247: case 1248: case 1249:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 1250:

     this.$ = parser.findCaseType($$[$0-1])
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1251:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1252:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 1253:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1254:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1255:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 1256:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1257:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 1258:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 1259:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1260:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1261:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 1262:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 1265:

     this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] }
     parser.extractExpressionText(this.$, $$[$0]);
   
break;
case 1266:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1270:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 1272:

     this.$ = $$[$0]
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1273:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 1274:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1275:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1276: case 1277:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 1278:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1279:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 1280:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1281:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 1282: case 1284:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1283:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1285:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 1286:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1287:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1288: case 1289: case 1290: case 1291:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
}
},
table: [o($V0,$V1,{382:1,307:2}),{1:[3]},o($V2,$V3,{383:3,387:4,21:5,190:6,48:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,38:21,39:22,191:23,192:24,213:25,214:26,40:27,46:28,159:31,160:32,193:37,4:$V4,8:$V5,12:$V6,18:$V7,161:$V8,197:$V9,203:$Va,219:$Vb,285:$Vc,315:$Vd,365:$Ve,381:$Vf}),{384:[1,43],388:[1,44]},o($V2,[2,705]),o($V2,[2,711]),o($V2,[2,712]),o($V2,[2,713]),o($V2,[2,17]),o($V2,[2,18]),o($V2,[2,19]),o($V2,[2,20]),o($V2,[2,21]),o($V2,[2,22]),o($V2,[2,23]),o($V2,[2,24]),o($V2,[2,25]),o($V2,[2,26]),o($V2,[2,27]),o($V2,[2,28]),{34:[1,45],35:46,63:47,67:$Vg,117:$Vh,272:$Vi,391:50,392:$Vj,393:$Vk},o($V2,[2,31]),o($V2,[2,32]),o($V2,[2,293]),o($V2,[2,294]),{83:[1,55],214:54,285:$Vc},o($Vl,$Vm,{215:56,302:57,304:58,306:$Vn}),{41:60,129:[1,61]},{47:[1,62]},{43:[1,65],51:[1,66],61:63,67:[1,64],162:[1,67],409:$Vo,427:$Vp},{43:[1,72],51:[1,73],61:70,67:[1,71],409:$Vo,427:$Vp},o($V2,[2,248]),o($V2,[2,249]),o($V2,[2,250]),{43:[1,74]},{43:[1,75]},{63:76,67:$Vg,117:$Vh,272:$Vi,391:50,392:$Vj,393:$Vk},o($V2,[2,295]),{63:82,67:$Vg,117:$Vh,123:81,272:$Vi,366:77,372:78,374:79,391:50,392:$Vj,393:$Vk,402:$Vq,469:80},{63:82,67:$Vg,117:$Vh,123:86,220:84,222:85,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},o([58,59,67,83,99,100,111,116,117,272,297,311,313,314,315,338,339,340,341,342,343,344,345,346,347,348,350,351,392,393,395,396,399,402,406,414,433,434],$Vr,{286:87,34:$Vs,291:$Vt}),{43:[1,90],51:[1,91]},{198:[1,92]},{1:[2,700]},o($V0,$V1,{307:93}),o($V2,[2,29]),{36:[1,94],311:[1,95]},o($Vu,[2,550]),o($Vv,[2,723]),o($Vv,[2,724]),o($Vv,[2,725]),o($Vv,[2,720]),o($Vv,[2,721]),o($Vv,[2,722]),o($Vl,$Vm,{302:57,304:58,215:96,306:$Vn}),{48:97,213:25,214:26,219:$Vb,285:$Vc},o($Vl,[2,341]),o($Vl,[2,531],{304:98,306:$Vn}),o($Vw,[2,533]),o([34,285,291],$V1,{307:99}),o($V2,[2,33]),{83:[1,100]},{48:101,213:25,214:26,219:$Vb,285:$Vc},o($Vx,$Vy,{62:102,350:$Vz}),{63:104,67:$Vg,117:$Vh,272:$Vi,391:50,392:$Vj,393:$Vk},o($VA,$Vy,{62:105,350:$Vz}),o($VA,$Vy,{62:106,350:$Vz}),{166:[1,107],183:[1,108]},o($VB,[2,840]),o($VB,[2,841]),o($VA,$VC,{154:109,350:$VD}),{63:111,67:$Vg,117:$Vh,272:$Vi,391:50,392:$Vj,393:$Vk},o($VA,$VC,{154:112,350:$VD}),o($VA,$VC,{154:113,350:$VD}),{44:114,63:82,67:$Vg,117:$Vh,123:115,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},o($VA,$VC,{154:116,350:$VD}),o($V2,[2,698]),{18:[1,117]},{18:[2,677]},{18:[2,679]},{18:[2,937],63:82,67:$Vg,117:$Vh,123:118,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},o($VE,[2,933],{311:[1,119]}),o($VF,[2,930]),{60:[1,120],402:[1,121]},o([83,285],[2,350],{89:[1,122]}),o($VG,[2,352]),{47:[1,123]},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:126,176:164,271:156,272:$Vi,287:124,294:125,297:$VO,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($Vb1,[2,493]),o($Vb1,[2,494]),{44:182,63:82,67:$Vg,117:$Vh,123:115,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{44:183,63:82,67:$Vg,117:$Vh,123:115,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},o($VA,[2,307],{199:184,43:[1,185]}),o($V2,$V3,{387:4,21:5,190:6,48:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,38:21,39:22,191:23,192:24,213:25,214:26,40:27,46:28,159:31,160:32,193:37,383:186,4:$V4,8:$V5,12:$V6,18:$V7,161:$V8,197:$V9,203:$Va,219:$Vb,285:$Vc,315:$Vd,365:$Ve,381:$Vf}),{37:187,55:190,58:$VH,59:$VI,63:188,67:$Vg,100:[1,193],117:$Vh,176:197,271:194,272:$Vi,311:$VP,312:189,313:[1,191],314:[1,192],391:50,392:$Vj,393:$Vk,396:[1,195],433:$V91,434:$Va1,440:198,490:[1,196],495:162,496:163},{63:199,67:$Vg,117:$Vh,272:$Vi,391:50,392:$Vj,393:$Vk},o($Vl,[2,339]),{85:[1,200]},o($Vw,[2,534]),{34:$Vs,285:$Vr,286:201,291:$Vt},{63:82,67:$Vg,91:204,117:$Vh,123:158,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq,451:202,467:203},o($V2,[2,41]),o($V2,[2,58],{391:50,63:205,67:$Vg,117:$Vh,272:$Vi,392:$Vj,393:$Vk}),{99:[1,206]},o($V2,[2,67]),{63:82,67:$Vg,68:207,70:208,76:209,117:$Vh,123:210,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{63:82,67:$Vg,76:211,117:$Vh,123:210,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},o($VA,$Vy,{62:212,350:$Vz}),o($VA,$Vy,{62:213,350:$Vz}),{63:82,67:$Vg,117:$Vh,123:214,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{414:[1,215]},o($V2,[2,233]),{44:216,63:82,67:$Vg,117:$Vh,123:115,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{44:217,63:82,67:$Vg,117:$Vh,123:115,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{204:[1,218],206:[1,219]},o($Vc1,[2,907],{311:[1,220]}),{44:221,63:82,67:$Vg,117:$Vh,123:115,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{63:82,67:$Vg,91:150,117:$Vh,123:158,153:225,272:$Vi,367:222,376:223,378:224,391:50,392:$Vj,393:$Vk,402:$Vq,471:226},{18:[2,938]},{63:82,67:$Vg,117:$Vh,123:227,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{402:[1,228]},o($VF,[2,932]),{63:82,67:$Vg,117:$Vh,123:86,222:229,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{83:[1,230]},o($Vw,[2,482],{288:231,226:233,89:[1,232],204:[1,234]}),o($Vd1,[2,499]),o($Vd1,$Ve1,{391:50,63:82,176:197,440:198,296:235,482:249,123:250,55:251,36:$Vf1,47:$Vg1,58:$VH,59:$VI,67:$Vg,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,117:$Vh,146:$Vl1,272:$Vi,297:$Vm1,392:$Vj,393:$Vk,396:$Vn1,400:$Vo1,401:$Vp1,402:$Vq,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),o($Vd1,[2,515]),o($Vw1,[2,974]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:256,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:257,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:258,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:259,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{83:$Vx1,479:260},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:262,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:264,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,436:$Vy1,440:165,471:141,483:263,491:149,493:157,495:162,496:163,497:166,545:265,547:266},o($Vw1,[2,632],{354:268,83:$Vz1}),{83:$Vz1,354:270},o($Vw1,[2,630]),o($Vw1,[2,631]),o($Vw1,[2,633]),o($VA1,[2,1106],{311:[1,271]}),{83:[2,612]},{83:[2,613]},{83:[2,614]},{83:[2,615]},o($Vw1,[2,661],{319:272,321:273,362:$VB1}),{321:275,362:$VB1},o($Vw1,[2,569]),o($Vw1,[2,1112]),o($VC1,[2,944]),o($VD1,[2,577]),o($VD1,[2,578]),o($VD1,[2,579]),{83:[1,276]},{83:[1,277]},o($Vw1,[2,1114]),o($Vw1,[2,1115]),o([36,47,54,58,59,67,81,83,85,89,99,111,112,113,116,117,133,146,204,234,245,258,259,260,261,262,263,264,265,270,272,276,283,284,297,306,308,311,384,388,392,393,396,400,401,402,403,404,405,407,410,411,412,413,415,418,419,420,421,423,424,426,428,429,430,431,432,435,436,481],[2,954]),{83:[1,278]},{83:[1,279]},{83:[1,280]},o($Vw1,[2,1117]),o($Vw1,[2,1118]),o($Vw1,[2,1126]),o($Vw1,[2,1127]),o($Vw1,[2,1128]),{83:[2,588]},{83:[2,589]},{83:[2,590]},{83:[2,591]},{83:[2,592]},{83:[2,593]},{83:[2,594]},{83:[2,595]},o($Vw1,[2,1119],{311:[1,281]}),{433:[1,282],434:[1,283]},{433:[1,284]},{58:[1,286],60:[1,285]},{59:[1,288],60:[1,287]},o($Vw1,[2,1131]),o($Vw1,[2,1132]),{129:[2,38]},{47:[2,47]},{44:289,63:82,67:$Vg,117:$Vh,123:115,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},o($VA,[2,308]),o($V2,[2,706]),o($V2,[2,30]),o($V2,[2,552]),o($V2,[2,553],{391:50,63:290,67:$Vg,117:$Vh,272:$Vi,392:$Vj,393:$Vk}),o($V2,[2,555]),o($V2,[2,556]),o($V2,[2,557]),o($V2,[2,558]),o($Vx,[2,1109]),{271:291,311:$VP,433:$V91,434:$Va1,495:162,496:163},{271:292,311:$VP,433:$V91,434:$Va1,495:162,496:163},o($VE1,[2,848]),o($VE1,[2,849]),o($Vu,[2,551]),o($Vl,$Vm,{302:57,304:58,215:293,306:$Vn}),{214:294,285:$Vc},{85:[1,295],89:[1,296]},o($VF1,[2,919]),{36:[1,297]},o($V2,$VG1,{64:298,52:299,53:300,54:$VH1}),{414:[1,302]},o($V2,[2,68]),o($VI1,[2,164],{71:303,128:304,129:[1,305]}),o($VJ1,[2,80],{77:306,80:307,81:[1,308],83:$VK1}),o($VL1,[2,912],{311:[1,310]}),o($VM1,[2,216],{148:311,150:312,83:[1,313]}),{63:82,67:$Vg,76:315,117:$Vh,123:210,167:314,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{63:82,67:$Vg,76:317,117:$Vh,123:210,184:316,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},o($V2,[2,855],{155:318,447:[1,319]}),o($VA,[2,858]),o($V2,[2,240],{157:320,158:[1,321]}),o($V2,[2,242]),{204:$VN1,205:322},{207:[1,324]},{63:82,67:$Vg,117:$Vh,123:325,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},o($V2,[2,559]),o($VO1,[2,694],{368:326,89:[1,327],204:[1,328]}),o($VP1,[2,681]),{36:[1,329]},{36:[2,691]},o($VQ1,[2,941],{311:[1,330]}),o($VE,[2,934]),o($VF,[2,931]),o($VG,[2,353]),o($VR1,$VS1,{224:331,508:332}),o($Vw,[2,483]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:126,176:164,271:156,272:$Vi,294:333,297:$VO,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($VT1,$VU1,{292:334,299:335,301:336,308:$VV1}),{44:345,63:82,67:$Vg,83:$Vx1,117:$Vh,123:115,227:338,230:339,251:341,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq,479:346,498:340,500:342,502:343,503:344},o($Vd1,[2,514]),o($VW1,[2,1133],{478:347,99:[1,348]}),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:349,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:350,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:351,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:352,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{81:$Vh1,403:[1,354],418:[1,353],423:$Vu1,424:$Vv1,482:355},{83:[1,356]},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:357,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:358,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:359,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:360,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:361,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:362,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($Vw1,[2,1000]),o($VX1,[2,1180]),o($VX1,[2,1181]),{55:364,58:$VH,59:$VI,63:82,67:$Vg,117:$Vh,123:363,176:197,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq,440:198},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:365,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:366,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:367,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($VY1,[2,975],{482:249,36:$Vf1,81:$Vh1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,401:$Vp1,418:$Vr1,420:$Vs1,423:$Vu1,424:$Vv1}),o($VY1,[2,976],{482:249,36:$Vf1,81:$Vh1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,401:$Vp1,418:$Vr1,420:$Vs1,423:$Vu1,424:$Vv1}),o($VY1,[2,977],{482:249,36:$Vf1,81:$Vh1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,401:$Vp1,418:$Vr1,420:$Vs1,423:$Vu1,424:$Vv1}),o($VZ1,[2,978],{482:249}),o($Vw1,[2,983]),o($VR1,$VS1,{508:332,479:346,224:368,503:369,83:$Vx1}),{36:$Vf1,81:$Vh1,85:[1,370],99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1,482:249},o($Vw1,[2,1002]),{36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1,436:$Vy1,482:249,483:371,545:265,547:266},{412:[1,373],413:[1,372],436:$Vy1,547:374},o($V_1,[2,1265]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:375,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($Vw1,[2,628]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,85:[1,376],91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:378,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,336:377,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($Vw1,[2,629]),{63:82,67:$Vg,91:380,117:$Vh,123:158,272:$Vi,297:[1,379],391:50,392:$Vj,393:$Vk,402:$Vq},o($Vw1,[2,567]),o($Vw1,[2,662]),{63:82,67:$Vg,83:[1,383],117:$Vh,123:381,272:$Vi,363:382,391:50,392:$Vj,393:$Vk,402:$Vq},o($Vw1,[2,568]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,85:[1,384],91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:378,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,336:385,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,85:[1,387],91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:386,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o([58,59,67,83,85,99,100,111,116,117,272,311,313,314,315,338,339,340,341,342,343,344,345,346,347,348,350,351,392,393,395,396,399,402,406,414,433,434],$Vr,{286:388,34:$Vs,291:$Vt}),o($V$1,$Vr,{286:391,34:$Vs,85:[1,390],291:$Vt,297:[1,389]}),o($V$1,$Vr,{286:392,34:$Vs,85:[1,393],291:$Vt}),o($Vw1,[2,1120],{433:[1,394],434:[1,395]}),o($Vw1,[2,1122]),{433:[1,396]},o($Vw1,[2,1123]),{58:[1,397]},o($V02,[2,843]),{59:[1,398]},o($V12,[2,846]),{144:[1,399]},o($V2,[2,554]),o($Vx,[2,1110]),o($Vx,[2,1111]),o($Vl,[2,340]),o($Vw,[2,539]),o($V2,[2,870]),{63:82,67:$Vg,91:204,117:$Vh,123:158,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq,467:400},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:401,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($V2,[2,59]),o($V2,[2,65]),o([47,85,89,113,384,388],[2,51]),{55:402,58:$VH,59:$VI,176:197,440:198},o([67,117,272,384,388,392,393,402],[2,861]),o($V2,[2,202],{72:403,47:[1,404]}),o($VI1,[2,165]),{130:[1,405]},o($VJ1,[2,77]),o($VJ1,[2,81]),{44:406,63:82,67:$Vg,117:$Vh,123:115,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{63:82,67:$Vg,84:407,88:408,91:409,117:$Vh,123:158,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{63:82,67:$Vg,117:$Vh,123:410,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{47:$VG1,52:411,53:300,54:$VH1},o($VM1,[2,217]),{63:82,67:$Vg,91:150,117:$Vh,123:158,151:412,153:413,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq,471:226},o($V2,[2,255]),{169:[1,414]},o($V2,[2,279]),{186:[1,415]},o($V2,[2,226]),o($V2,[2,856]),o($V2,[2,234]),o($V2,[2,241]),{162:[1,416]},{83:[1,417]},{206:[1,419],208:418},o($Vc1,[2,908]),o($V2,$VU1,{301:336,299:420,308:$VV1}),{63:82,67:$Vg,91:150,117:$Vh,123:158,153:225,272:$Vi,376:421,378:224,391:50,392:$Vj,393:$Vk,402:$Vq,471:226},{44:345,63:82,67:$Vg,83:$Vx1,117:$Vh,123:115,230:422,251:341,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq,479:346,498:340,500:342,502:343,503:344},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:424,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,379:423,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{63:82,67:$Vg,91:380,117:$Vh,123:158,272:$Vi,297:[1,425],391:50,392:$Vj,393:$Vk,402:$Vq},{85:[1,426]},{48:434,213:25,214:26,219:$Vb,285:$Vc,510:427,512:428,514:429,516:430,518:431,520:432,522:433},o($Vd1,[2,500]),o($Vw,[2,495]),o($V22,[2,372],{232:435,233:436,234:[1,437]}),o($VT1,[2,544]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:439,176:164,271:156,272:$Vi,309:438,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o([85,234,245,270,276,306,308,384,388],[2,362],{89:[1,440]}),o($V32,[2,365]),o($V32,[2,1135]),o($V32,[2,1137],{248:441,250:442,258:$V42,259:$V52,260:$V62,261:$V72,262:$V82,263:$V92,264:$Va2,265:$Vb2}),o($V32,[2,1138]),o($Vc2,$Ve1,{391:50,63:82,176:197,440:198,123:250,55:251,296:451,47:$Vg1,58:$VH,59:$VI,67:$Vg,117:$Vh,272:$Vi,392:$Vj,393:$Vk,402:$Vq}),o($Vc2,$Ve1,{391:50,63:82,176:197,440:198,123:250,55:251,296:452,47:$Vg1,58:$VH,59:$VI,67:$Vg,117:$Vh,272:$Vi,392:$Vj,393:$Vk,402:$Vq}),o($Vd2,[2,1149]),o($Vd2,[2,1151]),{100:[1,453],291:[1,456],313:[1,454],314:[1,455]},o($VW1,[2,1134]),o($Ve2,[2,985],{482:249,81:$Vh1,297:$Vm1,396:$Vn1,401:$Vp1,418:$Vr1,420:$Vs1,423:$Vu1,424:$Vv1}),o($Ve2,[2,986],{482:249,81:$Vh1,297:$Vm1,396:$Vn1,401:$Vp1,418:$Vr1,420:$Vs1,423:$Vu1,424:$Vv1}),o($Ve2,[2,987],{482:249,81:$Vh1,297:$Vm1,396:$Vn1,401:$Vp1,418:$Vr1,420:$Vs1,423:$Vu1,424:$Vv1}),o($Ve2,[2,988],{482:249,81:$Vh1,297:$Vm1,396:$Vn1,401:$Vp1,418:$Vr1,420:$Vs1,423:$Vu1,424:$Vv1}),{83:[1,457]},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:458,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($Vw1,[2,1001]),o($VR1,$VS1,{391:50,63:82,352:128,353:136,349:137,317:138,355:139,471:141,318:146,320:147,322:148,491:149,91:150,329:151,330:152,331:153,271:156,493:157,123:158,335:159,495:162,496:163,176:164,440:165,497:166,508:332,224:459,480:460,142:461,58:$VH,59:$VI,67:$Vg,83:$VJ,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,350:$V21,351:$V31,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1}),{36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1,481:[1,462],482:249},o($Vf2,[2,995],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,423:$Vu1,424:$Vv1}),o($Vf2,[2,996],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,423:$Vu1,424:$Vv1}),o($VZ1,[2,997],{482:249,81:$Vh1,418:$Vr1,420:$Vs1,423:$Vu1,424:$Vv1}),o($VZ1,[2,998],{482:249,81:$Vh1,418:$Vr1,420:$Vs1,423:$Vu1,424:$Vv1}),o($VZ1,[2,999],{482:249,81:$Vh1,418:$Vr1,420:$Vs1,423:$Vu1,424:$Vv1}),o($VX1,[2,1182]),o($VX1,[2,1183]),o($VZ1,[2,1241],{482:249}),o($VZ1,[2,1242],{482:249}),o($VZ1,[2,1243],{482:249}),{85:[1,463]},{47:$Vg1,55:251,58:$VH,59:$VI,63:82,67:$Vg,85:$Ve1,117:$Vh,123:250,176:197,272:$Vi,296:464,391:50,392:$Vj,393:$Vk,402:$Vq,440:198},o($Vw1,[2,984]),o($Vw1,[2,1003]),o($Vw1,[2,1250]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:465,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($V_1,[2,1266]),{36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1,430:[1,466],482:249},o($Vw1,[2,643]),{85:[1,467],89:$Vg2},o($VF1,[2,648],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),o($VA1,[2,1107]),o($VC1,[2,945]),o($Vw1,[2,664]),o($Vw1,[2,665]),o($Vh2,[2,1194],{524:469,528:470,129:[1,471]}),{362:[2,607]},{85:[1,472],89:$Vg2},{36:$Vf1,47:[1,473],81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1,482:249},o($Vw1,[2,617]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,85:[1,474],91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:378,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,336:475,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{85:[1,476]},o($VD1,[2,597]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:378,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,336:477,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:478,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($VD1,[2,603]),o($Vw1,[2,1121]),{433:[1,479]},o($Vw1,[2,1124]),o($V02,[2,842]),o($V12,[2,845]),{83:$Vi2,200:480,201:481},o($VF1,[2,920]),o($VF1,[2,925],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),o([47,54,85,89,99,100,113,384,388],[2,52]),o($V2,[2,72]),o($VR1,[2,206],{147:483}),{131:484,133:[1,485]},o($VJ1,[2,82]),{85:[1,486],89:[1,487]},o($VF1,[2,88]),{92:488,101:489,102:490,103:491,104:492,105:493,106:494,107:495,111:$Vj2,116:$Vk2,117:$Vl2,404:$Vm2,405:$Vn2,407:$Vo2,410:$Vp2,411:$Vq2,415:$Vr2,419:$Vs2,428:$Vt2,429:$Vu2,431:$Vv2,432:$Vw2,435:$Vx2},o($VL1,[2,913]),{47:[1,511]},{85:[1,512],89:[1,513]},o($VF1,$VG1,{53:300,52:514,54:$VH1}),{63:516,67:$Vg,117:$Vh,170:515,272:$Vi,391:50,392:$Vj,393:$Vk},{58:$VH,176:518,187:517},{183:[1,519]},{58:$VH,176:521,211:520},{204:[1,522]},{207:[1,523]},o($V2,[2,667]),o($VP1,[2,682]),o($VO1,[2,695]),o($VP1,[2,687]),o($VP1,[2,692],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),o($VQ1,[2,942]),o($VG,[2,358]),{85:[2,1163]},{85:[2,1165]},{85:[2,1167]},{85:[2,1169]},{85:[2,1171]},{85:[2,1173]},{85:[2,1175]},{85:[2,1177]},o($Vy2,[2,401],{243:524,244:525,245:[1,526]}),o($V22,[2,373]),{130:[1,527]},o($VT1,[2,545]),o($VT1,[2,548],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),{44:345,63:82,67:$Vg,83:$Vx1,117:$Vh,123:115,230:528,251:341,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq,479:346,498:340,500:342,502:343,503:344},o($V32,[2,1141],{250:529,258:$V42,259:$V52,260:$V62,261:$V72,262:$V82,263:$V92,264:$Va2,265:$Vb2}),{44:345,63:82,67:$Vg,83:$Vx1,117:$Vh,123:115,251:530,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq,479:346,502:343,503:344},{259:[1,531]},{259:[1,532],261:[1,533]},{259:[1,534]},o($Vz2,[2,426]),{259:[1,536],261:[1,537],262:[1,535],264:[1,538]},{259:[1,539]},{259:[1,541],261:[1,542],262:[1,540],264:[1,543]},{259:[1,544]},o($Vc2,[2,1144]),o($Vc2,[2,1145]),o($Vw1,[2,979]),o($Vw1,[2,980]),o($Vw1,[2,981]),{204:[1,545]},o($VR1,$VS1,{391:50,63:82,352:128,353:136,349:137,317:138,355:139,471:141,318:146,320:147,322:148,491:149,91:150,329:151,330:152,331:153,271:156,493:157,123:158,335:159,495:162,496:163,176:164,440:165,497:166,508:332,142:461,224:546,480:547,58:$VH,59:$VI,67:$Vg,83:$VJ,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,350:$V21,351:$V31,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1}),{36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1,481:[1,548],482:249},{85:[1,549]},{85:[1,550],89:$VA2},o($VB2,[2,1091],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:552,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($VC2,[2,1159]),{85:[1,553]},{36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,413:[1,554],418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1,482:249},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:555,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($Vw1,[2,644]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:556,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{85:[2,1200],275:558,276:$VD2,525:557},o($Vh2,[2,1195]),{130:[1,560]},{362:[2,608]},{101:561,404:$Vm2,405:$Vn2,407:$Vo2,410:$Vp2,411:$Vq2,415:$Vr2,419:$Vs2,428:$Vt2,429:$Vu2,431:$Vv2,432:$Vw2,435:$Vx2},o($VD1,[2,583]),{85:[1,562],89:$Vg2},o($VD1,[2,596]),{85:[1,563],89:$Vg2},{36:$Vf1,81:$Vh1,85:[1,564],99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1,482:249},o($Vw1,[2,1125]),o($V2,[2,298],{89:[1,565]}),o($VE2,[2,304]),{58:$VH,59:$VI,63:82,67:$Vg,91:150,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,176:164,202:566,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:567,353:136,355:139,391:50,392:$Vj,393:$Vk,402:$Vq,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{48:568,213:25,214:26,219:$Vb,285:$Vc},o($VI1,[2,166]),{83:[1,570],134:569},o([47,129,204,384,388],[2,86]),{63:82,67:$Vg,88:571,91:409,117:$Vh,123:158,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},o($VF1,[2,102],{93:572,96:573,97:574,53:577,54:$VH1,99:$VF2,100:$VG2}),o($VH2,[2,114]),o($VH2,[2,115]),o($VH2,[2,116]),o($VH2,[2,117]),o($VH2,[2,118]),o($VH2,[2,119]),o($VH2,[2,120]),o($VH2,[2,957]),o($VH2,[2,958]),o($VH2,$VI2,{476:578,83:$VJ2}),o($VH2,[2,971],{477:580,83:[1,581]}),o($VH2,[2,961]),o($VH2,[2,962]),o($VH2,[2,963]),o($VH2,[2,964]),o($VH2,[2,965]),o($VH2,[2,966]),o($VH2,[2,967]),o($VH2,$VI2,{476:582,83:$VJ2}),{112:[1,583]},{112:[1,584]},{112:[1,585]},{48:586,213:25,214:26,219:$Vb,285:$Vc},o($VM1,[2,218]),{63:82,67:$Vg,91:150,117:$Vh,123:158,153:587,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq,471:226},o($VF1,[2,220]),{171:[1,588]},{171:[2,261]},{162:[1,589]},{162:[2,285]},{63:82,67:$Vg,76:590,117:$Vh,123:210,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{85:[1,591],89:[1,592]},o($VF1,[2,333]),{204:$VN1,205:593},{80:594,83:$VK1},o($VK2,[2,464],{274:595,275:596,276:$VD2}),o($Vy2,[2,402]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:597,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:599,176:164,235:598,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($V32,[2,366]),{44:345,63:82,67:$Vg,83:$Vx1,117:$Vh,123:115,251:600,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq,479:346,502:343,503:344},o($VL2,$VM2,{252:601,266:$VN2}),o($Vz2,[2,422]),o($Vz2,[2,423]),{259:[1,603]},o($Vz2,[2,425]),{259:[1,604]},o($Vz2,[2,428]),{259:[1,605]},{259:[1,606]},o($Vz2,[2,431]),{259:[1,607]},o($Vz2,[2,433]),{259:[1,608]},{259:[1,609]},o($Vz2,[2,436]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:610,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{85:[1,611]},{85:[1,612],89:$VA2},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:613,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($Vw1,[2,991]),o($Vw1,[2,992]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:614,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o([47,58,59,67,85,89,117,133,204,234,245,258,259,260,261,262,263,264,265,270,272,276,283,284,306,308,384,388,392,393,400,402,403,412,413,421,426,430,436,481],[2,994],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,401:$Vp1,418:$Vr1,420:$Vs1,423:$Vu1,424:$Vv1}),o($VC2,[2,1160]),o($Vw1,[2,1251]),o($V_1,[2,1272],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),o($VF1,[2,649],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),{85:[1,615]},{85:[2,1205],133:[1,620],426:[1,619],529:616,531:617,532:618},{130:[1,621]},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:461,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,480:622,491:149,493:157,495:162,496:163,497:166},{85:[1,623]},o($VD1,[2,584]),o($VD1,[2,598]),o($VD1,[2,602]),{83:$Vi2,201:624},{85:[1,625],89:[1,626]},o($VF1,[2,1104]),o($V2,[2,203]),{83:[1,628],135:627},{63:82,67:$Vg,91:630,117:$Vh,123:158,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq,463:629},o($VF1,[2,89]),o($VF1,[2,98]),o($VF1,[2,103],{53:577,97:631,54:$VH1,99:$VF2,100:$VG2}),o($VO2,[2,104]),{100:[1,632]},o($VO2,[2,111]),o($VO2,[2,112]),o($VH2,[2,959]),{433:[1,633]},o($VH2,[2,960]),{433:[1,634]},o($VH2,[2,968]),{92:635,101:489,102:490,103:491,104:492,105:493,106:494,107:495,111:$Vj2,113:[1,636],116:$Vk2,117:$Vl2,404:$Vm2,405:$Vn2,407:$Vo2,410:$Vp2,411:$Vq2,415:$Vr2,419:$Vs2,428:$Vt2,429:$Vu2,431:$Vv2,432:$Vw2,435:$Vx2},{101:637,113:[1,638],404:$Vm2,405:$Vn2,407:$Vo2,410:$Vp2,411:$Vq2,415:$Vr2,419:$Vs2,428:$Vt2,429:$Vu2,431:$Vv2,432:$Vw2,435:$Vx2},{63:82,67:$Vg,113:[1,640],117:$Vh,118:639,120:641,123:642,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},o($V2,[2,207]),o($VF1,$VG1,{53:300,52:643,54:$VH1}),{58:$VH,172:644,176:645},{183:[1,646]},o($V2,[2,309],{162:[1,647]}),{162:[2,330]},{58:$VH,176:648},{162:[1,649]},{204:[2,328]},o($Vw,[2,457],{268:650,269:651,270:[1,652]}),o($VK2,[2,465]),o($Vy2,[2,403],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),o($V22,[2,374],{89:[1,653]}),o($VP2,[2,389],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),o($VL2,$VM2,{252:654,266:$VN2}),o($VL2,[2,409]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:655,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($Vz2,[2,424]),o($Vz2,[2,427]),o($Vz2,[2,429]),o($Vz2,[2,430]),o($Vz2,[2,432]),o($Vz2,[2,434]),o($Vz2,[2,435]),o($VZ1,[2,982],{482:249}),o($Vw1,[2,989]),o($Vw1,[2,990]),o($VY1,[2,993],{482:249,36:$Vf1,81:$Vh1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,401:$Vp1,418:$Vr1,420:$Vs1,423:$Vu1,424:$Vv1}),o($VB2,[2,1092],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),o($Vw1,[2,1189]),{85:[2,1201]},{85:[2,1206]},{403:[1,656],536:[1,657]},o($VQ2,[2,1223]),o($VQ2,[2,1224]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:660,176:164,271:156,272:$Vi,277:658,280:659,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($Vh2,[2,1196],{89:$VA2}),o($Vw1,[2,616]),o($VE2,[2,305]),o($VE2,[2,306]),{58:$VH,59:$VI,63:82,67:$Vg,91:150,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:661,353:136,355:139,391:50,392:$Vj,393:$Vk,402:$Vq,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($VI1,[2,170]),{129:$VR2,138:662,140:663},{85:[1,665],89:[1,666]},o($VF1,[2,900]),o($VO2,[2,105]),o($VO2,[2,110]),{85:[1,667]},{85:[1,668],89:[1,669]},{113:[1,670]},o($VH2,[2,125]),{89:[1,671]},o($VH2,[2,129]),{89:[1,673],113:[1,672]},o($VH2,[2,135]),o($VS2,[2,137]),{124:[1,674]},o($VF1,[2,221]),{173:[1,675]},{173:[2,262]},{63:82,67:$Vg,76:676,117:$Vh,123:210,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{189:[1,677]},o($VF1,[2,334]),{183:[1,678]},o($Vw,[2,519]),o($Vw,[2,458]),{271:679,272:[1,680],311:$VP,433:$V91,434:$Va1,495:162,496:163},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:681,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($VL2,[2,410]),o($VL2,[2,452],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),o($VT2,$VU2,{533:682}),o($VT2,$VU2,{533:683}),o([85,133,270,306,384,388,426],[2,466],{89:[1,684]}),o($VV2,[2,469]),o($VV2,[2,479],{482:249,282:685,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,283:[1,686],284:[1,687],297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),o($VF1,[2,1105]),{85:[1,688],89:[1,689]},o($VF1,[2,179]),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:690,144:[1,691],176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{83:[2,897]},{63:82,67:$Vg,91:692,117:$Vh,123:158,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},o($VH2,[2,970]),o($VH2,[2,972]),{433:[1,693]},o($VH2,[2,124]),{92:694,101:489,102:490,103:491,104:492,105:493,106:494,107:495,111:$Vj2,116:$Vk2,117:$Vl2,404:$Vm2,405:$Vn2,407:$Vo2,410:$Vp2,411:$Vq2,415:$Vr2,419:$Vs2,428:$Vt2,429:$Vu2,431:$Vv2,432:$Vw2,435:$Vx2},o($VH2,[2,134]),{63:82,67:$Vg,117:$Vh,120:695,123:642,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{92:696,101:489,102:490,103:491,104:492,105:493,106:494,107:495,111:$Vj2,116:$Vk2,117:$Vl2,404:$Vm2,405:$Vn2,407:$Vo2,410:$Vp2,411:$Vq2,415:$Vr2,419:$Vs2,428:$Vt2,429:$Vu2,431:$Vv2,432:$Vw2,435:$Vx2},{58:$VH,174:697,176:698},o($V2,[2,286],{188:699,162:[1,700]}),{63:82,67:$Vg,76:701,117:$Vh,123:210,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{63:82,67:$Vg,76:702,117:$Vh,123:210,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},o($Vw,[2,459],{89:[1,703]}),o($Vw,[2,461],{89:[1,704]}),o($VP2,[2,390],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),o($VW2,$VX2,{534:705,544:706,408:$VY2,433:$VZ2,536:$V_2}),o($VW2,$VX2,{544:706,534:710,408:$VY2,433:$VZ2,536:$V_2}),{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:660,176:164,271:156,272:$Vi,280:711,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($VV2,[2,476]),o($VV2,[2,480]),o($VV2,[2,481]),o($VI1,[2,176]),{129:$VR2,140:712},{36:$Vf1,81:$Vh1,99:$Vi1,112:[1,714],113:$Vk1,143:713,146:[1,715],297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1,482:249},{112:$V$2,143:716,146:$V03},o($VF1,[2,901]),{85:[1,719]},{113:[1,720]},o($VS2,[2,138]),o($VS2,$VG1,{53:300,52:721,54:$VH1}),o($V2,[2,266],{175:722,180:[1,723]}),o([180,384,388],[2,264]),o($V2,[2,284]),{189:[1,724]},o($V2,[2,310]),o($V2,[2,311],{162:[1,725]}),{271:726,311:$VP,433:$V91,434:$Va1,495:162,496:163},{272:[1,727]},{85:$V13,400:$V23,535:728},{422:[1,730]},{425:[1,731]},o($V33,[2,1236]),o($V33,[2,1237]),{85:$V13,400:$V23,535:732},o($VV2,[2,470]),o($VF1,[2,180]),{144:[1,733]},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:350,144:$V43,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:352,144:$V53,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:734,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},o($V$1,$V43),o($V$1,$V53),o($VH2,[2,973]),o($VH2,[2,128]),o($VS2,[2,144]),o($V2,[2,260]),{58:$VH,176:735},{63:82,67:$Vg,76:736,117:$Vh,123:210,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{189:[1,737]},o($Vw,[2,460]),o($Vw,[2,462]),{85:[2,1207]},{408:[1,738],433:$VZ2,536:$V_2,544:739},o($VW2,[2,1226]),o($VW2,[2,1227]),{85:[2,1208]},o($VF1,[2,188],{143:740,112:$V$2,146:$V03}),o($VF1,[2,187],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),{181:[1,741]},o($V2,[2,287]),{63:82,67:$Vg,76:742,117:$Vh,123:210,272:$Vi,391:50,392:$Vj,393:$Vk,402:$Vq},{425:[1,743]},{416:[1,744]},{58:$VH,59:$VI,63:82,67:$Vg,83:$VJ,91:150,99:$VK,100:$VL,111:$VM,116:$VN,117:$Vh,123:158,142:745,176:164,271:156,272:$Vi,311:$VP,313:$VQ,314:$VR,315:$VS,317:138,318:146,320:147,322:148,329:151,330:152,331:153,335:159,338:$VT,339:$VU,340:$VV,341:$VW,342:$VX,343:$VY,344:$VZ,345:$V_,346:$V$,347:$V01,348:$V11,349:137,350:$V21,351:$V31,352:128,353:136,355:139,391:50,392:$Vj,393:$Vk,395:$V41,396:$V51,399:$V61,402:$Vq,406:$V71,414:$V81,433:$V91,434:$Va1,440:165,471:141,491:149,493:157,495:162,496:163,497:166},{58:$VH,176:746},o($V2,[2,312]),{85:[2,1231]},{85:[2,1232]},o($VF1,[2,186],{482:249,36:$Vf1,81:$Vh1,99:$Vi1,112:$Vj1,113:$Vk1,146:$Vl1,297:$Vm1,396:$Vn1,400:$Vo1,401:$Vp1,403:$Vq1,418:$Vr1,420:$Vs1,421:$Vt1,423:$Vu1,424:$Vv1}),o($V2,[2,267])],
defaultActions: {43:[2,700],78:[2,677],79:[2,679],118:[2,938],142:[2,612],143:[2,613],144:[2,614],145:[2,615],167:[2,588],168:[2,589],169:[2,590],170:[2,591],171:[2,592],172:[2,593],173:[2,594],174:[2,595],182:[2,38],183:[2,47],225:[2,691],384:[2,607],427:[2,1163],428:[2,1165],429:[2,1167],430:[2,1169],431:[2,1171],432:[2,1173],433:[2,1175],434:[2,1177],472:[2,608],516:[2,261],518:[2,285],591:[2,330],594:[2,328],616:[2,1201],617:[2,1206],645:[2,262],665:[2,897],728:[2,1207],732:[2,1208],743:[2,1231],744:[2,1232]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 5; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 437; 
break;
case 5: this.popState(); return 481; 
break;
case 6: return 34; 
break;
case 7: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('ALTER', yy_.yylloc, yy.lexer.upcomingInput()); return 4; 
break;
case 8: return 400; 
break;
case 9: return 47; 
break;
case 10: return 283; 
break;
case 11: this.begin('between'); return 403; 
break;
case 12: return 404; 
break;
case 13: return 405; 
break;
case 14: return 130; 
break;
case 15: return 447; 
break;
case 16: return 406; 
break;
case 17: return 407; 
break;
case 18: return 54; 
break;
case 19: parser.determineCase(yy_.yytext); return 8; 
break;
case 20: return 258; 
break;
case 21: return 408; 
break;
case 22: return 409; 
break;
case 23: return 410; 
break;
case 24: return 284; 
break;
case 25: return 291; 
break;
case 26: return 401; 
break;
case 27: return 411; 
break;
case 28: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('DROP', yy_.yylloc, yy.lexer.upcomingInput()); return 12; 
break;
case 29: return 412; 
break;
case 30: return 413; 
break;
case 31: parser.yy.correlatedSubQuery = true; return 414; 
break;
case 32: return 314; 
break;
case 33: return 415; 
break;
case 34: return 416; 
break;
case 35: parser.determineCase(yy_.yytext); return 204; 
break;
case 36: return 260; 
break;
case 37: return 234; 
break;
case 38: return 245; 
break;
case 39: return 350; 
break;
case 40: return 418; 
break;
case 41: return 262; 
break;
case 42: return 197; 
break;
case 43: return 419; 
break;
case 44: return 198; 
break;
case 45: return 420; 
break;
case 46: return 259; 
break;
case 47: return 263; 
break;
case 48: return 81; 
break;
case 49: return 270; 
break;
case 50: return 99; 
break;
case 51: return 100; 
break;
case 52: return 266; 
break;
case 53: return 392; 
break;
case 54: return 421; 
break;
case 55: return 276; 
break;
case 56: return 261; 
break;
case 57: return 129; 
break;
case 58: return 422; 
break;
case 59: return 158; 
break;
case 60: return 133; 
break;
case 61: return 423; 
break;
case 62: return 265; 
break;
case 63: return 424; 
break;
case 64: return 425; 
break;
case 65: return 67; 
break;
case 66: return 426; 
break;
case 67: return 427; 
break;
case 68: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 285; 
break;
case 69: return 264; 
break;
case 70: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 18; 
break;
case 71: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 'SHOW'; 
break;
case 72: return 428; 
break;
case 73: return 429; 
break;
case 74: return 43; 
break;
case 75: return 430; 
break;
case 76: return 431; 
break;
case 77: return 432; 
break;
case 78: return 'TO'; 
break;
case 79: return 313; 
break;
case 80: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('TRUNCATE', yy_.yylloc, yy.lexer.upcomingInput()); return 315; 
break;
case 81: return 536; 
break;
case 82: return 306; 
break;
case 83: parser.determineCase(yy_.yytext); return 365; 
break;
case 84: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('USE', yy_.yylloc); return 381; 
break;
case 85: return 144; 
break;
case 86: return 435; 
break;
case 87: return 51; 
break;
case 88: return 436; 
break;
case 89: return 308; 
break;
case 90: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 219; 
break;
case 91: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('LOAD', yy_.yylloc, yy.lexer.upcomingInput()); return 203; 
break;
case 92: return 206; 
break;
case 93: return 207; 
break;
case 94: return 162; 
break;
case 95: return 166; 
break;
case 96: return 183; 
break;
case 97: return 189; 
break;
case 98: return 169; 
break;
case 99: return 171; 
break;
case 100: return 173; 
break;
case 101: return 180; 
break;
case 102: return 181; 
break;
case 103: return 186; 
break;
case 104: return 362; 
break;
case 105: return 67; 
break;
case 106: yy.lexer.unput('('); yy_.yytext = 'avg'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 338; 
break;
case 107: yy.lexer.unput('('); yy_.yytext = 'cast'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 351; 
break;
case 108: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 346; 
break;
case 109: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 339; 
break;
case 110: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 340; 
break;
case 111: yy.lexer.unput('('); yy_.yytext = 'stddev_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 341; 
break;
case 112: yy.lexer.unput('('); yy_.yytext = 'stddev_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 342; 
break;
case 113: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 347; 
break;
case 114: yy.lexer.unput('('); yy_.yytext = 'var_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 343; 
break;
case 115: yy.lexer.unput('('); yy_.yytext = 'var_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 344; 
break;
case 116: yy.lexer.unput('('); yy_.yytext = 'variance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 345; 
break;
case 117: yy.lexer.unput('('); yy_.yytext = 'cume_dist'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 348; 
break;
case 118: yy.lexer.unput('('); yy_.yytext = 'dense_rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 348; 
break;
case 119: yy.lexer.unput('('); yy_.yytext = 'first_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 348; 
break;
case 120: yy.lexer.unput('('); yy_.yytext = 'lag'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 348; 
break;
case 121: yy.lexer.unput('('); yy_.yytext = 'last_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 348; 
break;
case 122: yy.lexer.unput('('); yy_.yytext = 'lead'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 348; 
break;
case 123: yy.lexer.unput('('); yy_.yytext = 'rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 348; 
break;
case 124: yy.lexer.unput('('); yy_.yytext = 'row_number'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 348; 
break;
case 125: return 433; 
break;
case 126: return 433; 
break;
case 127: return 434; 
break;
case 128: return 393; 
break;
case 129: parser.yy.cursorFound = true; return 5; 
break;
case 130: parser.yy.cursorFound = true; return 437; 
break;
case 131: return 417; 
break;
case 132: parser.addFileLocation(yy_.yylloc, yy_.yytext); return 541; 
break;
case 133: this.popState(); return 542; 
break;
case 134: return 384; 
break;
case 135: return 400; 
break;
case 136: return 421; 
break;
case 137: return 36; 
break;
case 138: return 112; 
break;
case 139: return 113; 
break;
case 140: return 146; 
break;
case 141: return 146; 
break;
case 142: return 146; 
break;
case 143: return 146; 
break;
case 144: return 146; 
break;
case 145: return 396; 
break;
case 146: return 297; 
break;
case 147: return 401; 
break;
case 148: return 401; 
break;
case 149: return 401; 
break;
case 150: return 401; 
break;
case 151: return 401; 
break;
case 152: return 401; 
break;
case 153: return 89; 
break;
case 154: return 311; 
break;
case 155: return 124; 
break;
case 156: return 388; 
break;
case 157: return 399; 
break;
case 158: return 395; 
break;
case 159: return 83; 
break;
case 160: return 85; 
break;
case 161: return 397; 
break;
case 162: return 398; 
break;
case 163: return 272; 
break;
case 164: this.begin('backtickedValue'); return 402; 
break;
case 165:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 439;
                                             }
                                             return 60;
                                           
break;
case 166: this.popState(); return 402; 
break;
case 167: this.begin('singleQuotedValue'); return 58; 
break;
case 168:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 439;
                                             }
                                             return 60;
                                           
break;
case 169: this.popState(); return 58; 
break;
case 170: this.begin('doubleQuotedValue'); return 59; 
break;
case 171:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 439;
                                             }
                                             return 60;
                                           
break;
case 172: this.popState(); return 59; 
break;
case 173: return 384; 
break;
case 174: /* To prevent console logging of unknown chars */ 
break;
case 175: 
break;
case 176: 
break;
case 177: 
break;
case 178: 
break;
case 179: 
break;
case 180:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:ALL)/i,/^(?:ALTER)/i,/^(?:AND)/i,/^(?:AS)/i,/^(?:ASC)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BOOLEAN)/i,/^(?:BY)/i,/^(?:CASCADE)/i,/^(?:CASE)/i,/^(?:CHAR)/i,/^(?:COMMENT)/i,/^(?:CREATE)/i,/^(?:CROSS)/i,/^(?:CURRENT)/i,/^(?:DATABASE)/i,/^(?:DECIMAL)/i,/^(?:DESC)/i,/^(?:DISTINCT)/i,/^(?:DIV)/i,/^(?:DOUBLE)/i,/^(?:DROP)/i,/^(?:ELSE)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:FALSE)/i,/^(?:FLOAT)/i,/^(?:FOLLOWING)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:GROUP)/i,/^(?:HAVING)/i,/^(?:IF)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JOIN)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:ON)/i,/^(?:OPTION)/i,/^(?:OR)/i,/^(?:ORDER)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PRECEDING)/i,/^(?:PURGE)/i,/^(?:RANGE)/i,/^(?:REGEXP)/i,/^(?:RIGHT)/i,/^(?:RLIKE)/i,/^(?:ROW)/i,/^(?:ROLE)/i,/^(?:ROWS)/i,/^(?:SCHEMA)/i,/^(?:SELECT)/i,/^(?:SEMI)/i,/^(?:SET)/i,/^(?:SHOW)/i,/^(?:SMALLINT)/i,/^(?:STRING)/i,/^(?:TABLE)/i,/^(?:THEN)/i,/^(?:TIMESTAMP)/i,/^(?:TINYINT)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TRUNCATE)/i,/^(?:UNBOUNDED)/i,/^(?:UNION)/i,/^(?:UPDATE)/i,/^(?:USE)/i,/^(?:VALUES)/i,/^(?:VARCHAR)/i,/^(?:VIEW)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:LOAD)/i,/^(?:SOURCE)/i,/^(?:FIELDS)/i,/^(?:EXTERNAL)/i,/^(?:STORAGE)/i,/^(?:LOCATION)/i,/^(?:FORMAT)/i,/^(?:TYPE)/i,/^(?:ENDPOINT)/i,/^(?:REGION)/i,/^(?:IDENTITY)/i,/^(?:CREDENTIAL)/i,/^(?:PATH)/i,/^(?:OVER)/i,/^(?:ROLE)/i,/^(?:AVG\s*\()/i,/^(?:CAST\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:STDDEV_POP\s*\()/i,/^(?:STDDEV_SAMP\s*\()/i,/^(?:SUM\s*\()/i,/^(?:VAR_POP\s*\()/i,/^(?:VAR_SAMP\s*\()/i,/^(?:VARIANCE\s*\()/i,/^(?:CUME_DIST\s*\()/i,/^(?:DENSE_RANK\s*\()/i,/^(?:FIRST_VALUE\s*\()/i,/^(?:LAG\s*\()/i,/^(?:LAST_VALUE\s*\()/i,/^(?:LEAD\s*\()/i,/^(?:RANK\s*\()/i,/^(?:ROW_NUMBER\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:\s+['"])/i,/^(?:[^'"\u2020\u2021]+)/i,/^(?:['"])/i,/^(?:$)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[129,130,131,132,133,134,176],"inclusive":false},"doubleQuotedValue":{"rules":[171,172,179],"inclusive":false},"singleQuotedValue":{"rules":[168,169,178],"inclusive":false},"backtickedValue":{"rules":[165,166,177],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,167,170,173,174,175,180],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,167,170,173,174,180],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default yellowbrickSyntaxParser;
