// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/yellowbrick/sqlParseSupport';

var yellowbrickSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[4,8,12,17,164,170,191,257,287,337,353,356,360],$V1=[2,656],$V2=[356,360],$V3=[2,657],$V4=[1,37],$V5=[1,28],$V6=[1,29],$V7=[1,19],$V8=[1,38],$V9=[1,30],$Va=[1,35],$Vb=[1,36],$Vc=[1,31],$Vd=[1,34],$Ve=[1,32],$Vf=[1,47],$Vg=[1,49],$Vh=[1,45],$Vi=[1,48],$Vj=[1,44],$Vk=[83,356,360],$Vl=[2,483],$Vm=[1,55],$Vn=[1,63],$Vo=[1,64],$Vp=[1,78],$Vq=[2,445],$Vr=[1,83],$Vs=[1,84],$Vt=[34,283],$Vu=[17,34,45,52,56,57,65,79,81,83,87,97,109,110,111,114,115,122,127,131,142,144,156,171,173,176,206,217,230,231,232,233,234,235,236,237,238,242,244,248,255,256,269,278,280,283,356,360,364,365,368,372,373,374,375,376,377,379,382,383,384,385,387,390,391,392,393,395,396,398,400,401,402,403,404,407,408,419,453],$Vv=[83,278,356,360],$Vw=[65,115,244,356,360,364,365],$Vx=[2,813],$Vy=[1,98],$Vz=[65,115,244,364,365,374],$VA=[65,115,244,322,356,360,364,365,374],$VB=[2,810],$VC=[1,103],$VD=[17,65,115,244,364,365,374],$VE=[81,87,257],$VF=[1,171],$VG=[1,172],$VH=[1,127],$VI=[1,122],$VJ=[1,133],$VK=[1,135],$VL=[1,137],$VM=[1,120],$VN=[1,169],$VO=[1,173],$VP=[1,174],$VQ=[1,138],$VR=[1,160],$VS=[1,161],$VT=[1,162],$VU=[1,163],$VV=[1,164],$VW=[1,165],$VX=[1,166],$VY=[1,167],$VZ=[1,153],$V_=[1,154],$V$=[1,147],$V01=[1,136],$V11=[1,148],$V21=[1,123],$V31=[1,125],$V41=[1,124],$V51=[1,128],$V61=[1,126],$V71=[1,168],$V81=[1,170],$V91=[56,57,65,81,83,97,98,109,114,115,244,257,269,283,285,286,287,310,311,312,313,314,315,316,317,318,319,320,322,323,364,365,367,368,371,374,378,386,405,406],$Va1=[45,56,57,65,83,87,115,127,142,156,171,176,206,217,230,231,232,233,234,235,236,237,238,242,244,248,278,280,356,360,364,365,374],$Vb1=[83,87,171,278,356,360],$Vc1=[2,1132],$Vd1=[1,228],$Ve1=[1,243],$Vf1=[1,244],$Vg1=[1,232],$Vh1=[1,229],$Vi1=[1,230],$Vj1=[1,231],$Vk1=[1,238],$Vl1=[1,237],$Vm1=[1,236],$Vn1=[1,239],$Vo1=[1,234],$Vp1=[1,233],$Vq1=[1,227],$Vr1=[1,235],$Vs1=[1,246],$Vt1=[1,245],$Vu1=[34,45,56,57,65,79,83,87,97,110,111,115,131,144,171,206,217,230,231,232,233,234,235,236,237,242,244,248,255,256,269,278,280,356,360,364,365,368,372,373,374,375,384,385,390,392,393,395,396,398,402,408,453],$Vv1=[1,252],$Vw1=[1,258],$Vx1=[1,260],$Vy1=[34,45,56,57,65,79,81,83,87,97,110,111,115,131,144,171,206,217,230,231,232,233,234,235,236,237,242,244,248,255,256,269,278,280,356,360,364,365,368,372,373,374,375,384,385,390,392,393,395,396,398,402,408,453],$Vz1=[1,265],$VA1=[34,45,52,56,57,65,79,81,83,87,97,110,111,115,131,144,171,206,217,230,231,232,233,234,235,236,237,242,244,248,255,256,269,278,280,283,356,360,364,365,368,372,373,374,375,384,385,390,392,393,395,396,398,402,408,453],$VB1=[34,45,56,57,65,79,83,87,97,110,111,115,131,144,171,206,217,230,231,232,233,234,235,236,237,242,244,248,255,256,269,278,280,334,356,360,364,365,368,372,373,374,375,384,385,390,392,393,395,396,398,402,408,453],$VC1=[45,52,83,87,97,98,111,171,206,217,230,231,232,233,234,235,236,237,238,242,248,278,280,356,360],$VD1=[83,87],$VE1=[2,48],$VF1=[1,292],$VG1=[45,356,360],$VH1=[45,127,356,360],$VI1=[1,300],$VJ1=[45,52,79,81,127,173,356,360],$VK1=[45,52],$VL1=[1,310],$VM1=[280,356,360],$VN1=[87,171,280,356,360],$VO1=[34,52,83,87],$VP1=[191,257],$VQ1=[2,1110],$VR1=[83,206,217,242,248,278,356,360],$VS1=[2,496],$VT1=[1,324],$VU1=[98,263,285,286],$VV1=[83,87,171,206,217,230,231,232,233,234,235,236,237,238,242,248,278,280,356,360],$VW1=[45,56,57,65,83,87,97,115,131,171,206,217,230,231,232,233,234,235,236,237,242,244,248,255,256,278,280,356,360,364,365,372,374,375,384,385,393,398,402,408,453],$VX1=[34,45,56,57,65,83,87,97,110,111,115,131,144,171,206,217,230,231,232,233,234,235,236,237,242,244,248,255,256,269,278,280,356,360,364,365,368,372,373,374,375,384,385,393,398,402,408,453],$VY1=[384,385,408],$VZ1=[56,57,65,81,97,98,109,114,115,244,283,285,286,287,310,311,312,313,314,315,316,317,318,319,320,322,323,364,365,367,368,371,374,378,386,405,406],$V_1=[34,45,52,56,57,65,79,83,87,97,98,110,111,115,131,144,171,206,217,230,231,232,233,234,235,236,237,238,242,244,248,255,256,269,278,280,356,360,364,365,368,372,373,374,375,384,385,390,392,393,395,396,398,402,408,453],$V$1=[83,217,242,248,278,356,360],$V02=[83,87,206,217,242,248,278,280,356,360],$V12=[1,428],$V22=[1,431],$V32=[1,429],$V42=[1,433],$V52=[1,430],$V62=[1,432],$V72=[1,435],$V82=[1,434],$V92=[83,87,206,217,230,231,232,233,234,235,236,237,238,242,248,278,280,356,360],$Va2=[45,56,57,65,83,87,115,206,217,230,231,232,233,234,235,236,237,238,242,244,248,278,280,356,360,364,365,374],$Vb2=[34,45,56,57,65,83,87,97,110,111,115,131,144,171,206,217,230,231,232,233,234,235,236,237,242,244,248,255,256,278,280,356,360,364,365,372,374,375,384,385,393,398,402,408,453],$Vc2=[45,56,57,65,83,87,115,131,171,206,217,230,231,232,233,234,235,236,237,242,244,248,255,256,278,280,356,360,364,365,372,374,384,385,393,398,402,408,453],$Vd2=[1,453],$Ve2=[83,248],$Vf2=[1,467],$Vg2=[1,493],$Vh2=[1,494],$Vi2=[1,495],$Vj2=[1,481],$Vk2=[1,482],$Vl2=[1,483],$Vm2=[1,484],$Vn2=[1,485],$Vo2=[1,486],$Vp2=[1,487],$Vq2=[1,488],$Vr2=[1,489],$Vs2=[1,490],$Vt2=[1,491],$Vu2=[1,492],$Vv2=[83,242,248,278,356,360],$Vw2=[65,81,115,244,364,365,374],$Vx2=[1,532],$Vy2=[83,87,248],$Vz2=[34,45,56,57,65,79,83,87,97,110,111,115,131,144,171,206,217,230,231,232,233,234,235,236,237,238,242,244,248,255,256,269,278,280,356,360,364,365,368,372,373,374,375,384,385,390,392,393,395,396,398,402,408,453],$VA2=[1,540],$VB2=[87,356,360],$VC2=[1,556],$VD2=[1,557],$VE2=[52,83,87,97,98,111],$VF2=[2,922],$VG2=[1,560],$VH2=[83,242,278,356,360],$VI2=[83,87,206,217,230,231,232,233,234,235,236,237,242,248,278,280,356,360],$VJ2=[2,404],$VK2=[1,581],$VL2=[52,83,87,97,98],$VM2=[83,87,217,242,248,278,356,360],$VN2=[375,508],$VO2=[1,640],$VP2=[87,111],$VQ2=[83,372,380,405,508],$VR2=[2,1168],$VS2=[83,87,131,242,278,356,360,398],$VT2=[83,372],$VU2=[2,1178],$VV2=[1,677],$VW2=[1,678],$VX2=[1,679],$VY2=[1,687],$VZ2=[1,688],$V_2=[2,1183],$V$2=[1,696],$V03=[388,394],$V13=[2,198],$V23=[2,199];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"DataDefinition_EDIT":3,"ALTER":4,"CURSOR":5,"AlterTable_EDIT":6,"AlterView_EDIT":7,"CREATE":8,"DatabaseDefinition_EDIT":9,"TableDefinition_EDIT":10,"ViewDefinition_EDIT":11,"DROP":12,"DropDatabaseStatement_EDIT":13,"DropTableStatement_EDIT":14,"DropViewStatement_EDIT":15,"LoadTableStatement_EDIT":16,"SET":17,"TruncateTableStatement_EDIT":18,"UseStatement_EDIT":19,"DataDefinition":20,"AlterTable":21,"AlterView":22,"DatabaseDefinition":23,"RoleDefinition":24,"TableDefinition":25,"ViewDefinition":26,"DropDatabaseStatement":27,"DropRoleStatement":28,"DropTableStatement":29,"DropViewStatement":30,"LoadTableStatement":31,"ALL":32,"SetOption":33,"=":34,"SetValue":35,"TruncateTableStatement":36,"UseStatement":37,"AlterTableLeftSide":38,"PartitionSpec":39,"AlterTableLeftSide_EDIT":40,"TABLE":41,"SchemaQualifiedTableIdentifier":42,"SchemaQualifiedTableIdentifier_EDIT":43,"AlterViewLeftSide":44,"AS":45,"QuerySpecification":46,"AlterViewLeftSide_EDIT":47,"QuerySpecification_EDIT":48,"VIEW":49,"OptionalComment":50,"Comment":51,"COMMENT":52,"QuotedValue":53,"OptionalComment_INVALID":54,"Comment_INVALID":55,"SINGLE_QUOTE":56,"DOUBLE_QUOTE":57,"VALUE":58,"DatabaseOrSchema":59,"OptionalIfNotExists":60,"RegularIdentifier":61,"DatabaseDefinitionOptionals":62,"OptionalIfNotExists_EDIT":63,"DatabaseDefinitionOptionals_EDIT":64,"ROLE":65,"TableDefinitionRightPart":66,"TableDefinitionRightPart_EDIT":67,"TableIdentifierAndOptionalColumnSpecification":68,"OptionalPartitionedBy":69,"OptionalAsSelectStatement":70,"TableIdentifierAndOptionalColumnSpecification_EDIT":71,"PartitionedBy_EDIT":72,"OptionalAsSelectStatement_EDIT":73,"SchemaQualifiedIdentifier":74,"OptionalColumnSpecificationsOrLike":75,"OptionalColumnSpecificationsOrLike_EDIT":76,"SchemaQualifiedIdentifier_EDIT":77,"ParenthesizedColumnSpecificationList":78,"LIKE":79,"ParenthesizedColumnSpecificationList_EDIT":80,"(":81,"ColumnSpecificationList":82,")":83,"ColumnSpecificationList_EDIT":84,"RightParenthesisOrError":85,"ColumnSpecification":86,",":87,"ColumnSpecification_EDIT":88,"ColumnIdentifier":89,"ColumnDataType":90,"OptionalColumnOptions":91,"ColumnDataType_EDIT":92,"ColumnOptions_EDIT":93,"ColumnOptions":94,"ColumnOption":95,"ColumnOption_EDIT":96,"NOT":97,"NULL":98,"PrimitiveType":99,"ArrayType":100,"MapType":101,"StructType":102,"ArrayType_INVALID":103,"MapType_INVALID":104,"StructType_INVALID":105,"ArrayType_EDIT":106,"MapType_EDIT":107,"StructType_EDIT":108,"ARRAY":109,"<":110,">":111,"AnyCursor":112,"GreaterThanOrError":113,"MAP":114,"STRUCT":115,"StructDefinitionList":116,"StructDefinitionList_EDIT":117,"StructDefinition":118,"StructDefinition_EDIT":119,"Commas":120,"RegularOrBacktickedIdentifier":121,":":122,"ColumnDataTypeList":123,"ColumnDataTypeList_EDIT":124,"ColumnDataTypeListInner_EDIT":125,"PartitionedBy":126,"PARTITION":127,"BY":128,"RangeClause":129,"RangeClause_EDIT":130,"RANGE":131,"ParenthesizedColumnList":132,"ParenthesizedPartitionValuesList":133,"ParenthesizedColumnList_EDIT":134,"ParenthesizedPartitionValuesList_EDIT":135,"PartitionValueList":136,"PartitionValueList_EDIT":137,"PartitionValue":138,"PartitionValue_EDIT":139,"ValueExpression":140,"LessThanOrEqualTo":141,"VALUES":142,"ValueExpression_EDIT":143,"COMPARISON_OPERATOR":144,"CommitLocations":145,"OptionalParenthesizedViewColumnList":146,"ParenthesizedViewColumnList_EDIT":147,"ParenthesizedViewColumnList":148,"ViewColumnList":149,"ViewColumnList_EDIT":150,"ColumnReference":151,"OptionalIfExists":152,"OptionalCascade":153,"OptionalIfExists_EDIT":154,"OptionalPurge":155,"PURGE":156,"DataManipulation":157,"InsertStatement":158,"UpdateStatement":159,"InsertValuesStatement":160,"DataManipulation_EDIT":161,"InsertValuesStatement_EDIT":162,"UpdateStatement_EDIT":163,"INSERT":164,"INTO":165,"OptionalTable":166,"InsertValuesList":167,"ParenthesizedRowValuesList":168,"InValueList":169,"LOAD":170,"FROM":171,"LoadFromSpec":172,"EXTERNAL":173,"LOCATION":174,"FORMAT":175,"SOURCE":176,"FIELDS":177,"LoadSourceFieldsSpec":178,"LoadFromSpec_EDIT":179,"LoadSourceFieldsSpec_EDIT":180,"LoadFromSpecList":181,"LoadFromSpecList_EDIT":182,"SingleQuotedValue":183,"SingleQuotedValue_EDIT":184,"CommonTableExpression":185,"SelectStatement":186,"OptionalUnions":187,"SelectStatement_EDIT":188,"OptionalUnions_EDIT":189,"CommonTableExpression_EDIT":190,"WITH":191,"WithQueries":192,"WithQueries_EDIT":193,"WithQuery":194,"WithQuery_EDIT":195,"TableSubQueryInner":196,"TableSubQueryInner_EDIT":197,"FromClause":198,"TableReferenceList":199,"FromClause_EDIT":200,"TableReferenceList_EDIT":201,"TableReference":202,"TableReference_EDIT":203,"OptionalGroupByClause":204,"GroupByClause":205,"GROUP":206,"GroupByColumnList":207,"GroupByClause_EDIT":208,"GroupByColumnList_EDIT":209,"ColumnGroupingSets":210,"ColumnGroupingSets_EDIT":211,"ColumnGroupingSet_EDIT":212,"ColumnReference_EDIT":213,"GroupByColumnListPartTwo_EDIT":214,"OptionalHavingClause":215,"HavingClause":216,"HAVING":217,"HavingClause_EDIT":218,"OptionalJoins":219,"Joins":220,"Joins_INVALID":221,"JoinType":222,"TablePrimary":223,"OptionalJoinCondition":224,"Join_EDIT":225,"JoinType_EDIT":226,"TablePrimary_EDIT":227,"JoinCondition_EDIT":228,"Joins_EDIT":229,"CROSS":230,"JOIN":231,"FULL":232,"OUTER":233,"INNER":234,"LEFT":235,"SEMI":236,"RIGHT":237,"ON":238,"UsingColList":239,"OptionalLimitClause":240,"LimitClause":241,"LIMIT":242,"UnsignedNumericLiteral":243,"VARIABLE_REFERENCE":244,"LimitClause_EDIT":245,"OptionalOrderByClause":246,"OrderByClause":247,"ORDER":248,"OrderByColumnList":249,"OrderByClause_EDIT":250,"OrderByColumnList_EDIT":251,"OrderByIdentifier":252,"OrderByIdentifier_EDIT":253,"OptionalAscOrDesc":254,"ASC":255,"DESC":256,"SELECT":257,"OptionalAllOrDistinct":258,"SelectList":259,"TableExpression":260,"SelectList_EDIT":261,"TableExpression_EDIT":262,"DISTINCT":263,"OptionalSelectConditions":264,"OptionalSelectConditions_EDIT":265,"SelectSpecification":266,"SelectSpecification_EDIT":267,"OptionalCorrelationName":268,"*":269,"OptionalCorrelationName_EDIT":270,"OptionalWhereClause":271,"WhereClause_EDIT":272,"WhereClause":273,"Unions":274,"Unions_EDIT":275,"UnionClause":276,"UnionClause_EDIT":277,"UNION":278,"NewStatement":279,"WHERE":280,"SearchCondition":281,"SearchCondition_EDIT":282,".":283,"SignedInteger":284,"TRUE":285,"FALSE":286,"TRUNCATE":287,"OptionalPartitionSpec":288,"UserDefinedFunction":289,"AggregateFunction":290,"OptionalOverClause":291,"AnalyticFunction":292,"OverClause":293,"CastFunction":294,"UserDefinedFunction_EDIT":295,"AggregateFunction_EDIT":296,"OptionalOverClause_EDIT":297,"AnalyticFunction_EDIT":298,"OverClause_EDIT":299,"CastFunction_EDIT":300,"OtherAggregateFunction":301,"CountFunction":302,"SumFunction":303,"OtherAggregateFunction_EDIT":304,"CountFunction_EDIT":305,"SumFunction_EDIT":306,"OtherAggregateFunction_Type":307,"UdfArgumentList":308,"UdfArgumentList_EDIT":309,"AVG":310,"MAX":311,"MIN":312,"STDDEV_POP":313,"STDDEV_SAMP":314,"VAR_POP":315,"VAR_SAMP":316,"VARIANCE":317,"COUNT":318,"SUM":319,"ANALYTIC":320,"ArbitraryFunctionName":321,"IF":322,"CAST":323,"NonParenthesizedValueExpressionPrimary":324,"ColumnOrArbitraryFunctionRef":325,"ArbitraryFunctionRightPart":326,"UnsignedValueSpecification":327,"NonParenthesizedValueExpressionPrimary_EDIT":328,"ArbitraryFunctionRightPart_EDIT":329,"UnsignedValueSpecification_EDIT":330,"ColumnOrArbitraryFunctionRef_EDIT":331,"ArbitraryFunction":332,"ArbitraryFunction_EDIT":333,"OVER":334,"WindowExpression":335,"WindowExpression_EDIT":336,"UPDATE":337,"TargetTable":338,"SetClauseList":339,"OptionalFromJoinedTable":340,"TargetTable_EDIT":341,"SetClauseList_EDIT":342,"FromJoinedTable_EDIT":343,"TableName":344,"TableName_EDIT":345,"LocalOrSchemaQualifiedName":346,"LocalOrSchemaQualifiedName_EDIT":347,"SetClause":348,"SetClause_EDIT":349,"SetTarget":350,"UpdateSource":351,"UpdateSource_EDIT":352,"USE":353,"SqlSyntax":354,"SqlStatements":355,"EOF":356,"SqlAutocomplete":357,"SqlStatements_EDIT":358,"SqlStatement":359,";":360,"SqlStatement_EDIT":361,"SetSpecification_EDIT":362,"NonReservedKeyword":363,"OPTION":364,"REGULAR_IDENTIFIER":365,"NonStartingToken":366,"!":367,"-":368,"[":369,"]":370,"~":371,"AND":372,"ARITHMETIC_OPERATOR":373,"BACKTICK":374,"BETWEEN":375,"BIGINT":376,"BOOLEAN":377,"CASE":378,"CHAR":379,"CURRENT":380,"DATABASE":381,"DECIMAL":382,"DOUBLE":383,"ELSE":384,"END":385,"EXISTS":386,"FLOAT":387,"FOLLOWING":388,"HDFS_START_QUOTE":389,"IN":390,"INT":391,"IS":392,"OR":393,"PRECEDING":394,"REGEXP":395,"RLIKE":396,"ROW":397,"ROWS":398,"SCHEMA":399,"SMALLINT":400,"STRING":401,"THEN":402,"TIMESTAMP":403,"TINYINT":404,"UNSIGNED_INTEGER":405,"UNSIGNED_INTEGER_E":406,"VARCHAR":407,"WHEN":408,"PARTIAL_CURSOR":409,"FromOrIn":410,"PARTIAL_VALUE":411,"DoubleQuotedValue":412,"DoubleQuotedValue_EDIT":413,"QuotedValue_EDIT":414,"OptionalFromDatabase":415,"DatabaseIdentifier":416,"OptionalFromDatabase_EDIT":417,"DatabaseIdentifier_EDIT":418,"CASCADE":419,"OptionalInDatabase":420,"OptionalPartitionSpec_EDIT":421,"PartitionSpec_EDIT":422,"PartitionSpecList":423,"PartitionSpecList_EDIT":424,"RangePartitionSpec":425,"RangePartitionComparisonOperator":426,"RangePartitionSpec_EDIT":427,"ConfigurationName":428,"PartialBacktickedOrAnyCursor":429,"PartialBacktickedIdentifier":430,"PartialBacktickedOrCursor":431,"PartialBacktickedOrPartialCursor":432,"OptionalParenthesizedColumnList":433,"OptionalParenthesizedColumnList_EDIT":434,"ColumnList":435,"ColumnList_EDIT":436,"ParenthesizedSimpleValueList":437,"SimpleValueList":438,"PartitionExpression":439,"PartitionExpression_EDIT":440,"RegularOrBackTickedSchemaQualifiedName":441,"RegularOrBackTickedSchemaQualifiedName_EDIT":442,"BasicIdentifierChain":443,"BasicIdentifierChain_EDIT":444,"DerivedColumnChain":445,"DerivedColumnChain_EDIT":446,"PartialBacktickedIdentifierOrPartialCursor":447,"OptionalTypeLength":448,"OptionalTypePrecision":449,"OptionalNot":450,"TableSubQuery":451,"ValueExpressionList":452,"BETWEEN_AND":453,"LikeRightPart":454,"CaseRightPart":455,"TableSubQuery_EDIT":456,"ValueExpressionInSecondPart_EDIT":457,"LikeRightPart_EDIT":458,"CaseRightPart_EDIT":459,"EndOrError":460,"ValueExpressionList_EDIT":461,"+":462,"UnsignedLiteral":463,"UnsignedLiteral_EDIT":464,"GeneralLiteral":465,"GeneralLiteral_EDIT":466,"ExactNumericLiteral":467,"ApproximateNumericLiteral":468,"TruthValue":469,"TablePrimaryOrJoinedTable":470,"TablePrimaryOrJoinedTable_EDIT":471,"JoinedTable":472,"JoinedTable_EDIT":473,"TableOrQueryName":474,"DerivedTable":475,"TableOrQueryName_EDIT":476,"DerivedTable_EDIT":477,"OptionalOnColumn":478,"OptionalOnColumn_EDIT":479,"PushQueryState":480,"PopQueryState":481,"SubQuery":482,"SubQuery_EDIT":483,"QueryExpression":484,"QueryExpression_EDIT":485,"QueryExpressionBody":486,"QueryExpressionBody_EDIT":487,"NonJoinQueryExpression":488,"NonJoinQueryExpression_EDIT":489,"NonJoinQueryTerm":490,"NonJoinQueryTerm_EDIT":491,"NonJoinQueryPrimary":492,"NonJoinQueryPrimary_EDIT":493,"SimpleTable":494,"SimpleTable_EDIT":495,"OptionalPartitionBy":496,"OptionalOrderByAndWindow":497,"PartitionBy_EDIT":498,"OptionalOrderByAndWindow_EDIT":499,"PartitionBy":500,"OptionalWindowSpec":501,"WindowSpec_EDIT":502,"WindowSpec":503,"RowsOrRange":504,"PopLexerState":505,"OptionalCurrentOrPreceding":506,"OptionalAndFollowing":507,"UNBOUNDED":508,"OptionalCurrentOrPreceding_EDIT":509,"OptionalAndFollowing_EDIT":510,"PushHdfsLexerState":511,"HdfsPath":512,"HDFS_PATH":513,"HDFS_END_QUOTE":514,"HdfsPath_EDIT":515,"IntegerOrUnbounded":516,"CaseWhenThenList":517,"CaseWhenThenList_EDIT":518,"CaseWhenThenListPartTwo":519,"CaseWhenThenListPartTwo_EDIT":520,"$accept":0,"$end":1},
terminals_: {2:"error",4:"ALTER",5:"CURSOR",8:"CREATE",12:"DROP",17:"SET",32:"ALL",34:"=",41:"TABLE",45:"AS",49:"VIEW",52:"COMMENT",56:"SINGLE_QUOTE",57:"DOUBLE_QUOTE",58:"VALUE",65:"ROLE",79:"LIKE",81:"(",83:")",87:",",97:"NOT",98:"NULL",109:"ARRAY",110:"<",111:">",114:"MAP",115:"STRUCT",122:":",127:"PARTITION",128:"BY",131:"RANGE",142:"VALUES",144:"COMPARISON_OPERATOR",156:"PURGE",164:"INSERT",165:"INTO",170:"LOAD",171:"FROM",173:"EXTERNAL",174:"LOCATION",175:"FORMAT",176:"SOURCE",177:"FIELDS",191:"WITH",206:"GROUP",217:"HAVING",230:"CROSS",231:"JOIN",232:"FULL",233:"OUTER",234:"INNER",235:"LEFT",236:"SEMI",237:"RIGHT",238:"ON",242:"LIMIT",244:"VARIABLE_REFERENCE",248:"ORDER",255:"ASC",256:"DESC",257:"SELECT",263:"DISTINCT",269:"*",278:"UNION",280:"WHERE",283:".",285:"TRUE",286:"FALSE",287:"TRUNCATE",310:"AVG",311:"MAX",312:"MIN",313:"STDDEV_POP",314:"STDDEV_SAMP",315:"VAR_POP",316:"VAR_SAMP",317:"VARIANCE",318:"COUNT",319:"SUM",320:"ANALYTIC",322:"IF",323:"CAST",334:"OVER",337:"UPDATE",353:"USE",356:"EOF",360:";",362:"SetSpecification_EDIT",364:"OPTION",365:"REGULAR_IDENTIFIER",367:"!",368:"-",369:"[",370:"]",371:"~",372:"AND",373:"ARITHMETIC_OPERATOR",374:"BACKTICK",375:"BETWEEN",376:"BIGINT",377:"BOOLEAN",378:"CASE",379:"CHAR",380:"CURRENT",381:"DATABASE",382:"DECIMAL",383:"DOUBLE",384:"ELSE",385:"END",386:"EXISTS",387:"FLOAT",388:"FOLLOWING",389:"HDFS_START_QUOTE",390:"IN",391:"INT",392:"IS",393:"OR",394:"PRECEDING",395:"REGEXP",396:"RLIKE",397:"ROW",398:"ROWS",399:"SCHEMA",400:"SMALLINT",401:"STRING",402:"THEN",403:"TIMESTAMP",404:"TINYINT",405:"UNSIGNED_INTEGER",406:"UNSIGNED_INTEGER_E",407:"VARCHAR",408:"WHEN",409:"PARTIAL_CURSOR",411:"PARTIAL_VALUE",419:"CASCADE",453:"BETWEEN_AND",462:"+",508:"UNBOUNDED",513:"HDFS_PATH",514:"HDFS_END_QUOTE"},
productions_: [0,[3,2],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,2],[20,4],[20,1],[20,1],[21,2],[6,1],[6,2],[6,2],[6,3],[38,3],[40,3],[40,3],[22,3],[7,1],[7,2],[7,3],[7,3],[7,3],[44,3],[47,3],[47,3],[50,0],[50,1],[51,2],[54,1],[55,2],[55,2],[55,3],[55,3],[23,3],[23,5],[9,4],[9,3],[9,5],[9,4],[9,6],[62,1],[64,1],[24,3],[25,4],[10,4],[10,4],[10,3],[66,3],[67,3],[67,3],[67,3],[67,3],[68,2],[71,2],[71,2],[75,0],[75,1],[75,2],[76,1],[76,2],[76,2],[78,3],[80,3],[82,1],[82,3],[84,1],[84,3],[84,3],[84,5],[84,2],[84,4],[84,4],[84,6],[86,3],[88,3],[88,3],[88,3],[91,0],[91,1],[94,1],[94,2],[93,1],[93,2],[93,2],[93,3],[95,2],[95,1],[95,1],[96,2],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[92,1],[92,1],[92,1],[100,4],[103,3],[106,4],[106,4],[101,6],[104,3],[107,6],[107,4],[107,6],[107,5],[102,4],[105,3],[108,4],[116,1],[116,3],[117,1],[117,2],[117,3],[117,3],[117,5],[118,4],[119,5],[119,4],[119,4],[119,4],[119,3],[119,3],[123,1],[123,3],[124,1],[124,2],[124,3],[124,3],[124,5],[125,2],[125,2],[125,1],[125,1],[113,1],[113,1],[69,0],[69,1],[126,3],[72,2],[72,3],[72,3],[129,3],[130,2],[130,2],[130,3],[130,3],[130,3],[133,3],[135,3],[135,3],[136,1],[136,3],[137,1],[137,3],[137,5],[137,3],[137,5],[138,6],[138,4],[138,4],[139,2],[139,2],[139,3],[139,4],[139,4],[139,5],[139,6],[139,6],[139,3],[139,4],[139,4],[141,1],[141,1],[70,0],[70,3],[73,3],[73,3],[145,0],[26,8],[11,4],[11,9],[11,3],[11,6],[11,7],[11,8],[11,8],[11,8],[146,0],[146,1],[148,3],[147,3],[149,2],[149,4],[150,3],[150,5],[150,5],[150,7],[27,5],[13,3],[13,3],[13,4],[13,5],[13,5],[13,6],[28,3],[29,5],[14,3],[14,4],[14,5],[14,5],[14,6],[155,0],[155,1],[30,4],[15,4],[15,5],[15,3],[15,4],[15,4],[157,1],[157,1],[158,1],[161,1],[161,1],[160,6],[162,2],[162,4],[162,4],[162,5],[162,6],[167,1],[167,3],[168,3],[166,0],[166,1],[31,8],[31,11],[31,11],[31,14],[16,2],[16,3],[16,4],[16,4],[16,5],[16,7],[16,8],[16,10],[16,4],[16,5],[16,5],[16,6],[16,8],[16,9],[16,11],[178,3],[180,3],[172,4],[179,2],[179,4],[181,1],[181,3],[182,1],[182,3],[182,3],[182,5],[46,3],[46,5],[46,2],[48,4],[48,3],[48,3],[48,1],[48,4],[48,3],[48,2],[48,2],[185,2],[190,2],[192,1],[192,3],[193,1],[193,3],[193,3],[193,5],[194,5],[195,2],[195,5],[195,5],[198,2],[200,2],[200,2],[199,1],[199,3],[201,1],[201,3],[201,3],[201,5],[201,3],[204,0],[204,1],[205,3],[208,3],[208,3],[208,2],[210,0],[210,1],[210,3],[210,3],[211,1],[211,3],[211,3],[211,5],[211,3],[212,1],[212,1],[207,1],[207,3],[209,1],[209,2],[209,3],[209,3],[209,3],[209,4],[209,5],[214,1],[214,2],[214,1],[215,0],[215,1],[216,2],[218,2],[218,2],[219,0],[219,1],[219,1],[220,3],[220,4],[221,1],[221,2],[225,3],[225,1],[225,3],[225,3],[225,3],[229,1],[229,2],[229,2],[229,3],[222,2],[222,2],[222,3],[222,2],[222,1],[222,3],[222,2],[222,3],[222,3],[222,2],[222,3],[222,2],[222,3],[222,3],[222,2],[226,2],[226,3],[226,3],[226,2],[226,3],[226,3],[226,3],[226,3],[226,2],[226,3],[226,3],[226,3],[226,3],[226,2],[224,0],[224,2],[239,1],[239,3],[228,2],[228,2],[240,0],[240,1],[241,2],[241,4],[241,2],[241,4],[245,2],[246,0],[246,1],[247,3],[250,3],[250,2],[249,1],[249,3],[251,1],[251,2],[251,3],[251,4],[251,5],[252,2],[253,2],[253,2],[254,0],[254,1],[254,1],[186,3],[186,4],[188,3],[188,3],[188,4],[188,4],[188,4],[188,5],[188,6],[188,4],[258,0],[258,1],[258,1],[260,2],[262,2],[262,4],[262,3],[259,1],[259,3],[261,1],[261,2],[261,3],[261,3],[261,3],[261,4],[261,3],[261,3],[261,4],[261,4],[261,4],[261,5],[261,5],[266,2],[266,1],[267,2],[267,3],[267,2],[264,5],[265,5],[265,5],[265,5],[265,5],[265,5],[265,6],[265,6],[265,6],[265,6],[265,6],[187,0],[187,1],[189,1],[274,1],[274,2],[275,1],[275,2],[275,2],[275,3],[276,4],[277,3],[277,4],[277,4],[271,0],[271,1],[273,2],[272,2],[272,2],[281,1],[282,1],[33,1],[33,3],[35,1],[35,1],[35,2],[35,1],[35,1],[35,1],[35,1],[36,4],[18,2],[18,4],[18,3],[18,4],[18,5],[18,5],[18,5],[289,2],[289,2],[289,1],[295,1],[295,2],[295,1],[295,2],[295,2],[295,2],[295,1],[290,1],[290,1],[290,1],[296,1],[296,1],[296,1],[301,4],[301,5],[304,5],[304,6],[304,5],[307,1],[307,1],[307,1],[307,1],[307,1],[307,1],[307,1],[307,1],[302,4],[302,3],[302,5],[305,5],[305,6],[305,5],[303,5],[303,3],[306,5],[306,6],[306,5],[292,3],[292,4],[298,4],[298,5],[298,4],[321,1],[321,1],[321,1],[321,1],[294,6],[294,3],[300,6],[300,5],[300,4],[300,6],[300,5],[300,4],[300,6],[300,5],[300,6],[300,5],[324,2],[324,2],[324,1],[324,1],[324,1],[324,1],[328,2],[328,2],[328,1],[328,1],[328,1],[332,2],[332,2],[333,2],[333,2],[326,2],[326,3],[329,3],[329,4],[329,3],[308,1],[308,3],[309,1],[309,3],[309,3],[309,5],[309,3],[309,5],[309,4],[309,3],[309,2],[309,2],[309,4],[291,0],[291,1],[297,1],[293,2],[293,2],[299,2],[159,6],[163,6],[163,6],[163,6],[163,6],[163,7],[163,3],[163,2],[163,2],[163,2],[338,1],[341,1],[344,1],[345,1],[339,1],[339,3],[342,1],[342,3],[342,3],[342,5],[348,3],[349,3],[349,2],[349,1],[350,1],[351,1],[352,1],[340,0],[340,2],[343,2],[343,2],[37,2],[19,2],[354,3],[357,3],[357,3],[279,0],[355,0],[355,1],[355,4],[358,1],[358,4],[358,4],[358,7],[359,1],[359,1],[359,1],[361,1],[361,2],[361,1],[361,1],[361,1],[361,1],[363,1],[363,1],[363,1],[61,1],[61,1],[61,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[366,1],[120,1],[120,2],[112,1],[112,1],[410,1],[410,1],[59,1],[59,1],[183,3],[183,2],[184,2],[412,3],[412,2],[413,2],[53,1],[53,1],[414,1],[414,1],[415,0],[415,2],[417,2],[153,0],[153,1],[152,0],[152,2],[154,2],[60,0],[60,3],[63,2],[63,3],[420,0],[420,2],[420,2],[288,0],[288,1],[421,1],[39,4],[422,4],[425,5],[427,2],[427,3],[427,4],[427,5],[427,5],[427,5],[426,1],[426,1],[426,1],[426,1],[428,1],[428,1],[429,1],[429,1],[431,1],[431,1],[432,1],[432,1],[430,2],[85,1],[85,1],[433,0],[433,1],[434,1],[132,3],[134,3],[134,3],[435,1],[435,3],[436,3],[436,5],[437,3],[438,1],[438,3],[42,1],[42,3],[43,1],[43,3],[43,3],[74,1],[74,3],[77,1],[77,3],[77,3],[416,1],[418,1],[423,1],[423,3],[424,1],[424,3],[424,3],[424,5],[439,3],[440,3],[440,3],[440,3],[440,1],[121,1],[121,3],[121,2],[441,1],[441,3],[442,1],[442,3],[346,1],[346,2],[347,1],[347,2],[151,1],[151,3],[213,1],[443,1],[443,3],[444,3],[444,5],[445,1],[445,3],[446,1],[446,3],[446,5],[446,3],[89,1],[447,1],[447,1],[99,1],[99,1],[99,2],[99,2],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,2],[448,0],[448,3],[449,0],[449,3],[449,5],[140,1],[140,2],[140,2],[140,2],[140,2],[140,4],[140,4],[140,4],[140,6],[140,2],[140,3],[140,3],[140,3],[140,3],[140,3],[140,6],[140,6],[140,5],[140,5],[140,6],[140,5],[140,3],[140,3],[140,3],[140,3],[140,3],[140,2],[140,3],[140,2],[140,3],[143,1],[143,3],[143,2],[143,2],[143,2],[143,2],[143,2],[143,2],[143,2],[143,2],[143,3],[143,4],[143,5],[143,4],[143,4],[143,4],[143,6],[143,6],[143,2],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,4],[143,3],[143,6],[143,6],[143,5],[143,5],[143,6],[143,6],[143,6],[143,6],[143,5],[143,4],[143,5],[143,5],[143,5],[143,5],[143,4],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,2],[143,3],[143,2],[143,3],[143,2],[143,3],[143,2],[143,3],[143,3],[143,4],[143,3],[143,3],[143,3],[452,1],[452,3],[461,1],[461,3],[461,3],[461,5],[461,3],[461,5],[461,4],[461,3],[461,2],[461,2],[461,4],[169,1],[169,3],[325,1],[325,3],[331,1],[284,1],[284,2],[284,2],[327,1],[330,1],[463,1],[463,1],[464,1],[243,1],[243,1],[467,1],[467,2],[467,3],[467,2],[468,2],[468,3],[468,4],[465,1],[465,1],[465,1],[466,1],[466,1],[469,1],[469,1],[450,0],[450,1],[202,1],[203,1],[470,1],[470,1],[471,1],[471,1],[472,2],[473,2],[473,2],[223,2],[223,2],[227,2],[227,2],[227,2],[474,1],[476,1],[475,1],[477,1],[478,0],[478,2],[479,2],[479,2],[480,0],[481,0],[451,3],[451,4],[456,3],[456,3],[196,2],[197,3],[482,1],[483,1],[484,1],[485,1],[486,1],[487,1],[488,1],[489,1],[490,1],[491,1],[492,1],[493,1],[494,1],[495,1],[268,0],[268,1],[268,1],[268,2],[268,2],[270,1],[270,1],[270,2],[270,2],[270,2],[335,4],[336,4],[336,4],[336,5],[336,7],[496,0],[496,1],[500,3],[498,2],[498,3],[498,3],[497,0],[497,2],[499,1],[499,3],[499,2],[501,0],[501,1],[503,5],[503,5],[502,2],[502,6],[502,5],[502,5],[502,5],[502,4],[505,0],[511,0],[512,3],[515,5],[515,4],[515,3],[515,3],[515,2],[504,1],[504,1],[506,0],[506,2],[506,2],[509,2],[509,2],[507,0],[507,3],[507,3],[510,2],[510,3],[510,3],[516,1],[516,1],[457,3],[457,3],[457,3],[454,2],[454,2],[454,2],[458,2],[458,2],[458,2],[458,2],[458,2],[458,2],[455,2],[455,4],[459,2],[459,4],[459,4],[459,3],[459,4],[459,3],[459,4],[459,4],[459,3],[459,4],[459,3],[460,1],[460,1],[517,1],[517,2],[518,1],[518,2],[518,3],[518,3],[518,2],[519,4],[520,2],[520,3],[520,4],[520,4],[520,3],[520,3],[520,4],[520,2],[520,3],[520,2],[520,3],[520,3],[520,4],[520,3],[520,4],[520,4],[520,5],[520,4],[520,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

     parser.suggestKeywords(['TABLE', 'VIEW']);
   
break;
case 4:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW', 'EXTERNAL']);
   
break;
case 8:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW']);
   
break;
case 13:

     parser.suggestSetOptions();
   
break;
case 36: case 45: case 240: case 244: case 512: case 632:

     parser.addTablePrimary($$[$0]);
   
break;
case 37: case 235:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyTables = true;
     }
   
break;
case 38:

     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 41: case 312:

     parser.suggestKeywords(['AS']);
   
break;
case 43: case 202: case 211: case 313: case 668: case 1115:

     parser.suggestKeywords(['SELECT']);
   
break;
case 46: case 245:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyViews = true;
     }
   
break;
case 47:

     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 57:

     parser.addNewDatabaseLocation(_$[$0-1], [{ name: $$[$0-1] }]);
   
break;
case 58: case 68:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 60:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 61:

     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 62:

     parser.addNewDatabaseLocation(_$[$0-2], [{ name: $$[$0-2] }]);
   
break;
case 63:

     if (!$$[$0]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 74:

     var keywords = [];
     if (!$$[$0-2] && !$$[$0-1]) {
       keywords.push({ value: 'LIKE', weight: 1 });
     } else {
       if (!$$[$0-1]) {
         keywords.push({ value: 'PARTITIONED BY', weight: 12 });
       }
       keywords.push({ value: 'AS', weight: 1 });
     }

     if (keywords.length > 0) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 75:

     parser.addNewTableLocation(_$[$0-1], $$[$0-1], $$[$0]);
     this.$ = $$[$0];
   
break;
case 80:
this.$ = [];
break;
case 82: case 629: case 649: case 862:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 84: case 220: case 222: case 294: case 464: case 597: case 600: case 795: case 798: case 884: case 937: case 1112:
this.$ = $$[$0-1];
break;
case 86: case 305:
this.$ = [$$[$0]];
break;
case 87:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 92: case 94:

     parser.checkForKeywords($$[$0-1]);
   
break;
case 93: case 95:

     parser.checkForKeywords($$[$0-3]);
   
break;
case 96:

     this.$ = $$[$0-2];
     this.$.type = $$[$0-1];
     var keywords = [];
     if (!$$[$0]['comment']) {
       keywords.push('COMMENT');
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 97: case 124: case 130: case 131: case 144: case 147: case 156: case 158:

     parser.suggestKeywords(parser.getColumnDataTypeKeywords());
   
break;
case 100:
this.$ = {};
break;
case 102:

     this.$ = {};
     this.$[$$[$0]] = true;
   
break;
case 103:

     $$[$0-1][$$[$0]] = true;
   
break;
case 108: case 109:
this.$ = 'null';
break;
case 110:
this.$ = 'comment';
break;
case 111:

     parser.suggestKeywords(['NULL']);
   
break;
case 129:

     parser.suggestKeywords(parser.getTypeKeywords());
   
break;
case 143: case 146:

     parser.suggestKeywords(['COMMENT']);
   
break;
case 165: case 1150:

     parser.suggestKeywords(['BY']);
   
break;
case 166:

     parser.suggestKeywords(['RANGE']);
   
break;
case 175: case 180: case 181:

     parser.suggestKeywords(['PARTITION']);
   
break;
case 187:

     parser.suggestKeywords(['VALUE', 'VALUES']);
   
break;
case 188:

     if ($$[$0].endsWithLessThanOrEqual) {
      parser.suggestKeywords(['VALUES']);
     }
   
break;
case 189: case 192: case 195:

     parser.suggestKeywords(['<', '<=']);
   
break;
case 190: case 827: case 830:

     parser.suggestKeywords(['VALUES']);
   
break;
case 193: case 196:

     parser.suggestFunctions();
   
break;
case 204:

     parser.commitLocations();
   
break;
case 206:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.suggestDatabases({ appendDot: true });
   
break;
case 207:

     if (!$$[$0-6]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 210:

     var keywords = [{value: 'AS', weight: 1 }];
     if (!$$[$0-1]) {
       keywords.push({ value: 'COMMENT', weight: 3 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 217:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 221: case 223:
this.$ = $$[$0-3];
break;
case 227:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestDatabases();
   
break;
case 228:

     parser.suggestKeywords(['CASCADE']);
   
break;
case 230:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 232: case 517:

     parser.addTablePrimary($$[$0-1]);
   
break;
case 234:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 237:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0-1]) {
       parser.suggestKeywords(['PURGE']);
     }
   
break;
case 241:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 242:

     parser.addTablePrimary($$[$0]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 251:

     $$[$0-2].owner = 'insert';
     parser.addTablePrimary($$[$0-2]);
   
break;
case 252:

     parser.suggestKeywords(['INTO']);
   
break;
case 253:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['TABLE']);
     }
     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 255:

     $$[$0-1].owner = 'insert';
     parser.addTablePrimary($$[$0-1]);
     parser.suggestKeywords(['VALUES']);
   
break;
case 266:

    parser.suggestKeywords(['TABLE']);
  
break;
case 267:

    parser.suggestTables();
    parser.suggestDatabases({ appendDot: true });
  
break;
case 268:

    parser.suggestKeywords(['FROM', 'SOURCE FIELDS']);
  
break;
case 270: case 277:

    parser.suggestKeywords(['EXTERNAL LOCATION']);
  
break;
case 271: case 278:

    parser.suggestExternalLocations();
  
break;
case 272: case 279:

    parser.suggestKeywords(['EXTERNAL FORMAT']);
  
break;
case 273: case 280:

    parser.suggestExternalFormats();
  
break;
case 275:

    parser.suggestKeywords(['FROM']);
  
break;
case 284:

    parser.suggestKeywords(['(']);
  
break;
case 293: case 466:
this.$ = $$[$0-2];
break;
case 295:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 296: case 297: case 308:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 303: case 319: case 343: case 419: case 423: case 461: case 471: case 498: case 648: case 1037: case 1039: case 1094: case 1149: case 1224:
this.$ = $$[$0];
break;
case 306:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 310:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 311:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 315:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 316: case 324:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 327:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 328: case 430:

     parser.suggestSelectListAliases();
   
break;
case 329:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 330:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 340: case 643: case 852: case 855: case 856: case 881: case 882: case 903: case 906:

     parser.suggestColumns();
   
break;
case 345: case 346: case 352: case 353: case 880: case 1108: case 1151:

     parser.valueExpressionSuggest();
   
break;
case 357:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 358:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 362:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 363:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 364:
this.$ = { joinType: $$[$0] };
break;
case 365:
this.$ = { joinType: $$[$0-1] };
break;
case 366:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 367:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 370:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 375:
this.$ = 'CROSS JOIN';
break;
case 376:
this.$ = 'FULL JOIN';
break;
case 377:
this.$ = 'FULL OUTER JOIN';
break;
case 378:
this.$ = 'INNER JOIN';
break;
case 379:
this.$ = 'JOIN';
break;
case 380:
this.$ = 'LEFT INNER JOIN';
break;
case 381:
this.$ = 'LEFT JOIN';
break;
case 382:
this.$ = 'LEFT OUTER JOIN';
break;
case 383:
this.$ = 'LEFT SEMI JOIN';
break;
case 384:
this.$ = 'OUTER JOIN';
break;
case 385: case 387:
this.$ = 'RIGHT OUTER JOIN';
break;
case 386:
this.$ = 'RIGHT JOIN';
break;
case 388:
this.$ = 'RIGHT SEMI JOIN';
break;
case 389:
this.$ = 'SEMI JOIN';
break;
case 390: case 392: case 393: case 395: case 396: case 397: case 398: case 400: case 401: case 402: case 403:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 391: case 394: case 399:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 404:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 405:
this.$ = { valueExpression: $$[$0] };
break;
case 409:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 416:

     parser.suggestKeywords([{ value: '10', weight: 10000 }, { value: '100', weight: 10000 }, { value: '1000', weight: 10000 }, { value: '5000', weight: 10000 }, { value: '10000', weight: 10000 }])
   
break;
case 420:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 421:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 425:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 426: case 427: case 428:
this.$ = { emptyOrderBy: false };
break;
case 429:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 431:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 432:
this.$ = { suggestKeywords: ['ASC', 'DESC'] };;
break;
case 435:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 436:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 437:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 438:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 439:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 440:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 441:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 442:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 443:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 444:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 448: case 449:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 450:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 451:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 452:
this.$ = [ $$[$0] ];
break;
case 453:

     $$[$0-2].push($$[$0]);
   
break;
case 455: case 456:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 458:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 459:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 460:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 462: case 463: case 465:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 467:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push($$[$0-1].function && $$[$0-1].types && $$[$0-1].types.length && $$[$0-1].types[0] === 'UDFREF' ? { name: $$[$0].alias, udfRef: $$[$0-1].function, types: $$[$0-1].types } : { name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 468:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 469:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 470:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 472:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 473:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 474:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 476:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 478:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 479:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 480:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 481:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 482:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 493:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 494:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 499:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 500:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 513:

     parser.suggestKeywords(['TABLE']);
   
break;
case 514:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 518:

     parser.addTablePrimary($$[$0-1]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 520:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 527:

     parser.suggestKeywords(['OVER']);
   
break;
case 536:

     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 537: case 555:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 538:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 539: case 553:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 540:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].activePosition);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 549:

     parser.addFunctionArgumentLocations($$[$0-3], [{
       expression: { text: $$[$0-1] },
       location: _$[$0-1]
     }]);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] }
   
break;
case 550: case 556:

     this.$ = { function: $$[$0-2], types: ['UDFREF'] }
   
break;
case 551:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] }
   
break;
case 552:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 554:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 557:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 558:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 559:

     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 560:

    this.$ = { function: $$[$0-2], types: ['UDFREF'] }
  
break;
case 561:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     this.$ = {
       function: $$[$0-3],
       expression: $$[$0-1].expressions[$$[$0-1].expressions.length - 1].expression,
       types: ['UDFREF']
     }
   
break;
case 562:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 563:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-2].expressions);
     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 564:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].activePosition);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 569:

     var expression = $$[$0-3];
     parser.extractExpressionText(expression, $$[$0-3], $$[$0-2], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-5], [{
       expression: expression,
       location: {
         first_line: _$[$0-3].first_line,
         last_line: _$[$0-1].last_line,
         first_column: _$[$0-3].first_column,
         last_column: _$[$0-1].last_column
       }
     }]);
     this.$ = { types: [ $$[$0-1].toUpperCase() ] }
   
break;
case 570: case 575: case 576: case 1043:
this.$ = { types: [ 'T' ] };
break;
case 571:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 572: case 573:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 574:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 577:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 578:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 579: case 580:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 581:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     if ($$[$0-1].lastLoc && $$[$0-1].lastLoc.location) {
       $$[$0-1].lastLoc.type = 'function';
       $$[$0-1].lastLoc.function = fn;
       $$[$0-1].lastLoc.location = {
         first_line: $$[$0-1].lastLoc.location.first_line,
         last_line: $$[$0-1].lastLoc.location.last_line,
         first_column: $$[$0-1].lastLoc.location.first_column,
         last_column: $$[$0-1].lastLoc.location.last_column - 1
       }
       if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
          $$[$0-1].firstLoc.type = 'database';
       } else {
         delete $$[$0-1].lastLoc.identifierChain;
       }
     }
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: fn, expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: fn, types: ['UDFREF'] }
     }
   
break;
case 582:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expressions && $$[$0].expressions.length) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
    } else {
      this.$ = { function: $$[$0-1], types: ['UDFREF'] }
    }
  
break;
case 585:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 586:
this.$ = { types: [ 'NULL' ], text: $$[$0] };
break;
case 587:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].activePosition);
     }
     this.$ = { function: fn, types: ['UDFREF'] };
   
break;
case 588: case 594: case 595:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].activePosition);
     }
     this.$ = { function: $$[$0-1], types: ['UDFREF'] };
   
break;
case 591:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 592: case 593:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: $$[$0-1], types: ['UDFREF'] }
     }
   
break;
case 598:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }]
     }
   
break;
case 599:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = $$[$0-3];
   
break;
case 601: case 603:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0], location: _$[$0] }]
     }
   
break;
case 602: case 604:

     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: $$[$0], location: _$[$0] }])
     }
   
break;
case 605:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0-2], location: _$[$0-2] }].concat($$[$0].expressions)
     }
   
break;
case 606:

     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: $$[$0-2], location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 607:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: { text: '' }, location: _$[$0] }])
     }
   
break;
case 608:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: { text: '' }, location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 609:

     parser.suggestValueExpressionKeywords($$[$0-3].expressions[$$[$0-3].expressions.length - 1].expression);
     this.$ = {
       activePosition: $$[$0-3].activePosition,
       expressions: $$[$0-3].expressions.concat($$[$0].expressions)
     }
   
break;
case 610:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 611:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 612:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 613:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-3] }, { expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 625:

     parser.suggestKeywords([ 'WHERE' ]);
   
break;
case 626:

     parser.suggestKeywords([ 'SET' ]);
   
break;
case 642:

     parser.suggestKeywords([ '=' ]);
   
break;
case 651:

     if (! parser.yy.cursorFound) {
       parser.yy.result.useDatabase = $$[$0];
     }
   
break;
case 652: case 871:

     parser.suggestDatabases();
   
break;
case 654: case 655:

     return parser.yy.result;
   
break;
case 656:

     parser.prepareNewStatement();
   
break;
case 658: case 660: case 662:

     parser.addStatementLocation(_$[$0]);
   
break;
case 661: case 663:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 667:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 796: case 799: case 885:
this.$ = '';
break;
case 811: case 814:

     parser.yy.correlatedSubQuery = false;
   
break;
case 812: case 816:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 815:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 826: case 828: case 829: case 831:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 860: case 886:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 861: case 887:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 863: case 868:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 864: case 889:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 865:
this.$ = [{ name: $$[$0] }];
break;
case 866:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 867:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 888:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 891:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 894:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 895: case 1060:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 897:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 898:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 899:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 900:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 901:
this.$ = [ $$[$0].identifier ];
break;
case 902:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 904:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 905:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 907:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 928: case 929:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 930: case 955:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 931:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 932: case 933: case 934:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 935:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 936:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 938: case 939: case 940: case 941:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 942: case 943: case 944: case 945: case 975: case 1033: case 1034:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 946:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 947:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 948: case 949:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 950: case 951: case 952:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 953:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 954:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 956:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 958:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 959: case 961:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 960:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 962:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 963:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 964:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 965:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 966:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 967:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 968:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 969:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 970: case 971: case 972:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 973:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 974:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 976:

     this.$ = $$[$0-1];
   
break;
case 977:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 978:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 979: case 980: case 981:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 982: case 983: case 984: case 985:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0]);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 986: case 988:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 987:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 989:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 990: case 991: case 992: case 993:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 994:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 995:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 996: case 997:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 998: case 999:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 1000:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 1001:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 1002:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1003:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1004: case 1010:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1005:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1006:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 1007:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 1008:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1009:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1011:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1012: case 1014: case 1016: case 1018:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 1013: case 1017:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1015: case 1019:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 1020: case 1021:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1022: case 1023: case 1024:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1025: case 1026: case 1027:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1028: case 1029: case 1030:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1031:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1032:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1035:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1036:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1038:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1040:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1041:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 1042:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1044: case 1046:

     $$[$0].position = 1;
   
break;
case 1045:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 1047:

     $$[$0-2].position += 1;
   
break;
case 1048:

     $$[$0-2].position = 1;
   
break;
case 1049:

     $$[$0-4].position += 1;
   
break;
case 1050:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 1051:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 1052:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 1053: case 1054:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 1055: case 1056:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 1059:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 1066:

     parser.suggestValues($$[$0]);
   
break;
case 1067:
this.$ = { types: [ 'NUMBER' ], text: $$[$0] };
break;
case 1073: case 1075: case 1076:
this.$ = $$[$0-1] + $$[$0];
break;
case 1074: case 1077:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1078:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1079:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: "'" + $$[$0] + "'" }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 1080:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: '"' + $$[$0] + '"' }
     } else {
       this.$ = { types: [ 'STRING' ], text: '"' + $$[$0] + '"' }
     }
   
break;
case 1081:
this.$ = { types: [ 'BOOLEAN' ], text: $$[$0] };
break;
case 1082:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1083:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1090:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 1097:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1098:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1099:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 1100:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 1110:

     parser.pushQueryState();
   
break;
case 1111:

     parser.popQueryState();
   
break;
case 1113:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 1116:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 1133: case 1134: case 1135: case 1136:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 1143: case 1144:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 1145:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 1146:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 1155:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 1156:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 1162:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 1163:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 1168:

    lexer.popState();
  
break;
case 1169:

    lexer.begin('hdfs');
  
break;
case 1171:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 1172:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 1173:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 1174:

     parser.suggestHdfs({ path: '' });
   
break;
case 1175:

      parser.suggestHdfs({ path: '' });
    
break;
case 1181:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 1182: case 1187:

     parser.suggestKeywords(['ROW']);
   
break;
case 1186:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 1188:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 1192:
this.$ = { inValueEdit: true };
break;
case 1193:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 1194: case 1195: case 1196:

     this.$ = { suggestKeywords: ['NOT'] }
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1200: case 1201: case 1202:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 1203:

     this.$ = parser.findCaseType($$[$0-1])
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1204:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1205:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 1206:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1207:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1208:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 1209:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1210:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 1211:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 1212:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1213:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1214:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 1215:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 1218:

     this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] }
     parser.extractExpressionText(this.$, $$[$0]);
   
break;
case 1219:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1223:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 1225:

     this.$ = $$[$0]
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1226:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 1227:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1228:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1229: case 1230:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 1231:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1232:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 1233:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1234:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 1235: case 1237:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1236:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1238:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 1239:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1240:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1241: case 1242: case 1243: case 1244:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
}
},
table: [o($V0,$V1,{354:1,279:2}),{1:[3]},o($V2,$V3,{355:3,359:4,20:5,157:6,46:7,21:8,22:9,23:10,24:11,25:12,26:13,27:14,28:15,29:16,30:17,31:18,36:20,37:21,158:22,159:23,185:24,186:25,38:26,44:27,160:33,4:$V4,8:$V5,12:$V6,17:$V7,164:$V8,170:$V9,191:$Va,257:$Vb,287:$Vc,337:$Vd,353:$Ve}),{356:[1,39],360:[1,40]},o($V2,[2,658]),o($V2,[2,664]),o($V2,[2,665]),o($V2,[2,666]),o($V2,[2,16]),o($V2,[2,17]),o($V2,[2,18]),o($V2,[2,19]),o($V2,[2,20]),o($V2,[2,21]),o($V2,[2,22]),o($V2,[2,23]),o($V2,[2,24]),o($V2,[2,25]),o($V2,[2,26]),{32:[1,41],33:42,61:43,65:$Vf,115:$Vg,244:$Vh,363:46,364:$Vi,365:$Vj},o($V2,[2,29]),o($V2,[2,30]),o($V2,[2,246]),o($V2,[2,247]),{81:[1,51],186:50,257:$Vb},o($Vk,$Vl,{187:52,274:53,276:54,278:$Vm}),{39:56,127:[1,57]},{45:[1,58]},{41:[1,61],49:[1,62],59:59,65:[1,60],381:$Vn,399:$Vo},{41:[1,67],49:[1,68],59:65,65:[1,66],381:$Vn,399:$Vo},{41:[1,69]},{41:[1,70]},{61:71,65:$Vf,115:$Vg,244:$Vh,363:46,364:$Vi,365:$Vj},o($V2,[2,248]),{61:77,65:$Vf,115:$Vg,121:76,244:$Vh,338:72,344:73,346:74,363:46,364:$Vi,365:$Vj,374:$Vp,441:75},{61:77,65:$Vf,115:$Vg,121:81,192:79,194:80,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},o([56,57,65,81,97,98,109,114,115,244,269,283,285,286,287,310,311,312,313,314,315,316,317,318,319,320,322,323,364,365,367,368,371,374,378,386,405,406],$Vq,{258:82,32:$Vr,263:$Vs}),{41:[1,85],49:[1,86]},{165:[1,87]},{1:[2,653]},o($V0,$V1,{279:88}),o($V2,[2,27]),{34:[1,89],283:[1,90]},o($Vt,[2,503]),o($Vu,[2,676]),o($Vu,[2,677]),o($Vu,[2,678]),o($Vu,[2,673]),o($Vu,[2,674]),o($Vu,[2,675]),o($Vk,$Vl,{274:53,276:54,187:91,278:$Vm}),{46:92,185:24,186:25,191:$Va,257:$Vb},o($Vk,[2,294]),o($Vk,[2,484],{276:93,278:$Vm}),o($Vv,[2,486]),o([32,257,263],$V1,{279:94}),o($V2,[2,31]),{81:[1,95]},{46:96,185:24,186:25,191:$Va,257:$Vb},o($Vw,$Vx,{60:97,322:$Vy}),{61:99,65:$Vf,115:$Vg,244:$Vh,363:46,364:$Vi,365:$Vj},o($Vz,$Vx,{60:100,322:$Vy}),o($Vz,$Vx,{60:101,322:$Vy}),o($VA,[2,793]),o($VA,[2,794]),o($Vz,$VB,{152:102,322:$VC}),{61:104,65:$Vf,115:$Vg,244:$Vh,363:46,364:$Vi,365:$Vj},o($Vz,$VB,{152:105,322:$VC}),o($Vz,$VB,{152:106,322:$VC}),{42:107,61:77,65:$Vf,115:$Vg,121:108,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},o($Vz,$VB,{152:109,322:$VC}),o($V2,[2,651]),{17:[1,110]},{17:[2,630]},{17:[2,632]},{17:[2,890],61:77,65:$Vf,115:$Vg,121:111,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},o($VD,[2,886],{283:[1,112]}),o($Vu,[2,883]),{58:[1,113],374:[1,114]},o([81,257],[2,303],{87:[1,115]}),o($VE,[2,305]),{45:[1,116]},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:119,183:157,243:149,244:$Vh,259:117,266:118,269:$VM,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($V91,[2,446]),o($V91,[2,447]),{42:175,61:77,65:$Vf,115:$Vg,121:108,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{42:176,61:77,65:$Vf,115:$Vg,121:108,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},o($Vz,[2,260],{166:177,41:[1,178]}),o($V2,$V3,{359:4,20:5,157:6,46:7,21:8,22:9,23:10,24:11,25:12,26:13,27:14,28:15,29:16,30:17,31:18,36:20,37:21,158:22,159:23,185:24,186:25,38:26,44:27,160:33,355:179,4:$V4,8:$V5,12:$V6,17:$V7,164:$V8,170:$V9,191:$Va,257:$Vb,287:$Vc,337:$Vd,353:$Ve}),{35:180,53:183,56:$VF,57:$VG,61:181,65:$Vf,98:[1,186],115:$Vg,183:190,243:187,244:$Vh,283:$VN,284:182,285:[1,184],286:[1,185],363:46,364:$Vi,365:$Vj,368:[1,188],405:$V71,406:$V81,412:191,462:[1,189],467:155,468:156},{61:192,65:$Vf,115:$Vg,244:$Vh,363:46,364:$Vi,365:$Vj},o($Vk,[2,292]),{83:[1,193]},o($Vv,[2,487]),{32:$Vr,257:$Vq,258:194,263:$Vs},{61:77,65:$Vf,89:197,115:$Vg,121:151,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp,423:195,439:196},o($V2,[2,39]),o($V2,[2,56],{363:46,61:198,65:$Vf,115:$Vg,244:$Vh,364:$Vi,365:$Vj}),{97:[1,199]},o($V2,[2,65]),{61:77,65:$Vf,66:200,68:201,74:202,115:$Vg,121:203,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{61:77,65:$Vf,74:204,115:$Vg,121:203,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{61:77,65:$Vf,115:$Vg,121:205,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{386:[1,206]},o($V2,[2,231]),{42:207,61:77,65:$Vf,115:$Vg,121:108,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{42:208,61:77,65:$Vf,115:$Vg,121:108,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{171:[1,209],176:[1,210]},o($Va1,[2,860],{283:[1,211]}),{42:212,61:77,65:$Vf,115:$Vg,121:108,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{61:77,65:$Vf,89:143,115:$Vg,121:151,151:216,244:$Vh,339:213,348:214,350:215,363:46,364:$Vi,365:$Vj,374:$Vp,443:217},{17:[2,891]},{61:77,65:$Vf,115:$Vg,121:218,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{374:[1,219]},o($Vu,[2,885]),{61:77,65:$Vf,115:$Vg,121:81,194:220,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{81:[1,221]},o($Vv,[2,435],{260:222,198:224,87:[1,223],171:[1,225]}),o($Vb1,[2,452]),o($Vb1,$Vc1,{363:46,61:77,183:190,412:191,268:226,454:240,121:241,53:242,34:$Vd1,45:$Ve1,56:$VF,57:$VG,65:$Vf,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,115:$Vg,144:$Vj1,244:$Vh,269:$Vk1,364:$Vi,365:$Vj,368:$Vl1,372:$Vm1,373:$Vn1,374:$Vp,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1}),o($Vb1,[2,468]),o($Vu1,[2,927]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:247,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:248,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:249,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:250,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{81:$Vv1,451:251},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:253,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:255,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,408:$Vw1,412:158,443:134,455:254,463:142,465:150,467:155,468:156,469:159,517:256,519:257},o($Vu1,[2,585],{326:259,81:$Vx1}),{81:$Vx1,326:261},o($Vu1,[2,583]),o($Vu1,[2,584]),o($Vu1,[2,586]),o($Vy1,[2,1059],{283:[1,262]}),{81:[2,565]},{81:[2,566]},{81:[2,567]},{81:[2,568]},o($Vu1,[2,614],{291:263,293:264,334:$Vz1}),{293:266,334:$Vz1},o($Vu1,[2,522]),o($Vu1,[2,1065]),o($VA1,[2,897]),o($VB1,[2,530]),o($VB1,[2,531]),o($VB1,[2,532]),{81:[1,267]},{81:[1,268]},o($Vu1,[2,1067]),o($Vu1,[2,1068]),o([34,45,52,56,57,65,79,81,83,87,97,109,110,111,114,115,131,144,171,206,217,230,231,232,233,234,235,236,237,242,244,248,255,256,269,278,280,283,356,360,364,365,368,372,373,374,375,376,377,379,382,383,384,385,387,390,391,392,393,395,396,398,400,401,402,403,404,407,408,453],[2,907]),{81:[1,269]},{81:[1,270]},{81:[1,271]},o($Vu1,[2,1070]),o($Vu1,[2,1071]),o($Vu1,[2,1079]),o($Vu1,[2,1080]),o($Vu1,[2,1081]),{81:[2,541]},{81:[2,542]},{81:[2,543]},{81:[2,544]},{81:[2,545]},{81:[2,546]},{81:[2,547]},{81:[2,548]},o($Vu1,[2,1072],{283:[1,272]}),{405:[1,273],406:[1,274]},{405:[1,275]},{56:[1,277],58:[1,276]},{57:[1,279],58:[1,278]},o($Vu1,[2,1084]),o($Vu1,[2,1085]),{127:[2,36]},{45:[2,45]},{42:280,61:77,65:$Vf,115:$Vg,121:108,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},o($Vz,[2,261]),o($V2,[2,659]),o($V2,[2,28]),o($V2,[2,505]),o($V2,[2,506],{363:46,61:281,65:$Vf,115:$Vg,244:$Vh,364:$Vi,365:$Vj}),o($V2,[2,508]),o($V2,[2,509]),o($V2,[2,510]),o($V2,[2,511]),o($Vw,[2,1062]),{243:282,283:$VN,405:$V71,406:$V81,467:155,468:156},{243:283,283:$VN,405:$V71,406:$V81,467:155,468:156},o($VC1,[2,801]),o($VC1,[2,802]),o($Vt,[2,504]),o($Vk,$Vl,{274:53,276:54,187:284,278:$Vm}),{186:285,257:$Vb},{83:[1,286],87:[1,287]},o($VD1,[2,872]),{34:[1,288]},o($V2,$VE1,{62:289,50:290,51:291,52:$VF1}),{386:[1,293]},o($V2,[2,66]),o($VG1,[2,162],{69:294,126:295,127:[1,296]}),o($VH1,[2,78],{75:297,78:298,79:[1,299],81:$VI1}),o($VJ1,[2,865],{283:[1,301]}),o($VK1,[2,214],{146:302,148:303,81:[1,304]}),o($V2,[2,808],{153:305,419:[1,306]}),o($Vz,[2,811]),o($V2,[2,238],{155:307,156:[1,308]}),o($V2,[2,240]),{171:$VL1,172:309},{177:[1,311]},{61:77,65:$Vf,115:$Vg,121:312,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},o($V2,[2,512]),o($VM1,[2,647],{340:313,87:[1,314],171:[1,315]}),o($VN1,[2,634]),{34:[1,316]},{34:[2,644]},o($VO1,[2,894],{283:[1,317]}),o($VD,[2,887]),o($Vu,[2,884]),o($VE,[2,306]),o($VP1,$VQ1,{196:318,480:319}),o($Vv,[2,436]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:119,183:157,243:149,244:$Vh,266:320,269:$VM,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($VR1,$VS1,{264:321,271:322,273:323,280:$VT1}),{42:332,61:77,65:$Vf,81:$Vv1,115:$Vg,121:108,199:325,202:326,223:328,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp,451:333,470:327,472:329,474:330,475:331},o($Vb1,[2,467]),o($VU1,[2,1086],{450:334,97:[1,335]}),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:336,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:337,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:338,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:339,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{79:$Vf1,375:[1,341],390:[1,340],395:$Vs1,396:$Vt1,454:342},{81:[1,343]},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:344,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:345,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:346,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:347,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:348,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:349,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($Vu1,[2,953]),o($VV1,[2,1133]),o($VV1,[2,1134]),{53:351,56:$VF,57:$VG,61:77,65:$Vf,115:$Vg,121:350,183:190,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp,412:191},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:352,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:353,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:354,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($VW1,[2,928],{454:240,34:$Vd1,79:$Vf1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,373:$Vn1,390:$Vp1,392:$Vq1,395:$Vs1,396:$Vt1}),o($VW1,[2,929],{454:240,34:$Vd1,79:$Vf1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,373:$Vn1,390:$Vp1,392:$Vq1,395:$Vs1,396:$Vt1}),o($VW1,[2,930],{454:240,34:$Vd1,79:$Vf1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,373:$Vn1,390:$Vp1,392:$Vq1,395:$Vs1,396:$Vt1}),o($VX1,[2,931],{454:240}),o($Vu1,[2,936]),o($VP1,$VQ1,{480:319,451:333,196:355,475:356,81:$Vv1}),{34:$Vd1,79:$Vf1,83:[1,357],97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1,454:240},o($Vu1,[2,955]),{34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1,408:$Vw1,454:240,455:358,517:256,519:257},{384:[1,360],385:[1,359],408:$Vw1,519:361},o($VY1,[2,1218]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:362,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($Vu1,[2,581]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,83:[1,363],89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:365,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,308:364,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($Vu1,[2,582]),{61:77,65:$Vf,89:367,115:$Vg,121:151,244:$Vh,269:[1,366],363:46,364:$Vi,365:$Vj,374:$Vp},o($Vu1,[2,520]),o($Vu1,[2,615]),{61:77,65:$Vf,81:[1,370],115:$Vg,121:368,244:$Vh,335:369,363:46,364:$Vi,365:$Vj,374:$Vp},o($Vu1,[2,521]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,83:[1,371],89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:365,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,308:372,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,83:[1,374],89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:373,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o([56,57,65,81,83,97,98,109,114,115,244,283,285,286,287,310,311,312,313,314,315,316,317,318,319,320,322,323,364,365,367,368,371,374,378,386,405,406],$Vq,{258:375,32:$Vr,263:$Vs}),o($VZ1,$Vq,{258:378,32:$Vr,83:[1,377],263:$Vs,269:[1,376]}),o($VZ1,$Vq,{258:379,32:$Vr,83:[1,380],263:$Vs}),o($Vu1,[2,1073],{405:[1,381],406:[1,382]}),o($Vu1,[2,1075]),{405:[1,383]},o($Vu1,[2,1076]),{56:[1,384]},o($V_1,[2,796]),{57:[1,385]},o($V_1,[2,799]),{142:[1,386]},o($V2,[2,507]),o($Vw,[2,1063]),o($Vw,[2,1064]),o($Vk,[2,293]),o($Vv,[2,492]),o($V2,[2,823]),{61:77,65:$Vf,89:197,115:$Vg,121:151,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp,439:387},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:388,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($V2,[2,57]),o($V2,[2,63]),o([45,83,87,111,356,360],[2,49]),{53:389,56:$VF,57:$VG,183:190,412:191},o([65,115,244,356,360,364,365,374],[2,814]),o($V2,[2,200],{70:390,45:[1,391]}),o($VG1,[2,163]),{128:[1,392]},o($VH1,[2,75]),o($VH1,[2,79]),{42:393,61:77,65:$Vf,115:$Vg,121:108,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{61:77,65:$Vf,82:394,86:395,89:396,115:$Vg,121:151,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{61:77,65:$Vf,115:$Vg,121:397,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{45:$VE1,50:398,51:291,52:$VF1},o($VK1,[2,215]),{61:77,65:$Vf,89:143,115:$Vg,121:151,149:399,151:400,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp,443:217},o($V2,[2,224]),o($V2,[2,809]),o($V2,[2,232]),o($V2,[2,239]),{173:[1,401]},{81:[1,402]},{176:[1,404],178:403},o($Va1,[2,861]),o($V2,$VS1,{273:323,271:405,280:$VT1}),{61:77,65:$Vf,89:143,115:$Vg,121:151,151:216,244:$Vh,348:406,350:215,363:46,364:$Vi,365:$Vj,374:$Vp,443:217},{42:332,61:77,65:$Vf,81:$Vv1,115:$Vg,121:108,202:407,223:328,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp,451:333,470:327,472:329,474:330,475:331},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:409,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,351:408,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{61:77,65:$Vf,89:367,115:$Vg,121:151,244:$Vh,269:[1,410],363:46,364:$Vi,365:$Vj,374:$Vp},{83:[1,411]},{46:419,185:24,186:25,191:$Va,257:$Vb,482:412,484:413,486:414,488:415,490:416,492:417,494:418},o($Vb1,[2,453]),o($Vv,[2,448]),o($V$1,[2,325],{204:420,205:421,206:[1,422]}),o($VR1,[2,497]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:424,183:157,243:149,244:$Vh,281:423,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o([83,206,217,242,248,278,280,356,360],[2,315],{87:[1,425]}),o($V02,[2,318]),o($V02,[2,1088]),o($V02,[2,1090],{220:426,222:427,230:$V12,231:$V22,232:$V32,233:$V42,234:$V52,235:$V62,236:$V72,237:$V82}),o($V02,[2,1091]),o($V92,$Vc1,{363:46,61:77,183:190,412:191,121:241,53:242,268:436,45:$Ve1,56:$VF,57:$VG,65:$Vf,115:$Vg,244:$Vh,364:$Vi,365:$Vj,374:$Vp}),o($V92,$Vc1,{363:46,61:77,183:190,412:191,121:241,53:242,268:437,45:$Ve1,56:$VF,57:$VG,65:$Vf,115:$Vg,244:$Vh,364:$Vi,365:$Vj,374:$Vp}),o($Va2,[2,1102]),o($Va2,[2,1104]),{98:[1,438],263:[1,441],285:[1,439],286:[1,440]},o($VU1,[2,1087]),o($Vb2,[2,938],{454:240,79:$Vf1,269:$Vk1,368:$Vl1,373:$Vn1,390:$Vp1,392:$Vq1,395:$Vs1,396:$Vt1}),o($Vb2,[2,939],{454:240,79:$Vf1,269:$Vk1,368:$Vl1,373:$Vn1,390:$Vp1,392:$Vq1,395:$Vs1,396:$Vt1}),o($Vb2,[2,940],{454:240,79:$Vf1,269:$Vk1,368:$Vl1,373:$Vn1,390:$Vp1,392:$Vq1,395:$Vs1,396:$Vt1}),o($Vb2,[2,941],{454:240,79:$Vf1,269:$Vk1,368:$Vl1,373:$Vn1,390:$Vp1,392:$Vq1,395:$Vs1,396:$Vt1}),{81:[1,442]},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:443,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($Vu1,[2,954]),o($VP1,$VQ1,{363:46,61:77,324:121,325:129,321:130,289:131,327:132,443:134,290:139,292:140,294:141,463:142,89:143,301:144,302:145,303:146,243:149,465:150,121:151,307:152,467:155,468:156,183:157,412:158,469:159,480:319,196:444,452:445,140:446,56:$VF,57:$VG,65:$Vf,81:$VH,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,322:$V01,323:$V11,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81}),{34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1,453:[1,447],454:240},o($Vc2,[2,948],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,395:$Vs1,396:$Vt1}),o($Vc2,[2,949],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,395:$Vs1,396:$Vt1}),o($VX1,[2,950],{454:240,79:$Vf1,390:$Vp1,392:$Vq1,395:$Vs1,396:$Vt1}),o($VX1,[2,951],{454:240,79:$Vf1,390:$Vp1,392:$Vq1,395:$Vs1,396:$Vt1}),o($VX1,[2,952],{454:240,79:$Vf1,390:$Vp1,392:$Vq1,395:$Vs1,396:$Vt1}),o($VV1,[2,1135]),o($VV1,[2,1136]),o($VX1,[2,1194],{454:240}),o($VX1,[2,1195],{454:240}),o($VX1,[2,1196],{454:240}),{83:[1,448]},{45:$Ve1,53:242,56:$VF,57:$VG,61:77,65:$Vf,83:$Vc1,115:$Vg,121:241,183:190,244:$Vh,268:449,363:46,364:$Vi,365:$Vj,374:$Vp,412:191},o($Vu1,[2,937]),o($Vu1,[2,956]),o($Vu1,[2,1203]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:450,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($VY1,[2,1219]),{34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1,402:[1,451],454:240},o($Vu1,[2,596]),{83:[1,452],87:$Vd2},o($VD1,[2,601],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1}),o($Vy1,[2,1060]),o($VA1,[2,898]),o($Vu1,[2,617]),o($Vu1,[2,618]),o($Ve2,[2,1147],{496:454,500:455,127:[1,456]}),{334:[2,560]},{83:[1,457],87:$Vd2},{34:$Vd1,45:[1,458],79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1,454:240},o($Vu1,[2,570]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,83:[1,459],89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:365,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,308:460,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{83:[1,461]},o($VB1,[2,550]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:365,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,308:462,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:463,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($VB1,[2,556]),o($Vu1,[2,1074]),{405:[1,464]},o($Vu1,[2,1077]),o($V_1,[2,795]),o($V_1,[2,798]),{81:$Vf2,167:465,168:466},o($VD1,[2,873]),o($VD1,[2,878],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1}),o([45,52,83,87,97,98,111,356,360],[2,50]),o($V2,[2,70]),o($VP1,[2,204],{145:468}),{129:469,131:[1,470]},o($VH1,[2,80]),{83:[1,471],87:[1,472]},o($VD1,[2,86]),{90:473,99:474,100:475,101:476,102:477,103:478,104:479,105:480,109:$Vg2,114:$Vh2,115:$Vi2,376:$Vj2,377:$Vk2,379:$Vl2,382:$Vm2,383:$Vn2,387:$Vo2,391:$Vp2,400:$Vq2,401:$Vr2,403:$Vs2,404:$Vt2,407:$Vu2},o($VJ1,[2,866]),{45:[1,496]},{83:[1,497],87:[1,498]},o($VD1,$VE1,{51:291,50:499,52:$VF1}),{174:[1,500]},{56:$VF,181:501,183:502},{171:[1,503]},{177:[1,504]},o($V2,[2,620]),o($VN1,[2,635]),o($VM1,[2,648]),o($VN1,[2,640]),o($VN1,[2,645],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1}),o($VO1,[2,895]),o($VE,[2,311]),{83:[2,1116]},{83:[2,1118]},{83:[2,1120]},{83:[2,1122]},{83:[2,1124]},{83:[2,1126]},{83:[2,1128]},{83:[2,1130]},o($Vv2,[2,354],{215:505,216:506,217:[1,507]}),o($V$1,[2,326]),{128:[1,508]},o($VR1,[2,498]),o($VR1,[2,501],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1}),{42:332,61:77,65:$Vf,81:$Vv1,115:$Vg,121:108,202:509,223:328,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp,451:333,470:327,472:329,474:330,475:331},o($V02,[2,1094],{222:510,230:$V12,231:$V22,232:$V32,233:$V42,234:$V52,235:$V62,236:$V72,237:$V82}),{42:332,61:77,65:$Vf,81:$Vv1,115:$Vg,121:108,223:511,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp,451:333,474:330,475:331},{231:[1,512]},{231:[1,513],233:[1,514]},{231:[1,515]},o($Vw2,[2,379]),{231:[1,517],233:[1,518],234:[1,516],236:[1,519]},{231:[1,520]},{231:[1,522],233:[1,523],234:[1,521],236:[1,524]},{231:[1,525]},o($V92,[2,1097]),o($V92,[2,1098]),o($Vu1,[2,932]),o($Vu1,[2,933]),o($Vu1,[2,934]),{171:[1,526]},o($VP1,$VQ1,{363:46,61:77,324:121,325:129,321:130,289:131,327:132,443:134,290:139,292:140,294:141,463:142,89:143,301:144,302:145,303:146,243:149,465:150,121:151,307:152,467:155,468:156,183:157,412:158,469:159,480:319,140:446,196:527,452:528,56:$VF,57:$VG,65:$Vf,81:$VH,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,322:$V01,323:$V11,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81}),{34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1,453:[1,529],454:240},{83:[1,530]},{83:[1,531],87:$Vx2},o($Vy2,[2,1044],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1}),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:533,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($Vz2,[2,1112]),{83:[1,534]},{34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,385:[1,535],390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1,454:240},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:536,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($Vu1,[2,597]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:537,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{83:[2,1153],247:539,248:$VA2,497:538},o($Ve2,[2,1148]),{128:[1,541]},{334:[2,561]},{99:542,376:$Vj2,377:$Vk2,379:$Vl2,382:$Vm2,383:$Vn2,387:$Vo2,391:$Vp2,400:$Vq2,401:$Vr2,403:$Vs2,404:$Vt2,407:$Vu2},o($VB1,[2,536]),{83:[1,543],87:$Vd2},o($VB1,[2,549]),{83:[1,544],87:$Vd2},{34:$Vd1,79:$Vf1,83:[1,545],97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1,454:240},o($Vu1,[2,1078]),o($V2,[2,251],{87:[1,546]}),o($VB2,[2,257]),{56:$VF,57:$VG,61:77,65:$Vf,89:143,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,169:547,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:548,325:129,327:132,363:46,364:$Vi,365:$Vj,374:$Vp,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{46:549,185:24,186:25,191:$Va,257:$Vb},o($VG1,[2,164]),{81:[1,551],132:550},o([45,127,171,356,360],[2,84]),{61:77,65:$Vf,86:552,89:396,115:$Vg,121:151,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},o($VD1,[2,100],{91:553,94:554,95:555,51:558,52:$VF1,97:$VC2,98:$VD2}),o($VE2,[2,112]),o($VE2,[2,113]),o($VE2,[2,114]),o($VE2,[2,115]),o($VE2,[2,116]),o($VE2,[2,117]),o($VE2,[2,118]),o($VE2,[2,910]),o($VE2,[2,911]),o($VE2,$VF2,{448:559,81:$VG2}),o($VE2,[2,924],{449:561,81:[1,562]}),o($VE2,[2,914]),o($VE2,[2,915]),o($VE2,[2,916]),o($VE2,[2,917]),o($VE2,[2,918]),o($VE2,[2,919]),o($VE2,[2,920]),o($VE2,$VF2,{448:563,81:$VG2}),{110:[1,564]},{110:[1,565]},{110:[1,566]},{46:567,185:24,186:25,191:$Va,257:$Vb},o($VK1,[2,216]),{61:77,65:$Vf,89:143,115:$Vg,121:151,151:568,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp,443:217},o($VD1,[2,218]),{61:77,65:$Vf,74:569,115:$Vg,121:203,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{83:[1,570],87:[1,571]},o($VD1,[2,286]),{171:$VL1,172:572},{78:573,81:$VI1},o($VH2,[2,417],{246:574,247:575,248:$VA2}),o($Vv2,[2,355]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:576,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:578,183:157,207:577,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($V02,[2,319]),{42:332,61:77,65:$Vf,81:$Vv1,115:$Vg,121:108,223:579,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp,451:333,474:330,475:331},o($VI2,$VJ2,{224:580,238:$VK2}),o($Vw2,[2,375]),o($Vw2,[2,376]),{231:[1,582]},o($Vw2,[2,378]),{231:[1,583]},o($Vw2,[2,381]),{231:[1,584]},{231:[1,585]},o($Vw2,[2,384]),{231:[1,586]},o($Vw2,[2,386]),{231:[1,587]},{231:[1,588]},o($Vw2,[2,389]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:589,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{83:[1,590]},{83:[1,591],87:$Vx2},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:592,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($Vu1,[2,944]),o($Vu1,[2,945]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:593,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o([45,56,57,65,83,87,115,131,171,206,217,230,231,232,233,234,235,236,237,242,244,248,255,256,278,280,356,360,364,365,372,374,375,384,385,393,398,402,408,453],[2,947],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,373:$Vn1,390:$Vp1,392:$Vq1,395:$Vs1,396:$Vt1}),o($Vz2,[2,1113]),o($Vu1,[2,1204]),o($VY1,[2,1225],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1}),o($VD1,[2,602],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1}),{83:[1,594]},{83:[2,1158],131:[1,599],398:[1,598],501:595,503:596,504:597},{128:[1,600]},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:446,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,452:601,463:142,465:150,467:155,468:156,469:159},{83:[1,602]},o($VB1,[2,537]),o($VB1,[2,551]),o($VB1,[2,555]),{81:$Vf2,168:603},{83:[1,604],87:[1,605]},o($VD1,[2,1057]),o($V2,[2,201]),{81:[1,607],133:606},{61:77,65:$Vf,89:609,115:$Vg,121:151,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp,435:608},o($VD1,[2,87]),o($VD1,[2,96]),o($VD1,[2,101],{51:558,95:610,52:$VF1,97:$VC2,98:$VD2}),o($VL2,[2,102]),{98:[1,611]},o($VL2,[2,109]),o($VL2,[2,110]),o($VE2,[2,912]),{405:[1,612]},o($VE2,[2,913]),{405:[1,613]},o($VE2,[2,921]),{90:614,99:474,100:475,101:476,102:477,103:478,104:479,105:480,109:$Vg2,111:[1,615],114:$Vh2,115:$Vi2,376:$Vj2,377:$Vk2,379:$Vl2,382:$Vm2,383:$Vn2,387:$Vo2,391:$Vp2,400:$Vq2,401:$Vr2,403:$Vs2,404:$Vt2,407:$Vu2},{99:616,111:[1,617],376:$Vj2,377:$Vk2,379:$Vl2,382:$Vm2,383:$Vn2,387:$Vo2,391:$Vp2,400:$Vq2,401:$Vr2,403:$Vs2,404:$Vt2,407:$Vu2},{61:77,65:$Vf,111:[1,619],115:$Vg,116:618,118:620,121:621,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},o($V2,[2,205]),o($VD1,$VE1,{51:291,50:622,52:$VF1}),o($V2,[2,262],{173:[1,623]}),{173:[2,283]},{56:$VF,183:624},{173:[1,625]},{171:[2,281]},o($Vv,[2,410],{240:626,241:627,242:[1,628]}),o($VH2,[2,418]),o($Vv2,[2,356],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1}),o($V$1,[2,327],{87:[1,629]}),o($VM2,[2,342],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1}),o($VI2,$VJ2,{224:630,238:$VK2}),o($VI2,[2,362]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:631,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($Vw2,[2,377]),o($Vw2,[2,380]),o($Vw2,[2,382]),o($Vw2,[2,383]),o($Vw2,[2,385]),o($Vw2,[2,387]),o($Vw2,[2,388]),o($VX1,[2,935],{454:240}),o($Vu1,[2,942]),o($Vu1,[2,943]),o($VW1,[2,946],{454:240,34:$Vd1,79:$Vf1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,373:$Vn1,390:$Vp1,392:$Vq1,395:$Vs1,396:$Vt1}),o($Vy2,[2,1045],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1}),o($Vu1,[2,1142]),{83:[2,1154]},{83:[2,1159]},{375:[1,632],508:[1,633]},o($VN2,[2,1176]),o($VN2,[2,1177]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:636,183:157,243:149,244:$Vh,249:634,252:635,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($Ve2,[2,1149],{87:$Vx2}),o($Vu1,[2,569]),o($VB2,[2,258]),o($VB2,[2,259]),{56:$VF,57:$VG,61:77,65:$Vf,89:143,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:637,325:129,327:132,363:46,364:$Vi,365:$Vj,374:$Vp,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($VG1,[2,168]),{127:$VO2,136:638,138:639},{83:[1,641],87:[1,642]},o($VD1,[2,853]),o($VL2,[2,103]),o($VL2,[2,108]),{83:[1,643]},{83:[1,644],87:[1,645]},{111:[1,646]},o($VE2,[2,123]),{87:[1,647]},o($VE2,[2,127]),{87:[1,649],111:[1,648]},o($VE2,[2,133]),o($VP2,[2,135]),{122:[1,650]},o($VD1,[2,219]),{175:[1,651]},o($VD1,[2,287]),{174:[1,652]},o($Vv,[2,472]),o($Vv,[2,411]),{243:653,244:[1,654],283:$VN,405:$V71,406:$V81,467:155,468:156},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:655,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($VI2,[2,363]),o($VI2,[2,405],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1}),o($VQ2,$VR2,{505:656}),o($VQ2,$VR2,{505:657}),o([83,131,242,278,356,360,398],[2,419],{87:[1,658]}),o($VS2,[2,422]),o($VS2,[2,432],{454:240,254:659,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,255:[1,660],256:[1,661],269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1}),o($VD1,[2,1058]),{83:[1,662],87:[1,663]},o($VD1,[2,177]),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:664,142:[1,665],183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{81:[2,850]},{61:77,65:$Vf,89:666,115:$Vg,121:151,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},o($VE2,[2,923]),o($VE2,[2,925]),{405:[1,667]},o($VE2,[2,122]),{90:668,99:474,100:475,101:476,102:477,103:478,104:479,105:480,109:$Vg2,114:$Vh2,115:$Vi2,376:$Vj2,377:$Vk2,379:$Vl2,382:$Vm2,383:$Vn2,387:$Vo2,391:$Vp2,400:$Vq2,401:$Vr2,403:$Vs2,404:$Vt2,407:$Vu2},o($VE2,[2,132]),{61:77,65:$Vf,115:$Vg,118:669,121:621,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{90:670,99:474,100:475,101:476,102:477,103:478,104:479,105:480,109:$Vg2,114:$Vh2,115:$Vi2,376:$Vj2,377:$Vk2,379:$Vl2,382:$Vm2,383:$Vn2,387:$Vo2,391:$Vp2,400:$Vq2,401:$Vr2,403:$Vs2,404:$Vt2,407:$Vu2},{61:77,65:$Vf,74:671,115:$Vg,121:203,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{61:77,65:$Vf,74:672,115:$Vg,121:203,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},o($Vv,[2,412],{87:[1,673]}),o($Vv,[2,414],{87:[1,674]}),o($VM2,[2,343],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1}),o($VT2,$VU2,{506:675,516:676,380:$VV2,405:$VW2,508:$VX2}),o($VT2,$VU2,{516:676,506:680,380:$VV2,405:$VW2,508:$VX2}),{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:636,183:157,243:149,244:$Vh,252:681,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($VS2,[2,429]),o($VS2,[2,433]),o($VS2,[2,434]),o($VG1,[2,174]),{127:$VO2,138:682},{34:$Vd1,79:$Vf1,97:$Vg1,110:[1,684],111:$Vi1,141:683,144:[1,685],269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1,454:240},{110:$VY2,141:686,144:$VZ2},o($VD1,[2,854]),{83:[1,689]},{111:[1,690]},o($VP2,[2,136]),o($VP2,$VE1,{51:291,50:691,52:$VF1}),o($V2,[2,263]),o($V2,[2,264],{173:[1,692]}),{243:693,283:$VN,405:$V71,406:$V81,467:155,468:156},{244:[1,694]},{83:$V_2,372:$V$2,507:695},{394:[1,697]},{397:[1,698]},o($V03,[2,1189]),o($V03,[2,1190]),{83:$V_2,372:$V$2,507:699},o($VS2,[2,423]),o($VD1,[2,178]),{142:[1,700]},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:337,142:$V13,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:339,142:$V23,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:701,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($VZ1,$V13),o($VZ1,$V23),o($VE2,[2,926]),o($VE2,[2,126]),o($VP2,[2,142]),{175:[1,702]},o($Vv,[2,413]),o($Vv,[2,415]),{83:[2,1160]},{380:[1,703],405:$VW2,508:$VX2,516:704},o($VT2,[2,1179]),o($VT2,[2,1180]),{83:[2,1161]},o($VD1,[2,186],{141:705,110:$VY2,144:$VZ2}),o($VD1,[2,185],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1}),{61:77,65:$Vf,74:706,115:$Vg,121:203,244:$Vh,363:46,364:$Vi,365:$Vj,374:$Vp},{397:[1,707]},{388:[1,708]},{56:$VF,57:$VG,61:77,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:709,183:157,243:149,244:$Vh,283:$VN,285:$VO,286:$VP,287:$VQ,289:131,290:139,292:140,294:141,301:144,302:145,303:146,307:152,310:$VR,311:$VS,312:$VT,313:$VU,314:$VV,315:$VW,316:$VX,317:$VY,318:$VZ,319:$V_,320:$V$,321:130,322:$V01,323:$V11,324:121,325:129,327:132,363:46,364:$Vi,365:$Vj,367:$V21,368:$V31,371:$V41,374:$Vp,378:$V51,386:$V61,405:$V71,406:$V81,412:158,443:134,463:142,465:150,467:155,468:156,469:159},o($V2,[2,265]),{83:[2,1184]},{83:[2,1185]},o($VD1,[2,184],{454:240,34:$Vd1,79:$Vf1,97:$Vg1,110:$Vh1,111:$Vi1,144:$Vj1,269:$Vk1,368:$Vl1,372:$Vm1,373:$Vn1,375:$Vo1,390:$Vp1,392:$Vq1,393:$Vr1,395:$Vs1,396:$Vt1})],
defaultActions: {39:[2,653],73:[2,630],74:[2,632],111:[2,891],135:[2,565],136:[2,566],137:[2,567],138:[2,568],160:[2,541],161:[2,542],162:[2,543],163:[2,544],164:[2,545],165:[2,546],166:[2,547],167:[2,548],175:[2,36],176:[2,45],216:[2,644],371:[2,560],412:[2,1116],413:[2,1118],414:[2,1120],415:[2,1122],416:[2,1124],417:[2,1126],418:[2,1128],419:[2,1130],457:[2,561],570:[2,283],573:[2,281],595:[2,1154],596:[2,1159],641:[2,850],695:[2,1160],699:[2,1161],707:[2,1184],708:[2,1185]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 5; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 409; 
break;
case 5: this.popState(); return 453; 
break;
case 6: return 32; 
break;
case 7: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('ALTER', yy_.yylloc, yy.lexer.upcomingInput()); return 4; 
break;
case 8: return 372; 
break;
case 9: return 45; 
break;
case 10: return 255; 
break;
case 11: this.begin('between'); return 375; 
break;
case 12: return 376; 
break;
case 13: return 377; 
break;
case 14: return 128; 
break;
case 15: return 419; 
break;
case 16: return 378; 
break;
case 17: return 379; 
break;
case 18: return 52; 
break;
case 19: parser.determineCase(yy_.yytext); return 8; 
break;
case 20: return 230; 
break;
case 21: return 380; 
break;
case 22: return 381; 
break;
case 23: return 382; 
break;
case 24: return 256; 
break;
case 25: return 263; 
break;
case 26: return 373; 
break;
case 27: return 383; 
break;
case 28: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('DROP', yy_.yylloc, yy.lexer.upcomingInput()); return 12; 
break;
case 29: return 384; 
break;
case 30: return 385; 
break;
case 31: parser.yy.correlatedSubQuery = true; return 386; 
break;
case 32: return 286; 
break;
case 33: return 387; 
break;
case 34: return 388; 
break;
case 35: parser.determineCase(yy_.yytext); return 171; 
break;
case 36: return 232; 
break;
case 37: return 206; 
break;
case 38: return 217; 
break;
case 39: return 322; 
break;
case 40: return 390; 
break;
case 41: return 234; 
break;
case 42: return 164; 
break;
case 43: return 391; 
break;
case 44: return 165; 
break;
case 45: return 392; 
break;
case 46: return 231; 
break;
case 47: return 235; 
break;
case 48: return 79; 
break;
case 49: return 242; 
break;
case 50: return 97; 
break;
case 51: return 98; 
break;
case 52: return 238; 
break;
case 53: return 364; 
break;
case 54: return 393; 
break;
case 55: return 248; 
break;
case 56: return 233; 
break;
case 57: return 127; 
break;
case 58: return 394; 
break;
case 59: return 156; 
break;
case 60: return 131; 
break;
case 61: return 395; 
break;
case 62: return 237; 
break;
case 63: return 396; 
break;
case 64: return 397; 
break;
case 65: return 65; 
break;
case 66: return 398; 
break;
case 67: return 399; 
break;
case 68: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 257; 
break;
case 69: return 236; 
break;
case 70: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 17; 
break;
case 71: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 'SHOW'; 
break;
case 72: return 400; 
break;
case 73: return 401; 
break;
case 74: return 41; 
break;
case 75: return 402; 
break;
case 76: return 403; 
break;
case 77: return 404; 
break;
case 78: return 'TO'; 
break;
case 79: return 285; 
break;
case 80: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('TRUNCATE', yy_.yylloc, yy.lexer.upcomingInput()); return 287; 
break;
case 81: return 508; 
break;
case 82: return 278; 
break;
case 83: parser.determineCase(yy_.yytext); return 337; 
break;
case 84: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('USE', yy_.yylloc); return 353; 
break;
case 85: return 142; 
break;
case 86: return 407; 
break;
case 87: return 49; 
break;
case 88: return 408; 
break;
case 89: return 280; 
break;
case 90: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 191; 
break;
case 91: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('LOAD', yy_.yylloc, yy.lexer.upcomingInput()); return 170; 
break;
case 92: return 176; 
break;
case 93: return 177; 
break;
case 94: return 173; 
break;
case 95: return 'STORAGE'; 
break;
case 96: return 174; 
break;
case 97: return 175; 
break;
case 98: return 334; 
break;
case 99: return 65; 
break;
case 100: yy.lexer.unput('('); yy_.yytext = 'avg'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 310; 
break;
case 101: yy.lexer.unput('('); yy_.yytext = 'cast'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 323; 
break;
case 102: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 318; 
break;
case 103: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 311; 
break;
case 104: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 312; 
break;
case 105: yy.lexer.unput('('); yy_.yytext = 'stddev_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 313; 
break;
case 106: yy.lexer.unput('('); yy_.yytext = 'stddev_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 314; 
break;
case 107: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 319; 
break;
case 108: yy.lexer.unput('('); yy_.yytext = 'var_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 315; 
break;
case 109: yy.lexer.unput('('); yy_.yytext = 'var_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 316; 
break;
case 110: yy.lexer.unput('('); yy_.yytext = 'variance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 317; 
break;
case 111: yy.lexer.unput('('); yy_.yytext = 'cume_dist'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 320; 
break;
case 112: yy.lexer.unput('('); yy_.yytext = 'dense_rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 320; 
break;
case 113: yy.lexer.unput('('); yy_.yytext = 'first_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 320; 
break;
case 114: yy.lexer.unput('('); yy_.yytext = 'lag'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 320; 
break;
case 115: yy.lexer.unput('('); yy_.yytext = 'last_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 320; 
break;
case 116: yy.lexer.unput('('); yy_.yytext = 'lead'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 320; 
break;
case 117: yy.lexer.unput('('); yy_.yytext = 'rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 320; 
break;
case 118: yy.lexer.unput('('); yy_.yytext = 'row_number'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 320; 
break;
case 119: return 405; 
break;
case 120: return 405; 
break;
case 121: return 406; 
break;
case 122: return 365; 
break;
case 123: parser.yy.cursorFound = true; return 5; 
break;
case 124: parser.yy.cursorFound = true; return 409; 
break;
case 125: return 389; 
break;
case 126: parser.addFileLocation(yy_.yylloc, yy_.yytext); return 513; 
break;
case 127: this.popState(); return 514; 
break;
case 128: return 356; 
break;
case 129: return 372; 
break;
case 130: return 393; 
break;
case 131: return 34; 
break;
case 132: return 110; 
break;
case 133: return 111; 
break;
case 134: return 144; 
break;
case 135: return 144; 
break;
case 136: return 144; 
break;
case 137: return 144; 
break;
case 138: return 144; 
break;
case 139: return 368; 
break;
case 140: return 269; 
break;
case 141: return 373; 
break;
case 142: return 373; 
break;
case 143: return 373; 
break;
case 144: return 373; 
break;
case 145: return 373; 
break;
case 146: return 373; 
break;
case 147: return 87; 
break;
case 148: return 283; 
break;
case 149: return 122; 
break;
case 150: return 360; 
break;
case 151: return 371; 
break;
case 152: return 367; 
break;
case 153: return 81; 
break;
case 154: return 83; 
break;
case 155: return 369; 
break;
case 156: return 370; 
break;
case 157: return 244; 
break;
case 158: this.begin('backtickedValue'); return 374; 
break;
case 159:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 411;
                                             }
                                             return 58;
                                           
break;
case 160: this.popState(); return 374; 
break;
case 161: this.begin('singleQuotedValue'); return 56; 
break;
case 162:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 411;
                                             }
                                             return 58;
                                           
break;
case 163: this.popState(); return 56; 
break;
case 164: this.begin('doubleQuotedValue'); return 57; 
break;
case 165:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 411;
                                             }
                                             return 58;
                                           
break;
case 166: this.popState(); return 57; 
break;
case 167: return 356; 
break;
case 168: /* To prevent console logging of unknown chars */ 
break;
case 169: 
break;
case 170: 
break;
case 171: 
break;
case 172: 
break;
case 173: 
break;
case 174:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:ALL)/i,/^(?:ALTER)/i,/^(?:AND)/i,/^(?:AS)/i,/^(?:ASC)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BOOLEAN)/i,/^(?:BY)/i,/^(?:CASCADE)/i,/^(?:CASE)/i,/^(?:CHAR)/i,/^(?:COMMENT)/i,/^(?:CREATE)/i,/^(?:CROSS)/i,/^(?:CURRENT)/i,/^(?:DATABASE)/i,/^(?:DECIMAL)/i,/^(?:DESC)/i,/^(?:DISTINCT)/i,/^(?:DIV)/i,/^(?:DOUBLE)/i,/^(?:DROP)/i,/^(?:ELSE)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:FALSE)/i,/^(?:FLOAT)/i,/^(?:FOLLOWING)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:GROUP)/i,/^(?:HAVING)/i,/^(?:IF)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JOIN)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:ON)/i,/^(?:OPTION)/i,/^(?:OR)/i,/^(?:ORDER)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PRECEDING)/i,/^(?:PURGE)/i,/^(?:RANGE)/i,/^(?:REGEXP)/i,/^(?:RIGHT)/i,/^(?:RLIKE)/i,/^(?:ROW)/i,/^(?:ROLE)/i,/^(?:ROWS)/i,/^(?:SCHEMA)/i,/^(?:SELECT)/i,/^(?:SEMI)/i,/^(?:SET)/i,/^(?:SHOW)/i,/^(?:SMALLINT)/i,/^(?:STRING)/i,/^(?:TABLE)/i,/^(?:THEN)/i,/^(?:TIMESTAMP)/i,/^(?:TINYINT)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TRUNCATE)/i,/^(?:UNBOUNDED)/i,/^(?:UNION)/i,/^(?:UPDATE)/i,/^(?:USE)/i,/^(?:VALUES)/i,/^(?:VARCHAR)/i,/^(?:VIEW)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:LOAD)/i,/^(?:SOURCE)/i,/^(?:FIELDS)/i,/^(?:EXTERNAL)/i,/^(?:STORAGE)/i,/^(?:LOCATION)/i,/^(?:FORMAT)/i,/^(?:OVER)/i,/^(?:ROLE)/i,/^(?:AVG\s*\()/i,/^(?:CAST\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:STDDEV_POP\s*\()/i,/^(?:STDDEV_SAMP\s*\()/i,/^(?:SUM\s*\()/i,/^(?:VAR_POP\s*\()/i,/^(?:VAR_SAMP\s*\()/i,/^(?:VARIANCE\s*\()/i,/^(?:CUME_DIST\s*\()/i,/^(?:DENSE_RANK\s*\()/i,/^(?:FIRST_VALUE\s*\()/i,/^(?:LAG\s*\()/i,/^(?:LAST_VALUE\s*\()/i,/^(?:LEAD\s*\()/i,/^(?:RANK\s*\()/i,/^(?:ROW_NUMBER\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:\s+['"])/i,/^(?:[^'"\u2020\u2021]+)/i,/^(?:['"])/i,/^(?:$)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[123,124,125,126,127,128,170],"inclusive":false},"doubleQuotedValue":{"rules":[165,166,173],"inclusive":false},"singleQuotedValue":{"rules":[162,163,172],"inclusive":false},"backtickedValue":{"rules":[159,160,171],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,161,164,167,168,169,174],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,161,164,167,168,174],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default yellowbrickSyntaxParser;
