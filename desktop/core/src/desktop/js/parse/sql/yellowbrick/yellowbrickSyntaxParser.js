// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/yellowbrick/sqlParseSupport';

var yellowbrickSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[4,8,12,18,160,161,190,196,214,280,310,360,376,379,383],$V1=[2,689],$V2=[379,383],$V3=[2,690],$V4=[1,41],$V5=[1,29],$V6=[1,30],$V7=[1,20],$V8=[1,32],$V9=[1,33],$Va=[1,42],$Vb=[1,34],$Vc=[1,39],$Vd=[1,40],$Ve=[1,35],$Vf=[1,38],$Vg=[1,36],$Vh=[1,51],$Vi=[1,53],$Vj=[1,49],$Vk=[1,52],$Vl=[1,48],$Vm=[85,379,383],$Vn=[2,516],$Vo=[1,59],$Vp=[1,68],$Vq=[1,69],$Vr=[1,83],$Vs=[2,478],$Vt=[1,88],$Vu=[1,89],$Vv=[36,306],$Vw=[18,36,47,54,58,59,67,81,83,85,89,99,111,112,113,116,117,124,129,133,144,146,158,162,169,171,197,201,229,240,253,254,255,256,257,258,259,260,261,265,267,271,278,279,292,301,303,306,379,383,387,388,391,395,396,397,398,399,400,402,405,406,407,408,410,413,414,415,416,418,419,421,423,424,425,426,427,430,431,442,476],$Vx=[85,301,379,383],$Vy=[67,117,267,379,383,387,388],$Vz=[2,846],$VA=[1,103],$VB=[67,117,267,387,388,397],$VC=[67,117,267,345,379,383,387,388,397],$VD=[2,843],$VE=[1,109],$VF=[18,67,117,267,387,388,397],$VG=[18,36,47,54,58,59,67,81,83,85,89,99,111,112,113,116,117,124,129,133,144,146,158,162,169,197,201,229,240,253,254,255,256,257,258,259,260,261,265,267,271,278,279,292,301,303,306,379,383,387,388,391,395,396,397,398,399,400,402,405,406,407,408,410,413,414,415,416,418,419,421,423,424,425,426,427,430,431,442,476],$VH=[83,89,280],$VI=[1,177],$VJ=[1,178],$VK=[1,133],$VL=[1,128],$VM=[1,139],$VN=[1,141],$VO=[1,143],$VP=[1,126],$VQ=[1,175],$VR=[1,179],$VS=[1,180],$VT=[1,144],$VU=[1,166],$VV=[1,167],$VW=[1,168],$VX=[1,169],$VY=[1,170],$VZ=[1,171],$V_=[1,172],$V$=[1,173],$V01=[1,159],$V11=[1,160],$V21=[1,153],$V31=[1,142],$V41=[1,154],$V51=[1,129],$V61=[1,131],$V71=[1,130],$V81=[1,134],$V91=[1,132],$Va1=[1,174],$Vb1=[1,176],$Vc1=[58,59,67,83,85,99,100,111,116,117,267,280,292,306,308,309,310,333,334,335,336,337,338,339,340,341,342,343,345,346,387,388,390,391,394,397,401,409,428,429],$Vd1=[47,58,59,67,85,89,117,129,144,158,197,201,229,240,253,254,255,256,257,258,259,260,261,265,267,271,301,303,379,383,387,388,397],$Ve1=[85,89,197,301,379,383],$Vf1=[2,1165],$Vg1=[1,235],$Vh1=[1,250],$Vi1=[1,251],$Vj1=[1,239],$Vk1=[1,236],$Vl1=[1,237],$Vm1=[1,238],$Vn1=[1,245],$Vo1=[1,244],$Vp1=[1,243],$Vq1=[1,246],$Vr1=[1,241],$Vs1=[1,240],$Vt1=[1,234],$Vu1=[1,242],$Vv1=[1,253],$Vw1=[1,252],$Vx1=[36,47,58,59,67,81,85,89,99,112,113,117,133,146,197,229,240,253,254,255,256,257,258,259,260,265,267,271,278,279,292,301,303,379,383,387,388,391,395,396,397,398,407,408,413,415,416,418,419,421,425,431,476],$Vy1=[1,259],$Vz1=[1,265],$VA1=[1,267],$VB1=[36,47,58,59,67,81,83,85,89,99,112,113,117,133,146,197,229,240,253,254,255,256,257,258,259,260,265,267,271,278,279,292,301,303,379,383,387,388,391,395,396,397,398,407,408,413,415,416,418,419,421,425,431,476],$VC1=[1,272],$VD1=[36,47,54,58,59,67,81,83,85,89,99,112,113,117,133,146,197,229,240,253,254,255,256,257,258,259,260,265,267,271,278,279,292,301,303,306,379,383,387,388,391,395,396,397,398,407,408,413,415,416,418,419,421,425,431,476],$VE1=[36,47,58,59,67,81,85,89,99,112,113,117,133,146,197,229,240,253,254,255,256,257,258,259,260,265,267,271,278,279,292,301,303,357,379,383,387,388,391,395,396,397,398,407,408,413,415,416,418,419,421,425,431,476],$VF1=[47,54,85,89,99,100,113,197,229,240,253,254,255,256,257,258,259,260,261,265,271,301,303,379,383],$VG1=[85,89],$VH1=[2,50],$VI1=[1,299],$VJ1=[47,379,383],$VK1=[47,129,379,383],$VL1=[1,307],$VM1=[47,54,81,83,129,162,169,379,383],$VN1=[47,54],$VO1=[1,319],$VP1=[303,379,383],$VQ1=[89,197,303,379,383],$VR1=[36,54,85,89],$VS1=[214,280],$VT1=[2,1143],$VU1=[85,229,240,265,271,301,379,383],$VV1=[2,529],$VW1=[1,333],$VX1=[100,286,308,309],$VY1=[85,89,197,229,240,253,254,255,256,257,258,259,260,261,265,271,301,303,379,383],$VZ1=[47,58,59,67,85,89,99,117,133,197,229,240,253,254,255,256,257,258,259,260,265,267,271,278,279,301,303,379,383,387,388,395,397,398,407,408,416,421,425,431,476],$V_1=[36,47,58,59,67,85,89,99,112,113,117,133,146,197,229,240,253,254,255,256,257,258,259,260,265,267,271,278,279,292,301,303,379,383,387,388,391,395,396,397,398,407,408,416,421,425,431,476],$V$1=[407,408,431],$V02=[58,59,67,83,99,100,111,116,117,267,306,308,309,310,333,334,335,336,337,338,339,340,341,342,343,345,346,387,388,390,391,394,397,401,409,428,429],$V12=[36,47,54,58,59,67,81,85,89,99,100,112,113,117,133,146,173,180,181,197,229,240,253,254,255,256,257,258,259,260,261,265,267,271,278,279,292,301,303,379,383,387,388,391,395,396,397,398,407,408,413,415,416,418,419,421,425,431,476],$V22=[36,47,54,58,59,67,81,85,89,99,100,112,113,117,133,146,197,229,240,253,254,255,256,257,258,259,260,261,265,267,271,278,279,292,301,303,379,383,387,388,391,395,396,397,398,407,408,413,415,416,418,419,421,425,431,476],$V32=[85,240,265,271,301,379,383],$V42=[85,89,229,240,265,271,301,303,379,383],$V52=[1,438],$V62=[1,441],$V72=[1,439],$V82=[1,443],$V92=[1,440],$Va2=[1,442],$Vb2=[1,445],$Vc2=[1,444],$Vd2=[85,89,229,240,253,254,255,256,257,258,259,260,261,265,271,301,303,379,383],$Ve2=[47,58,59,67,85,89,117,229,240,253,254,255,256,257,258,259,260,261,265,267,271,301,303,379,383,387,388,397],$Vf2=[36,47,58,59,67,85,89,99,112,113,117,133,146,197,229,240,253,254,255,256,257,258,259,260,265,267,271,278,279,301,303,379,383,387,388,395,397,398,407,408,416,421,425,431,476],$Vg2=[47,58,59,67,85,89,117,133,197,229,240,253,254,255,256,257,258,259,260,265,267,271,278,279,301,303,379,383,387,388,395,397,407,408,416,421,425,431,476],$Vh2=[1,463],$Vi2=[85,271],$Vj2=[1,477],$Vk2=[1,503],$Vl2=[1,504],$Vm2=[1,505],$Vn2=[1,491],$Vo2=[1,492],$Vp2=[1,493],$Vq2=[1,494],$Vr2=[1,495],$Vs2=[1,496],$Vt2=[1,497],$Vu2=[1,498],$Vv2=[1,499],$Vw2=[1,500],$Vx2=[1,501],$Vy2=[1,502],$Vz2=[85,265,271,301,379,383],$VA2=[67,83,117,267,387,388,397],$VB2=[1,544],$VC2=[85,89,271],$VD2=[36,47,58,59,67,81,85,89,99,112,113,117,133,146,197,229,240,253,254,255,256,257,258,259,260,261,265,267,271,278,279,292,301,303,379,383,387,388,391,395,396,397,398,407,408,413,415,416,418,419,421,425,431,476],$VE2=[1,552],$VF2=[89,379,383],$VG2=[1,568],$VH2=[1,569],$VI2=[54,85,89,99,100,113],$VJ2=[2,955],$VK2=[1,572],$VL2=[85,265,301,379,383],$VM2=[85,89,229,240,253,254,255,256,257,258,259,260,265,271,301,303,379,383],$VN2=[2,437],$VO2=[1,594],$VP2=[54,85,89,99,100],$VQ2=[85,89,240,265,271,301,379,383],$VR2=[398,531],$VS2=[1,655],$VT2=[89,113],$VU2=[85,395,403,428,531],$VV2=[2,1201],$VW2=[85,89,133,265,301,379,383,421],$VX2=[85,395],$VY2=[2,1211],$VZ2=[1,695],$V_2=[1,696],$V$2=[1,697],$V03=[1,705],$V13=[1,706],$V23=[2,1216],$V33=[1,716],$V43=[411,417],$V53=[2,200],$V63=[2,201];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"DataDefinition_EDIT":3,"ALTER":4,"CURSOR":5,"AlterTable_EDIT":6,"AlterView_EDIT":7,"CREATE":8,"DatabaseDefinition_EDIT":9,"TableDefinition_EDIT":10,"ViewDefinition_EDIT":11,"DROP":12,"DropDatabaseStatement_EDIT":13,"DropTableStatement_EDIT":14,"DropViewStatement_EDIT":15,"ExternalDefinition_EDIT":16,"LoadTableStatement_EDIT":17,"SET":18,"TruncateTableStatement_EDIT":19,"UseStatement_EDIT":20,"DataDefinition":21,"AlterTable":22,"AlterView":23,"DatabaseDefinition":24,"RoleDefinition":25,"TableDefinition":26,"ViewDefinition":27,"DropDatabaseStatement":28,"DropRoleStatement":29,"DropTableStatement":30,"DropViewStatement":31,"ExternalDefinition":32,"LoadTableStatement":33,"ALL":34,"SetOption":35,"=":36,"SetValue":37,"TruncateTableStatement":38,"UseStatement":39,"AlterTableLeftSide":40,"PartitionSpec":41,"AlterTableLeftSide_EDIT":42,"TABLE":43,"SchemaQualifiedTableIdentifier":44,"SchemaQualifiedTableIdentifier_EDIT":45,"AlterViewLeftSide":46,"AS":47,"QuerySpecification":48,"AlterViewLeftSide_EDIT":49,"QuerySpecification_EDIT":50,"VIEW":51,"OptionalComment":52,"Comment":53,"COMMENT":54,"QuotedValue":55,"OptionalComment_INVALID":56,"Comment_INVALID":57,"SINGLE_QUOTE":58,"DOUBLE_QUOTE":59,"VALUE":60,"DatabaseOrSchema":61,"OptionalIfNotExists":62,"RegularIdentifier":63,"DatabaseDefinitionOptionals":64,"OptionalIfNotExists_EDIT":65,"DatabaseDefinitionOptionals_EDIT":66,"ROLE":67,"TableDefinitionRightPart":68,"TableDefinitionRightPart_EDIT":69,"TableIdentifierAndOptionalColumnSpecification":70,"OptionalPartitionedBy":71,"OptionalAsSelectStatement":72,"TableIdentifierAndOptionalColumnSpecification_EDIT":73,"PartitionedBy_EDIT":74,"OptionalAsSelectStatement_EDIT":75,"SchemaQualifiedIdentifier":76,"OptionalColumnSpecificationsOrLike":77,"OptionalColumnSpecificationsOrLike_EDIT":78,"SchemaQualifiedIdentifier_EDIT":79,"ParenthesizedColumnSpecificationList":80,"LIKE":81,"ParenthesizedColumnSpecificationList_EDIT":82,"(":83,"ColumnSpecificationList":84,")":85,"ColumnSpecificationList_EDIT":86,"RightParenthesisOrError":87,"ColumnSpecification":88,",":89,"ColumnSpecification_EDIT":90,"ColumnIdentifier":91,"ColumnDataType":92,"OptionalColumnOptions":93,"ColumnDataType_EDIT":94,"ColumnOptions_EDIT":95,"ColumnOptions":96,"ColumnOption":97,"ColumnOption_EDIT":98,"NOT":99,"NULL":100,"PrimitiveType":101,"ArrayType":102,"MapType":103,"StructType":104,"ArrayType_INVALID":105,"MapType_INVALID":106,"StructType_INVALID":107,"ArrayType_EDIT":108,"MapType_EDIT":109,"StructType_EDIT":110,"ARRAY":111,"<":112,">":113,"AnyCursor":114,"GreaterThanOrError":115,"MAP":116,"STRUCT":117,"StructDefinitionList":118,"StructDefinitionList_EDIT":119,"StructDefinition":120,"StructDefinition_EDIT":121,"Commas":122,"RegularOrBacktickedIdentifier":123,":":124,"ColumnDataTypeList":125,"ColumnDataTypeList_EDIT":126,"ColumnDataTypeListInner_EDIT":127,"PartitionedBy":128,"PARTITION":129,"BY":130,"RangeClause":131,"RangeClause_EDIT":132,"RANGE":133,"ParenthesizedColumnList":134,"ParenthesizedPartitionValuesList":135,"ParenthesizedColumnList_EDIT":136,"ParenthesizedPartitionValuesList_EDIT":137,"PartitionValueList":138,"PartitionValueList_EDIT":139,"PartitionValue":140,"PartitionValue_EDIT":141,"ValueExpression":142,"LessThanOrEqualTo":143,"VALUES":144,"ValueExpression_EDIT":145,"COMPARISON_OPERATOR":146,"CommitLocations":147,"OptionalParenthesizedViewColumnList":148,"ParenthesizedViewColumnList_EDIT":149,"ParenthesizedViewColumnList":150,"ViewColumnList":151,"ViewColumnList_EDIT":152,"ColumnReference":153,"OptionalIfExists":154,"OptionalCascade":155,"OptionalIfExists_EDIT":156,"OptionalPurge":157,"PURGE":158,"ExternalStorageDefinition":159,"ExternalLocationDefinition":160,"ExternalFormatDefinition":161,"EXTERNAL":162,"ExternalStorageDefinition_EDIT":163,"ExternalLocationDefinition_EDIT":164,"ExternalFormatDefinition_EDIT":165,"STORAGE":166,"ExternalStorageDefinitionRightPart":167,"ExternalStorageDefinitionRightPart_EDIT":168,"TYPE":169,"StorageType":170,"ENDPOINT":171,"EndpointType":172,"REGION":173,"RegionType":174,"OptionalIdentityAndCredential":175,"SingleQuotedValue":176,"EndpointType_EDIT":177,"SingleQuotedValue_EDIT":178,"RegionType_EDIT":179,"IDENTITY":180,"CREDENTIAL":181,"IdentityAndCredential_EDIT":182,"DataManipulation":183,"InsertStatement":184,"UpdateStatement":185,"InsertValuesStatement":186,"DataManipulation_EDIT":187,"InsertValuesStatement_EDIT":188,"UpdateStatement_EDIT":189,"INSERT":190,"INTO":191,"OptionalTable":192,"InsertValuesList":193,"ParenthesizedRowValuesList":194,"InValueList":195,"LOAD":196,"FROM":197,"LoadFromSpec":198,"LOCATION":199,"FORMAT":200,"SOURCE":201,"FIELDS":202,"LoadSourceFieldsSpec":203,"LoadFromSpec_EDIT":204,"LoadSourceFieldsSpec_EDIT":205,"LoadFromSpecList":206,"LoadFromSpecList_EDIT":207,"CommonTableExpression":208,"SelectStatement":209,"OptionalUnions":210,"SelectStatement_EDIT":211,"OptionalUnions_EDIT":212,"CommonTableExpression_EDIT":213,"WITH":214,"WithQueries":215,"WithQueries_EDIT":216,"WithQuery":217,"WithQuery_EDIT":218,"TableSubQueryInner":219,"TableSubQueryInner_EDIT":220,"FromClause":221,"TableReferenceList":222,"FromClause_EDIT":223,"TableReferenceList_EDIT":224,"TableReference":225,"TableReference_EDIT":226,"OptionalGroupByClause":227,"GroupByClause":228,"GROUP":229,"GroupByColumnList":230,"GroupByClause_EDIT":231,"GroupByColumnList_EDIT":232,"ColumnGroupingSets":233,"ColumnGroupingSets_EDIT":234,"ColumnGroupingSet_EDIT":235,"ColumnReference_EDIT":236,"GroupByColumnListPartTwo_EDIT":237,"OptionalHavingClause":238,"HavingClause":239,"HAVING":240,"HavingClause_EDIT":241,"OptionalJoins":242,"Joins":243,"Joins_INVALID":244,"JoinType":245,"TablePrimary":246,"OptionalJoinCondition":247,"Join_EDIT":248,"JoinType_EDIT":249,"TablePrimary_EDIT":250,"JoinCondition_EDIT":251,"Joins_EDIT":252,"CROSS":253,"JOIN":254,"FULL":255,"OUTER":256,"INNER":257,"LEFT":258,"SEMI":259,"RIGHT":260,"ON":261,"UsingColList":262,"OptionalLimitClause":263,"LimitClause":264,"LIMIT":265,"UnsignedNumericLiteral":266,"VARIABLE_REFERENCE":267,"LimitClause_EDIT":268,"OptionalOrderByClause":269,"OrderByClause":270,"ORDER":271,"OrderByColumnList":272,"OrderByClause_EDIT":273,"OrderByColumnList_EDIT":274,"OrderByIdentifier":275,"OrderByIdentifier_EDIT":276,"OptionalAscOrDesc":277,"ASC":278,"DESC":279,"SELECT":280,"OptionalAllOrDistinct":281,"SelectList":282,"TableExpression":283,"SelectList_EDIT":284,"TableExpression_EDIT":285,"DISTINCT":286,"OptionalSelectConditions":287,"OptionalSelectConditions_EDIT":288,"SelectSpecification":289,"SelectSpecification_EDIT":290,"OptionalCorrelationName":291,"*":292,"OptionalCorrelationName_EDIT":293,"OptionalWhereClause":294,"WhereClause_EDIT":295,"WhereClause":296,"Unions":297,"Unions_EDIT":298,"UnionClause":299,"UnionClause_EDIT":300,"UNION":301,"NewStatement":302,"WHERE":303,"SearchCondition":304,"SearchCondition_EDIT":305,".":306,"SignedInteger":307,"TRUE":308,"FALSE":309,"TRUNCATE":310,"OptionalPartitionSpec":311,"UserDefinedFunction":312,"AggregateFunction":313,"OptionalOverClause":314,"AnalyticFunction":315,"OverClause":316,"CastFunction":317,"UserDefinedFunction_EDIT":318,"AggregateFunction_EDIT":319,"OptionalOverClause_EDIT":320,"AnalyticFunction_EDIT":321,"OverClause_EDIT":322,"CastFunction_EDIT":323,"OtherAggregateFunction":324,"CountFunction":325,"SumFunction":326,"OtherAggregateFunction_EDIT":327,"CountFunction_EDIT":328,"SumFunction_EDIT":329,"OtherAggregateFunction_Type":330,"UdfArgumentList":331,"UdfArgumentList_EDIT":332,"AVG":333,"MAX":334,"MIN":335,"STDDEV_POP":336,"STDDEV_SAMP":337,"VAR_POP":338,"VAR_SAMP":339,"VARIANCE":340,"COUNT":341,"SUM":342,"ANALYTIC":343,"ArbitraryFunctionName":344,"IF":345,"CAST":346,"NonParenthesizedValueExpressionPrimary":347,"ColumnOrArbitraryFunctionRef":348,"ArbitraryFunctionRightPart":349,"UnsignedValueSpecification":350,"NonParenthesizedValueExpressionPrimary_EDIT":351,"ArbitraryFunctionRightPart_EDIT":352,"UnsignedValueSpecification_EDIT":353,"ColumnOrArbitraryFunctionRef_EDIT":354,"ArbitraryFunction":355,"ArbitraryFunction_EDIT":356,"OVER":357,"WindowExpression":358,"WindowExpression_EDIT":359,"UPDATE":360,"TargetTable":361,"SetClauseList":362,"OptionalFromJoinedTable":363,"TargetTable_EDIT":364,"SetClauseList_EDIT":365,"FromJoinedTable_EDIT":366,"TableName":367,"TableName_EDIT":368,"LocalOrSchemaQualifiedName":369,"LocalOrSchemaQualifiedName_EDIT":370,"SetClause":371,"SetClause_EDIT":372,"SetTarget":373,"UpdateSource":374,"UpdateSource_EDIT":375,"USE":376,"SqlSyntax":377,"SqlStatements":378,"EOF":379,"SqlAutocomplete":380,"SqlStatements_EDIT":381,"SqlStatement":382,";":383,"SqlStatement_EDIT":384,"SetSpecification_EDIT":385,"NonReservedKeyword":386,"OPTION":387,"REGULAR_IDENTIFIER":388,"NonStartingToken":389,"!":390,"-":391,"[":392,"]":393,"~":394,"AND":395,"ARITHMETIC_OPERATOR":396,"BACKTICK":397,"BETWEEN":398,"BIGINT":399,"BOOLEAN":400,"CASE":401,"CHAR":402,"CURRENT":403,"DATABASE":404,"DECIMAL":405,"DOUBLE":406,"ELSE":407,"END":408,"EXISTS":409,"FLOAT":410,"FOLLOWING":411,"HDFS_START_QUOTE":412,"IN":413,"INT":414,"IS":415,"OR":416,"PRECEDING":417,"REGEXP":418,"RLIKE":419,"ROW":420,"ROWS":421,"SCHEMA":422,"SMALLINT":423,"STRING":424,"THEN":425,"TIMESTAMP":426,"TINYINT":427,"UNSIGNED_INTEGER":428,"UNSIGNED_INTEGER_E":429,"VARCHAR":430,"WHEN":431,"PARTIAL_CURSOR":432,"FromOrIn":433,"PARTIAL_VALUE":434,"DoubleQuotedValue":435,"DoubleQuotedValue_EDIT":436,"QuotedValue_EDIT":437,"OptionalFromDatabase":438,"DatabaseIdentifier":439,"OptionalFromDatabase_EDIT":440,"DatabaseIdentifier_EDIT":441,"CASCADE":442,"OptionalInDatabase":443,"OptionalPartitionSpec_EDIT":444,"PartitionSpec_EDIT":445,"PartitionSpecList":446,"PartitionSpecList_EDIT":447,"RangePartitionSpec":448,"RangePartitionComparisonOperator":449,"RangePartitionSpec_EDIT":450,"ConfigurationName":451,"PartialBacktickedOrAnyCursor":452,"PartialBacktickedIdentifier":453,"PartialBacktickedOrCursor":454,"PartialBacktickedOrPartialCursor":455,"OptionalParenthesizedColumnList":456,"OptionalParenthesizedColumnList_EDIT":457,"ColumnList":458,"ColumnList_EDIT":459,"ParenthesizedSimpleValueList":460,"SimpleValueList":461,"PartitionExpression":462,"PartitionExpression_EDIT":463,"RegularOrBackTickedSchemaQualifiedName":464,"RegularOrBackTickedSchemaQualifiedName_EDIT":465,"BasicIdentifierChain":466,"BasicIdentifierChain_EDIT":467,"DerivedColumnChain":468,"DerivedColumnChain_EDIT":469,"PartialBacktickedIdentifierOrPartialCursor":470,"OptionalTypeLength":471,"OptionalTypePrecision":472,"OptionalNot":473,"TableSubQuery":474,"ValueExpressionList":475,"BETWEEN_AND":476,"LikeRightPart":477,"CaseRightPart":478,"TableSubQuery_EDIT":479,"ValueExpressionInSecondPart_EDIT":480,"LikeRightPart_EDIT":481,"CaseRightPart_EDIT":482,"EndOrError":483,"ValueExpressionList_EDIT":484,"+":485,"UnsignedLiteral":486,"UnsignedLiteral_EDIT":487,"GeneralLiteral":488,"GeneralLiteral_EDIT":489,"ExactNumericLiteral":490,"ApproximateNumericLiteral":491,"TruthValue":492,"TablePrimaryOrJoinedTable":493,"TablePrimaryOrJoinedTable_EDIT":494,"JoinedTable":495,"JoinedTable_EDIT":496,"TableOrQueryName":497,"DerivedTable":498,"TableOrQueryName_EDIT":499,"DerivedTable_EDIT":500,"OptionalOnColumn":501,"OptionalOnColumn_EDIT":502,"PushQueryState":503,"PopQueryState":504,"SubQuery":505,"SubQuery_EDIT":506,"QueryExpression":507,"QueryExpression_EDIT":508,"QueryExpressionBody":509,"QueryExpressionBody_EDIT":510,"NonJoinQueryExpression":511,"NonJoinQueryExpression_EDIT":512,"NonJoinQueryTerm":513,"NonJoinQueryTerm_EDIT":514,"NonJoinQueryPrimary":515,"NonJoinQueryPrimary_EDIT":516,"SimpleTable":517,"SimpleTable_EDIT":518,"OptionalPartitionBy":519,"OptionalOrderByAndWindow":520,"PartitionBy_EDIT":521,"OptionalOrderByAndWindow_EDIT":522,"PartitionBy":523,"OptionalWindowSpec":524,"WindowSpec_EDIT":525,"WindowSpec":526,"RowsOrRange":527,"PopLexerState":528,"OptionalCurrentOrPreceding":529,"OptionalAndFollowing":530,"UNBOUNDED":531,"OptionalCurrentOrPreceding_EDIT":532,"OptionalAndFollowing_EDIT":533,"PushHdfsLexerState":534,"HdfsPath":535,"HDFS_PATH":536,"HDFS_END_QUOTE":537,"HdfsPath_EDIT":538,"IntegerOrUnbounded":539,"CaseWhenThenList":540,"CaseWhenThenList_EDIT":541,"CaseWhenThenListPartTwo":542,"CaseWhenThenListPartTwo_EDIT":543,"$accept":0,"$end":1},
terminals_: {2:"error",4:"ALTER",5:"CURSOR",8:"CREATE",12:"DROP",18:"SET",34:"ALL",36:"=",43:"TABLE",47:"AS",51:"VIEW",54:"COMMENT",58:"SINGLE_QUOTE",59:"DOUBLE_QUOTE",60:"VALUE",67:"ROLE",81:"LIKE",83:"(",85:")",89:",",99:"NOT",100:"NULL",111:"ARRAY",112:"<",113:">",116:"MAP",117:"STRUCT",124:":",129:"PARTITION",130:"BY",133:"RANGE",144:"VALUES",146:"COMPARISON_OPERATOR",158:"PURGE",160:"ExternalLocationDefinition",161:"ExternalFormatDefinition",162:"EXTERNAL",164:"ExternalLocationDefinition_EDIT",165:"ExternalFormatDefinition_EDIT",166:"STORAGE",169:"TYPE",171:"ENDPOINT",173:"REGION",180:"IDENTITY",181:"CREDENTIAL",190:"INSERT",191:"INTO",196:"LOAD",197:"FROM",199:"LOCATION",200:"FORMAT",201:"SOURCE",202:"FIELDS",214:"WITH",229:"GROUP",240:"HAVING",253:"CROSS",254:"JOIN",255:"FULL",256:"OUTER",257:"INNER",258:"LEFT",259:"SEMI",260:"RIGHT",261:"ON",265:"LIMIT",267:"VARIABLE_REFERENCE",271:"ORDER",278:"ASC",279:"DESC",280:"SELECT",286:"DISTINCT",292:"*",301:"UNION",303:"WHERE",306:".",308:"TRUE",309:"FALSE",310:"TRUNCATE",333:"AVG",334:"MAX",335:"MIN",336:"STDDEV_POP",337:"STDDEV_SAMP",338:"VAR_POP",339:"VAR_SAMP",340:"VARIANCE",341:"COUNT",342:"SUM",343:"ANALYTIC",345:"IF",346:"CAST",357:"OVER",360:"UPDATE",376:"USE",379:"EOF",383:";",385:"SetSpecification_EDIT",387:"OPTION",388:"REGULAR_IDENTIFIER",390:"!",391:"-",392:"[",393:"]",394:"~",395:"AND",396:"ARITHMETIC_OPERATOR",397:"BACKTICK",398:"BETWEEN",399:"BIGINT",400:"BOOLEAN",401:"CASE",402:"CHAR",403:"CURRENT",404:"DATABASE",405:"DECIMAL",406:"DOUBLE",407:"ELSE",408:"END",409:"EXISTS",410:"FLOAT",411:"FOLLOWING",412:"HDFS_START_QUOTE",413:"IN",414:"INT",415:"IS",416:"OR",417:"PRECEDING",418:"REGEXP",419:"RLIKE",420:"ROW",421:"ROWS",422:"SCHEMA",423:"SMALLINT",424:"STRING",425:"THEN",426:"TIMESTAMP",427:"TINYINT",428:"UNSIGNED_INTEGER",429:"UNSIGNED_INTEGER_E",430:"VARCHAR",431:"WHEN",432:"PARTIAL_CURSOR",434:"PARTIAL_VALUE",442:"CASCADE",476:"BETWEEN_AND",485:"+",531:"UNBOUNDED",536:"HDFS_PATH",537:"HDFS_END_QUOTE"},
productions_: [0,[3,2],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,2],[21,4],[21,1],[21,1],[22,2],[6,1],[6,2],[6,2],[6,3],[40,3],[42,3],[42,3],[23,3],[7,1],[7,2],[7,3],[7,3],[7,3],[46,3],[49,3],[49,3],[52,0],[52,1],[53,2],[56,1],[57,2],[57,2],[57,3],[57,3],[24,3],[24,5],[9,4],[9,3],[9,5],[9,4],[9,6],[64,1],[66,1],[25,3],[26,4],[10,4],[10,4],[10,3],[68,3],[69,3],[69,3],[69,3],[69,3],[70,2],[73,2],[73,2],[77,0],[77,1],[77,2],[78,1],[78,2],[78,2],[80,3],[82,3],[84,1],[84,3],[86,1],[86,3],[86,3],[86,5],[86,2],[86,4],[86,4],[86,6],[88,3],[90,3],[90,3],[90,3],[93,0],[93,1],[96,1],[96,2],[95,1],[95,2],[95,2],[95,3],[97,2],[97,1],[97,1],[98,2],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[94,1],[94,1],[94,1],[102,4],[105,3],[108,4],[108,4],[103,6],[106,3],[109,6],[109,4],[109,6],[109,5],[104,4],[107,3],[110,4],[118,1],[118,3],[119,1],[119,2],[119,3],[119,3],[119,5],[120,4],[121,5],[121,4],[121,4],[121,4],[121,3],[121,3],[125,1],[125,3],[126,1],[126,2],[126,3],[126,3],[126,5],[127,2],[127,2],[127,1],[127,1],[115,1],[115,1],[71,0],[71,1],[128,3],[74,2],[74,3],[74,3],[131,3],[132,2],[132,2],[132,3],[132,3],[132,3],[135,3],[137,3],[137,3],[138,1],[138,3],[139,1],[139,3],[139,5],[139,3],[139,5],[140,6],[140,4],[140,4],[141,2],[141,2],[141,3],[141,4],[141,4],[141,5],[141,6],[141,6],[141,3],[141,4],[141,4],[143,1],[143,1],[72,0],[72,3],[75,3],[75,3],[147,0],[27,8],[11,4],[11,9],[11,3],[11,6],[11,7],[11,8],[11,8],[11,8],[148,0],[148,1],[150,3],[149,3],[151,2],[151,4],[152,3],[152,5],[152,5],[152,7],[28,5],[13,3],[13,3],[13,4],[13,5],[13,5],[13,6],[29,3],[30,5],[14,3],[14,4],[14,5],[14,5],[14,6],[157,0],[157,1],[31,4],[15,4],[15,5],[15,3],[15,4],[15,4],[32,1],[32,1],[32,1],[16,3],[16,1],[16,1],[16,1],[159,5],[163,5],[163,6],[163,5],[163,4],[167,8],[170,1],[172,1],[177,1],[174,1],[179,1],[175,0],[175,4],[182,2],[182,3],[182,4],[168,2],[168,3],[168,4],[168,5],[168,6],[168,7],[168,8],[168,8],[183,1],[183,1],[184,1],[187,1],[187,1],[186,6],[188,2],[188,4],[188,4],[188,5],[188,6],[193,1],[193,3],[194,3],[192,0],[192,1],[33,8],[33,11],[33,11],[33,14],[17,2],[17,3],[17,4],[17,4],[17,5],[17,7],[17,8],[17,10],[17,4],[17,5],[17,5],[17,6],[17,8],[17,9],[17,11],[203,3],[205,3],[198,4],[204,2],[204,4],[206,1],[206,3],[207,1],[207,3],[207,3],[207,5],[48,3],[48,5],[48,2],[50,4],[50,3],[50,3],[50,1],[50,4],[50,3],[50,2],[50,2],[208,2],[213,2],[215,1],[215,3],[216,1],[216,3],[216,3],[216,5],[217,5],[218,2],[218,5],[218,5],[221,2],[223,2],[223,2],[222,1],[222,3],[224,1],[224,3],[224,3],[224,5],[224,3],[227,0],[227,1],[228,3],[231,3],[231,3],[231,2],[233,0],[233,1],[233,3],[233,3],[234,1],[234,3],[234,3],[234,5],[234,3],[235,1],[235,1],[230,1],[230,3],[232,1],[232,2],[232,3],[232,3],[232,3],[232,4],[232,5],[237,1],[237,2],[237,1],[238,0],[238,1],[239,2],[241,2],[241,2],[242,0],[242,1],[242,1],[243,3],[243,4],[244,1],[244,2],[248,3],[248,1],[248,3],[248,3],[248,3],[252,1],[252,2],[252,2],[252,3],[245,2],[245,2],[245,3],[245,2],[245,1],[245,3],[245,2],[245,3],[245,3],[245,2],[245,3],[245,2],[245,3],[245,3],[245,2],[249,2],[249,3],[249,3],[249,2],[249,3],[249,3],[249,3],[249,3],[249,2],[249,3],[249,3],[249,3],[249,3],[249,2],[247,0],[247,2],[262,1],[262,3],[251,2],[251,2],[263,0],[263,1],[264,2],[264,4],[264,2],[264,4],[268,2],[269,0],[269,1],[270,3],[273,3],[273,2],[272,1],[272,3],[274,1],[274,2],[274,3],[274,4],[274,5],[275,2],[276,2],[276,2],[277,0],[277,1],[277,1],[209,3],[209,4],[211,3],[211,3],[211,4],[211,4],[211,4],[211,5],[211,6],[211,4],[281,0],[281,1],[281,1],[283,2],[285,2],[285,4],[285,3],[282,1],[282,3],[284,1],[284,2],[284,3],[284,3],[284,3],[284,4],[284,3],[284,3],[284,4],[284,4],[284,4],[284,5],[284,5],[289,2],[289,1],[290,2],[290,3],[290,2],[287,5],[288,5],[288,5],[288,5],[288,5],[288,5],[288,6],[288,6],[288,6],[288,6],[288,6],[210,0],[210,1],[212,1],[297,1],[297,2],[298,1],[298,2],[298,2],[298,3],[299,4],[300,3],[300,4],[300,4],[294,0],[294,1],[296,2],[295,2],[295,2],[304,1],[305,1],[35,1],[35,3],[37,1],[37,1],[37,2],[37,1],[37,1],[37,1],[37,1],[38,4],[19,2],[19,4],[19,3],[19,4],[19,5],[19,5],[19,5],[312,2],[312,2],[312,1],[318,1],[318,2],[318,1],[318,2],[318,2],[318,2],[318,1],[313,1],[313,1],[313,1],[319,1],[319,1],[319,1],[324,4],[324,5],[327,5],[327,6],[327,5],[330,1],[330,1],[330,1],[330,1],[330,1],[330,1],[330,1],[330,1],[325,4],[325,3],[325,5],[328,5],[328,6],[328,5],[326,5],[326,3],[329,5],[329,6],[329,5],[315,3],[315,4],[321,4],[321,5],[321,4],[344,1],[344,1],[344,1],[344,1],[317,6],[317,3],[323,6],[323,5],[323,4],[323,6],[323,5],[323,4],[323,6],[323,5],[323,6],[323,5],[347,2],[347,2],[347,1],[347,1],[347,1],[347,1],[351,2],[351,2],[351,1],[351,1],[351,1],[355,2],[355,2],[356,2],[356,2],[349,2],[349,3],[352,3],[352,4],[352,3],[331,1],[331,3],[332,1],[332,3],[332,3],[332,5],[332,3],[332,5],[332,4],[332,3],[332,2],[332,2],[332,4],[314,0],[314,1],[320,1],[316,2],[316,2],[322,2],[185,6],[189,6],[189,6],[189,6],[189,6],[189,7],[189,3],[189,2],[189,2],[189,2],[361,1],[364,1],[367,1],[368,1],[362,1],[362,3],[365,1],[365,3],[365,3],[365,5],[371,3],[372,3],[372,2],[372,1],[373,1],[374,1],[375,1],[363,0],[363,2],[366,2],[366,2],[39,2],[20,2],[377,3],[380,3],[380,3],[302,0],[378,0],[378,1],[378,4],[381,1],[381,4],[381,4],[381,7],[382,1],[382,1],[382,1],[384,1],[384,2],[384,1],[384,1],[384,1],[384,1],[386,1],[386,1],[386,1],[63,1],[63,1],[63,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[389,1],[122,1],[122,2],[114,1],[114,1],[433,1],[433,1],[61,1],[61,1],[176,3],[176,2],[178,2],[435,3],[435,2],[436,2],[55,1],[55,1],[437,1],[437,1],[438,0],[438,2],[440,2],[155,0],[155,1],[154,0],[154,2],[156,2],[62,0],[62,3],[65,2],[65,3],[443,0],[443,2],[443,2],[311,0],[311,1],[444,1],[41,4],[445,4],[448,5],[450,2],[450,3],[450,4],[450,5],[450,5],[450,5],[449,1],[449,1],[449,1],[449,1],[451,1],[451,1],[452,1],[452,1],[454,1],[454,1],[455,1],[455,1],[453,2],[87,1],[87,1],[456,0],[456,1],[457,1],[134,3],[136,3],[136,3],[458,1],[458,3],[459,3],[459,5],[460,3],[461,1],[461,3],[44,1],[44,3],[45,1],[45,3],[45,3],[76,1],[76,3],[79,1],[79,3],[79,3],[439,1],[441,1],[446,1],[446,3],[447,1],[447,3],[447,3],[447,5],[462,3],[463,3],[463,3],[463,3],[463,1],[123,1],[123,3],[123,2],[464,1],[464,3],[465,1],[465,3],[369,1],[369,2],[370,1],[370,2],[153,1],[153,3],[236,1],[466,1],[466,3],[467,3],[467,5],[468,1],[468,3],[469,1],[469,3],[469,5],[469,3],[91,1],[470,1],[470,1],[101,1],[101,1],[101,2],[101,2],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,2],[471,0],[471,3],[472,0],[472,3],[472,5],[142,1],[142,2],[142,2],[142,2],[142,2],[142,4],[142,4],[142,4],[142,6],[142,2],[142,3],[142,3],[142,3],[142,3],[142,3],[142,6],[142,6],[142,5],[142,5],[142,6],[142,5],[142,3],[142,3],[142,3],[142,3],[142,3],[142,2],[142,3],[142,2],[142,3],[145,1],[145,3],[145,2],[145,2],[145,2],[145,2],[145,2],[145,2],[145,2],[145,2],[145,3],[145,4],[145,5],[145,4],[145,4],[145,4],[145,6],[145,6],[145,2],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,4],[145,3],[145,6],[145,6],[145,5],[145,5],[145,6],[145,6],[145,6],[145,6],[145,5],[145,4],[145,5],[145,5],[145,5],[145,5],[145,4],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,3],[145,2],[145,3],[145,2],[145,3],[145,2],[145,3],[145,2],[145,3],[145,3],[145,4],[145,3],[145,3],[145,3],[475,1],[475,3],[484,1],[484,3],[484,3],[484,5],[484,3],[484,5],[484,4],[484,3],[484,2],[484,2],[484,4],[195,1],[195,3],[348,1],[348,3],[354,1],[307,1],[307,2],[307,2],[350,1],[353,1],[486,1],[486,1],[487,1],[266,1],[266,1],[490,1],[490,2],[490,3],[490,2],[491,2],[491,3],[491,4],[488,1],[488,1],[488,1],[489,1],[489,1],[492,1],[492,1],[473,0],[473,1],[225,1],[226,1],[493,1],[493,1],[494,1],[494,1],[495,2],[496,2],[496,2],[246,2],[246,2],[250,2],[250,2],[250,2],[497,1],[499,1],[498,1],[500,1],[501,0],[501,2],[502,2],[502,2],[503,0],[504,0],[474,3],[474,4],[479,3],[479,3],[219,2],[220,3],[505,1],[506,1],[507,1],[508,1],[509,1],[510,1],[511,1],[512,1],[513,1],[514,1],[515,1],[516,1],[517,1],[518,1],[291,0],[291,1],[291,1],[291,2],[291,2],[293,1],[293,1],[293,2],[293,2],[293,2],[358,4],[359,4],[359,4],[359,5],[359,7],[519,0],[519,1],[523,3],[521,2],[521,3],[521,3],[520,0],[520,2],[522,1],[522,3],[522,2],[524,0],[524,1],[526,5],[526,5],[525,2],[525,6],[525,5],[525,5],[525,5],[525,4],[528,0],[534,0],[535,3],[538,5],[538,4],[538,3],[538,3],[538,2],[527,1],[527,1],[529,0],[529,2],[529,2],[532,2],[532,2],[530,0],[530,3],[530,3],[533,2],[533,3],[533,3],[539,1],[539,1],[480,3],[480,3],[480,3],[477,2],[477,2],[477,2],[481,2],[481,2],[481,2],[481,2],[481,2],[481,2],[478,2],[478,4],[482,2],[482,4],[482,4],[482,3],[482,4],[482,3],[482,4],[482,4],[482,3],[482,4],[482,3],[483,1],[483,1],[540,1],[540,2],[541,1],[541,2],[541,3],[541,3],[541,2],[542,4],[543,2],[543,3],[543,4],[543,4],[543,3],[543,3],[543,4],[543,2],[543,3],[543,2],[543,3],[543,3],[543,4],[543,3],[543,4],[543,4],[543,5],[543,4],[543,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

     parser.suggestKeywords(['TABLE', 'VIEW']);
   
break;
case 4:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW', 'EXTERNAL']);
   
break;
case 8:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW']);
   
break;
case 14:

     parser.suggestSetOptions();
   
break;
case 38: case 47: case 242: case 246: case 545: case 665:

     parser.addTablePrimary($$[$0]);
   
break;
case 39: case 237:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyTables = true;
     }
   
break;
case 40:

     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 43: case 345:

     parser.suggestKeywords(['AS']);
   
break;
case 45: case 204: case 213: case 346: case 701: case 1148:

     parser.suggestKeywords(['SELECT']);
   
break;
case 48: case 247:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyViews = true;
     }
   
break;
case 49:

     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 59:

     parser.addNewDatabaseLocation(_$[$0-1], [{ name: $$[$0-1] }]);
   
break;
case 60: case 70:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 62:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 63:

     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 64:

     parser.addNewDatabaseLocation(_$[$0-2], [{ name: $$[$0-2] }]);
   
break;
case 65:

     if (!$$[$0]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 76:

     var keywords = [];
     if (!$$[$0-2] && !$$[$0-1]) {
       keywords.push({ value: 'LIKE', weight: 1 });
     } else {
       if (!$$[$0-1]) {
         keywords.push({ value: 'PARTITIONED BY', weight: 12 });
       }
       keywords.push({ value: 'AS', weight: 1 });
     }

     if (keywords.length > 0) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 77:

     parser.addNewTableLocation(_$[$0-1], $$[$0-1], $$[$0]);
     this.$ = $$[$0];
   
break;
case 82:
this.$ = [];
break;
case 84: case 662: case 682: case 895:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 86: case 222: case 224: case 327: case 497: case 630: case 633: case 828: case 831: case 917: case 970: case 1145:
this.$ = $$[$0-1];
break;
case 88: case 338:
this.$ = [$$[$0]];
break;
case 89:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 94: case 96:

     parser.checkForKeywords($$[$0-1]);
   
break;
case 95: case 97:

     parser.checkForKeywords($$[$0-3]);
   
break;
case 98:

     this.$ = $$[$0-2];
     this.$.type = $$[$0-1];
     var keywords = [];
     if (!$$[$0]['comment']) {
       keywords.push('COMMENT');
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 99: case 126: case 132: case 133: case 146: case 149: case 158: case 160:

     parser.suggestKeywords(parser.getColumnDataTypeKeywords());
   
break;
case 102:
this.$ = {};
break;
case 104:

     this.$ = {};
     this.$[$$[$0]] = true;
   
break;
case 105:

     $$[$0-1][$$[$0]] = true;
   
break;
case 110: case 111:
this.$ = 'null';
break;
case 112:
this.$ = 'comment';
break;
case 113:

     parser.suggestKeywords(['NULL']);
   
break;
case 131:

     parser.suggestKeywords(parser.getTypeKeywords());
   
break;
case 145: case 148:

     parser.suggestKeywords(['COMMENT']);
   
break;
case 167: case 1183:

     parser.suggestKeywords(['BY']);
   
break;
case 168:

     parser.suggestKeywords(['RANGE']);
   
break;
case 177: case 182: case 183:

     parser.suggestKeywords(['PARTITION']);
   
break;
case 189:

     parser.suggestKeywords(['VALUE', 'VALUES']);
   
break;
case 190:

     if ($$[$0].endsWithLessThanOrEqual) {
      parser.suggestKeywords(['VALUES']);
     }
   
break;
case 191: case 194: case 197:

     parser.suggestKeywords(['<', '<=']);
   
break;
case 192: case 860: case 863:

     parser.suggestKeywords(['VALUES']);
   
break;
case 195: case 198:

     parser.suggestFunctions();
   
break;
case 206:

     parser.commitLocations();
   
break;
case 208: case 256:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.suggestDatabases({ appendDot: true });
   
break;
case 209:

     if (!$$[$0-6]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 212:

     var keywords = [{value: 'AS', weight: 1 }];
     if (!$$[$0-1]) {
       keywords.push({ value: 'COMMENT', weight: 3 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 219:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 223: case 225:
this.$ = $$[$0-3];
break;
case 229:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestDatabases();
   
break;
case 230:

     parser.suggestKeywords(['CASCADE']);
   
break;
case 232:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 234: case 550:

     parser.addTablePrimary($$[$0-1]);
   
break;
case 236:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 239:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0-1]) {
       parser.suggestKeywords(['PURGE']);
     }
   
break;
case 243:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 244:

     parser.addTablePrimary($$[$0]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 251:

   parser.suggestKeywords(['STORAGE', 'LOCATION', 'FORMAT']);
 
break;
case 257:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 269:

   parser.suggestKeywords(['CREDENTIAL']);
 
break;
case 271:

   parser.suggestKeywords(['TYPE']);
 
break;
case 272:

   parser.suggestKeywords(['S3', 'NFS']);
 
break;
case 273:

   parser.suggestKeywords(['ENDPOINT']);
 
break;
case 275:

   parser.suggestKeywords(['REGION']);
 
break;
case 277:

   parser.suggestKeywords(['IDENTITY']);
 
break;
case 284:

     $$[$0-2].owner = 'insert';
     parser.addTablePrimary($$[$0-2]);
   
break;
case 285:

     parser.suggestKeywords(['INTO']);
   
break;
case 286:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['TABLE']);
     }
     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 288:

     $$[$0-1].owner = 'insert';
     parser.addTablePrimary($$[$0-1]);
     parser.suggestKeywords(['VALUES']);
   
break;
case 299:

    parser.suggestKeywords(['TABLE']);
  
break;
case 300:

    parser.suggestTables();
    parser.suggestDatabases({ appendDot: true });
  
break;
case 301:

    parser.suggestKeywords(['FROM', 'SOURCE FIELDS']);
  
break;
case 303: case 310:

    parser.suggestKeywords(['EXTERNAL LOCATION']);
  
break;
case 304: case 311:

    parser.suggestExternalLocations();
  
break;
case 305: case 312:

    parser.suggestKeywords(['EXTERNAL FORMAT']);
  
break;
case 306: case 313:

    parser.suggestExternalFormats();
  
break;
case 308:

    parser.suggestKeywords(['FROM']);
  
break;
case 317:

    parser.suggestKeywords(['(']);
  
break;
case 326: case 499:
this.$ = $$[$0-2];
break;
case 328:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 329: case 330: case 341:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 336: case 352: case 376: case 452: case 456: case 494: case 504: case 531: case 681: case 1070: case 1072: case 1127: case 1182: case 1257:
this.$ = $$[$0];
break;
case 339:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 343:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 344:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 348:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 349: case 357:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 360:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 361: case 463:

     parser.suggestSelectListAliases();
   
break;
case 362:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 363:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 373: case 676: case 885: case 888: case 889: case 914: case 915: case 936: case 939:

     parser.suggestColumns();
   
break;
case 378: case 379: case 385: case 386: case 913: case 1141: case 1184:

     parser.valueExpressionSuggest();
   
break;
case 390:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 391:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 395:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 396:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 397:
this.$ = { joinType: $$[$0] };
break;
case 398:
this.$ = { joinType: $$[$0-1] };
break;
case 399:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 400:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 403:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 408:
this.$ = 'CROSS JOIN';
break;
case 409:
this.$ = 'FULL JOIN';
break;
case 410:
this.$ = 'FULL OUTER JOIN';
break;
case 411:
this.$ = 'INNER JOIN';
break;
case 412:
this.$ = 'JOIN';
break;
case 413:
this.$ = 'LEFT INNER JOIN';
break;
case 414:
this.$ = 'LEFT JOIN';
break;
case 415:
this.$ = 'LEFT OUTER JOIN';
break;
case 416:
this.$ = 'LEFT SEMI JOIN';
break;
case 417:
this.$ = 'OUTER JOIN';
break;
case 418: case 420:
this.$ = 'RIGHT OUTER JOIN';
break;
case 419:
this.$ = 'RIGHT JOIN';
break;
case 421:
this.$ = 'RIGHT SEMI JOIN';
break;
case 422:
this.$ = 'SEMI JOIN';
break;
case 423: case 425: case 426: case 428: case 429: case 430: case 431: case 433: case 434: case 435: case 436:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 424: case 427: case 432:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 437:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 438:
this.$ = { valueExpression: $$[$0] };
break;
case 442:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 449:

     parser.suggestKeywords([{ value: '10', weight: 10000 }, { value: '100', weight: 10000 }, { value: '1000', weight: 10000 }, { value: '5000', weight: 10000 }, { value: '10000', weight: 10000 }])
   
break;
case 453:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 454:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 458:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 459: case 460: case 461:
this.$ = { emptyOrderBy: false };
break;
case 462:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 464:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 465:
this.$ = { suggestKeywords: ['ASC', 'DESC'] };;
break;
case 468:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 469:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 470:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 471:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 472:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 473:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 474:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 475:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 476:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 477:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 481: case 482:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 483:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 484:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 485:
this.$ = [ $$[$0] ];
break;
case 486:

     $$[$0-2].push($$[$0]);
   
break;
case 488: case 489:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 491:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 492:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 493:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 495: case 496: case 498:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 500:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push($$[$0-1].function && $$[$0-1].types && $$[$0-1].types.length && $$[$0-1].types[0] === 'UDFREF' ? { name: $$[$0].alias, udfRef: $$[$0-1].function, types: $$[$0-1].types } : { name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 501:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 502:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 503:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 505:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 506:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 507:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 509:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 511:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 512:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 513:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 514:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 515:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 526:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 527:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 532:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 533:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 546:

     parser.suggestKeywords(['TABLE']);
   
break;
case 547:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 551:

     parser.addTablePrimary($$[$0-1]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 553:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 560:

     parser.suggestKeywords(['OVER']);
   
break;
case 569:

     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 570: case 588:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 571:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 572: case 586:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 573:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].activePosition);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 582:

     parser.addFunctionArgumentLocations($$[$0-3], [{
       expression: { text: $$[$0-1] },
       location: _$[$0-1]
     }]);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] }
   
break;
case 583: case 589:

     this.$ = { function: $$[$0-2], types: ['UDFREF'] }
   
break;
case 584:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] }
   
break;
case 585:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 587:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 590:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 591:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 592:

     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 593:

    this.$ = { function: $$[$0-2], types: ['UDFREF'] }
  
break;
case 594:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     this.$ = {
       function: $$[$0-3],
       expression: $$[$0-1].expressions[$$[$0-1].expressions.length - 1].expression,
       types: ['UDFREF']
     }
   
break;
case 595:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 596:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-2].expressions);
     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 597:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].activePosition);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 602:

     var expression = $$[$0-3];
     parser.extractExpressionText(expression, $$[$0-3], $$[$0-2], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-5], [{
       expression: expression,
       location: {
         first_line: _$[$0-3].first_line,
         last_line: _$[$0-1].last_line,
         first_column: _$[$0-3].first_column,
         last_column: _$[$0-1].last_column
       }
     }]);
     this.$ = { types: [ $$[$0-1].toUpperCase() ] }
   
break;
case 603: case 608: case 609: case 1076:
this.$ = { types: [ 'T' ] };
break;
case 604:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 605: case 606:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 607:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 610:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 611:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 612: case 613:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 614:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     if ($$[$0-1].lastLoc && $$[$0-1].lastLoc.location) {
       $$[$0-1].lastLoc.type = 'function';
       $$[$0-1].lastLoc.function = fn;
       $$[$0-1].lastLoc.location = {
         first_line: $$[$0-1].lastLoc.location.first_line,
         last_line: $$[$0-1].lastLoc.location.last_line,
         first_column: $$[$0-1].lastLoc.location.first_column,
         last_column: $$[$0-1].lastLoc.location.last_column - 1
       }
       if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
          $$[$0-1].firstLoc.type = 'database';
       } else {
         delete $$[$0-1].lastLoc.identifierChain;
       }
     }
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: fn, expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: fn, types: ['UDFREF'] }
     }
   
break;
case 615:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expressions && $$[$0].expressions.length) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
    } else {
      this.$ = { function: $$[$0-1], types: ['UDFREF'] }
    }
  
break;
case 618:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 619:
this.$ = { types: [ 'NULL' ], text: $$[$0] };
break;
case 620:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].activePosition);
     }
     this.$ = { function: fn, types: ['UDFREF'] };
   
break;
case 621: case 627: case 628:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].activePosition);
     }
     this.$ = { function: $$[$0-1], types: ['UDFREF'] };
   
break;
case 624:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 625: case 626:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: $$[$0-1], types: ['UDFREF'] }
     }
   
break;
case 631:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }]
     }
   
break;
case 632:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = $$[$0-3];
   
break;
case 634: case 636:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0], location: _$[$0] }]
     }
   
break;
case 635: case 637:

     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: $$[$0], location: _$[$0] }])
     }
   
break;
case 638:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0-2], location: _$[$0-2] }].concat($$[$0].expressions)
     }
   
break;
case 639:

     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: $$[$0-2], location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 640:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: { text: '' }, location: _$[$0] }])
     }
   
break;
case 641:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: { text: '' }, location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 642:

     parser.suggestValueExpressionKeywords($$[$0-3].expressions[$$[$0-3].expressions.length - 1].expression);
     this.$ = {
       activePosition: $$[$0-3].activePosition,
       expressions: $$[$0-3].expressions.concat($$[$0].expressions)
     }
   
break;
case 643:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 644:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 645:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 646:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-3] }, { expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 658:

     parser.suggestKeywords([ 'WHERE' ]);
   
break;
case 659:

     parser.suggestKeywords([ 'SET' ]);
   
break;
case 675:

     parser.suggestKeywords([ '=' ]);
   
break;
case 684:

     if (! parser.yy.cursorFound) {
       parser.yy.result.useDatabase = $$[$0];
     }
   
break;
case 685: case 904:

     parser.suggestDatabases();
   
break;
case 687: case 688:

     return parser.yy.result;
   
break;
case 689:

     parser.prepareNewStatement();
   
break;
case 691: case 693: case 695:

     parser.addStatementLocation(_$[$0]);
   
break;
case 694: case 696:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 700:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 829: case 832: case 918:
this.$ = '';
break;
case 844: case 847:

     parser.yy.correlatedSubQuery = false;
   
break;
case 845: case 849:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 848:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 859: case 861: case 862: case 864:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 893: case 919:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 894: case 920:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 896: case 901:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 897: case 922:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 898:
this.$ = [{ name: $$[$0] }];
break;
case 899:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 900:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 921:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 924:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 927:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 928: case 1093:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 930:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 931:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 932:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 933:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 934:
this.$ = [ $$[$0].identifier ];
break;
case 935:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 937:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 938:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 940:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 961: case 962:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 963: case 988:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 964:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 965: case 966: case 967:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 968:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 969:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 971: case 972: case 973: case 974:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 975: case 976: case 977: case 978: case 1008: case 1066: case 1067:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 979:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 980:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 981: case 982:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 983: case 984: case 985:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 986:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 987:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 989:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 991:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 992: case 994:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 993:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 995:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 996:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 997:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 998:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 999:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 1000:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1001:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1002:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1003: case 1004: case 1005:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1006:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1007:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 1009:

     this.$ = $$[$0-1];
   
break;
case 1010:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 1011:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1012: case 1013: case 1014:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1015: case 1016: case 1017: case 1018:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0]);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1019: case 1021:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1020:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 1022:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 1023: case 1024: case 1025: case 1026:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 1027:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1028:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1029: case 1030:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 1031: case 1032:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 1033:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 1034:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 1035:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1036:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1037: case 1043:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1038:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1039:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 1040:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 1041:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1042:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1044:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1045: case 1047: case 1049: case 1051:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 1046: case 1050:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1048: case 1052:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 1053: case 1054:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1055: case 1056: case 1057:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1058: case 1059: case 1060:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1061: case 1062: case 1063:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1064:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1065:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1068:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1069:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1071:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1073:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1074:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 1075:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1077: case 1079:

     $$[$0].position = 1;
   
break;
case 1078:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 1080:

     $$[$0-2].position += 1;
   
break;
case 1081:

     $$[$0-2].position = 1;
   
break;
case 1082:

     $$[$0-4].position += 1;
   
break;
case 1083:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 1084:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 1085:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 1086: case 1087:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 1088: case 1089:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 1092:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 1099:

     parser.suggestValues($$[$0]);
   
break;
case 1100:
this.$ = { types: [ 'NUMBER' ], text: $$[$0] };
break;
case 1106: case 1108: case 1109:
this.$ = $$[$0-1] + $$[$0];
break;
case 1107: case 1110:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1111:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1112:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: "'" + $$[$0] + "'" }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 1113:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: '"' + $$[$0] + '"' }
     } else {
       this.$ = { types: [ 'STRING' ], text: '"' + $$[$0] + '"' }
     }
   
break;
case 1114:
this.$ = { types: [ 'BOOLEAN' ], text: $$[$0] };
break;
case 1115:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1116:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1123:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 1130:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1131:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1132:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 1133:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 1143:

     parser.pushQueryState();
   
break;
case 1144:

     parser.popQueryState();
   
break;
case 1146:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 1149:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 1166: case 1167: case 1168: case 1169:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 1176: case 1177:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 1178:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 1179:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 1188:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 1189:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 1195:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 1196:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 1201:

    lexer.popState();
  
break;
case 1202:

    lexer.begin('hdfs');
  
break;
case 1204:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 1205:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 1206:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 1207:

     parser.suggestHdfs({ path: '' });
   
break;
case 1208:

      parser.suggestHdfs({ path: '' });
    
break;
case 1214:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 1215: case 1220:

     parser.suggestKeywords(['ROW']);
   
break;
case 1219:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 1221:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 1225:
this.$ = { inValueEdit: true };
break;
case 1226:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 1227: case 1228: case 1229:

     this.$ = { suggestKeywords: ['NOT'] }
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1233: case 1234: case 1235:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 1236:

     this.$ = parser.findCaseType($$[$0-1])
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1237:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1238:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 1239:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1240:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1241:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 1242:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1243:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 1244:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 1245:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1246:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1247:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 1248:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 1251:

     this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] }
     parser.extractExpressionText(this.$, $$[$0]);
   
break;
case 1252:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1256:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 1258:

     this.$ = $$[$0]
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1259:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 1260:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1261:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1262: case 1263:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 1264:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1265:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 1266:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1267:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 1268: case 1270:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1269:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1271:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 1272:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1273:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1274: case 1275: case 1276: case 1277:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
}
},
table: [o($V0,$V1,{377:1,302:2}),{1:[3]},o($V2,$V3,{378:3,382:4,21:5,183:6,48:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,38:21,39:22,184:23,185:24,208:25,209:26,40:27,46:28,159:31,186:37,4:$V4,8:$V5,12:$V6,18:$V7,160:$V8,161:$V9,190:$Va,196:$Vb,214:$Vc,280:$Vd,310:$Ve,360:$Vf,376:$Vg}),{379:[1,43],383:[1,44]},o($V2,[2,691]),o($V2,[2,697]),o($V2,[2,698]),o($V2,[2,699]),o($V2,[2,17]),o($V2,[2,18]),o($V2,[2,19]),o($V2,[2,20]),o($V2,[2,21]),o($V2,[2,22]),o($V2,[2,23]),o($V2,[2,24]),o($V2,[2,25]),o($V2,[2,26]),o($V2,[2,27]),o($V2,[2,28]),{34:[1,45],35:46,63:47,67:$Vh,117:$Vi,267:$Vj,386:50,387:$Vk,388:$Vl},o($V2,[2,31]),o($V2,[2,32]),o($V2,[2,279]),o($V2,[2,280]),{83:[1,55],209:54,280:$Vd},o($Vm,$Vn,{210:56,297:57,299:58,301:$Vo}),{41:60,129:[1,61]},{47:[1,62]},{43:[1,65],51:[1,66],61:63,67:[1,64],162:[1,67],404:$Vp,422:$Vq},{43:[1,72],51:[1,73],61:70,67:[1,71],404:$Vp,422:$Vq},o($V2,[2,248]),o($V2,[2,249]),o($V2,[2,250]),{43:[1,74]},{43:[1,75]},{63:76,67:$Vh,117:$Vi,267:$Vj,386:50,387:$Vk,388:$Vl},o($V2,[2,281]),{63:82,67:$Vh,117:$Vi,123:81,267:$Vj,361:77,367:78,369:79,386:50,387:$Vk,388:$Vl,397:$Vr,464:80},{63:82,67:$Vh,117:$Vi,123:86,215:84,217:85,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},o([58,59,67,83,99,100,111,116,117,267,292,306,308,309,310,333,334,335,336,337,338,339,340,341,342,343,345,346,387,388,390,391,394,397,401,409,428,429],$Vs,{281:87,34:$Vt,286:$Vu}),{43:[1,90],51:[1,91]},{191:[1,92]},{1:[2,686]},o($V0,$V1,{302:93}),o($V2,[2,29]),{36:[1,94],306:[1,95]},o($Vv,[2,536]),o($Vw,[2,709]),o($Vw,[2,710]),o($Vw,[2,711]),o($Vw,[2,706]),o($Vw,[2,707]),o($Vw,[2,708]),o($Vm,$Vn,{297:57,299:58,210:96,301:$Vo}),{48:97,208:25,209:26,214:$Vc,280:$Vd},o($Vm,[2,327]),o($Vm,[2,517],{299:98,301:$Vo}),o($Vx,[2,519]),o([34,280,286],$V1,{302:99}),o($V2,[2,33]),{83:[1,100]},{48:101,208:25,209:26,214:$Vc,280:$Vd},o($Vy,$Vz,{62:102,345:$VA}),{63:104,67:$Vh,117:$Vi,267:$Vj,386:50,387:$Vk,388:$Vl},o($VB,$Vz,{62:105,345:$VA}),o($VB,$Vz,{62:106,345:$VA}),{166:[1,107]},o($VC,[2,826]),o($VC,[2,827]),o($VB,$VD,{154:108,345:$VE}),{63:110,67:$Vh,117:$Vi,267:$Vj,386:50,387:$Vk,388:$Vl},o($VB,$VD,{154:111,345:$VE}),o($VB,$VD,{154:112,345:$VE}),{44:113,63:82,67:$Vh,117:$Vi,123:114,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},o($VB,$VD,{154:115,345:$VE}),o($V2,[2,684]),{18:[1,116]},{18:[2,663]},{18:[2,665]},{18:[2,923],63:82,67:$Vh,117:$Vi,123:117,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},o($VF,[2,919],{306:[1,118]}),o($VG,[2,916]),{60:[1,119],397:[1,120]},o([83,280],[2,336],{89:[1,121]}),o($VH,[2,338]),{47:[1,122]},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:125,176:163,266:155,267:$Vj,282:123,289:124,292:$VP,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($Vc1,[2,479]),o($Vc1,[2,480]),{44:181,63:82,67:$Vh,117:$Vi,123:114,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},{44:182,63:82,67:$Vh,117:$Vi,123:114,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},o($VB,[2,293],{192:183,43:[1,184]}),o($V2,$V3,{382:4,21:5,183:6,48:7,22:8,23:9,24:10,25:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,38:21,39:22,184:23,185:24,208:25,209:26,40:27,46:28,159:31,186:37,378:185,4:$V4,8:$V5,12:$V6,18:$V7,160:$V8,161:$V9,190:$Va,196:$Vb,214:$Vc,280:$Vd,310:$Ve,360:$Vf,376:$Vg}),{37:186,55:189,58:$VI,59:$VJ,63:187,67:$Vh,100:[1,192],117:$Vi,176:196,266:193,267:$Vj,306:$VQ,307:188,308:[1,190],309:[1,191],386:50,387:$Vk,388:$Vl,391:[1,194],428:$Va1,429:$Vb1,435:197,485:[1,195],490:161,491:162},{63:198,67:$Vh,117:$Vi,267:$Vj,386:50,387:$Vk,388:$Vl},o($Vm,[2,325]),{85:[1,199]},o($Vx,[2,520]),{34:$Vt,280:$Vs,281:200,286:$Vu},{63:82,67:$Vh,91:203,117:$Vi,123:157,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr,446:201,462:202},o($V2,[2,41]),o($V2,[2,58],{386:50,63:204,67:$Vh,117:$Vi,267:$Vj,387:$Vk,388:$Vl}),{99:[1,205]},o($V2,[2,67]),{63:82,67:$Vh,68:206,70:207,76:208,117:$Vi,123:209,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},{63:82,67:$Vh,76:210,117:$Vi,123:209,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},o($VB,$Vz,{62:211,345:$VA}),{63:82,67:$Vh,117:$Vi,123:212,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},{409:[1,213]},o($V2,[2,233]),{44:214,63:82,67:$Vh,117:$Vi,123:114,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},{44:215,63:82,67:$Vh,117:$Vi,123:114,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},{197:[1,216],201:[1,217]},o($Vd1,[2,893],{306:[1,218]}),{44:219,63:82,67:$Vh,117:$Vi,123:114,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},{63:82,67:$Vh,91:149,117:$Vi,123:157,153:223,267:$Vj,362:220,371:221,373:222,386:50,387:$Vk,388:$Vl,397:$Vr,466:224},{18:[2,924]},{63:82,67:$Vh,117:$Vi,123:225,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},{397:[1,226]},o($VG,[2,918]),{63:82,67:$Vh,117:$Vi,123:86,217:227,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},{83:[1,228]},o($Vx,[2,468],{283:229,221:231,89:[1,230],197:[1,232]}),o($Ve1,[2,485]),o($Ve1,$Vf1,{386:50,63:82,176:196,435:197,291:233,477:247,123:248,55:249,36:$Vg1,47:$Vh1,58:$VI,59:$VJ,67:$Vh,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,117:$Vi,146:$Vm1,267:$Vj,292:$Vn1,387:$Vk,388:$Vl,391:$Vo1,395:$Vp1,396:$Vq1,397:$Vr,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),o($Ve1,[2,501]),o($Vx1,[2,960]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:254,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:255,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:256,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:257,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{83:$Vy1,474:258},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:260,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:262,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,431:$Vz1,435:164,466:140,478:261,486:148,488:156,490:161,491:162,492:165,540:263,542:264},o($Vx1,[2,618],{349:266,83:$VA1}),{83:$VA1,349:268},o($Vx1,[2,616]),o($Vx1,[2,617]),o($Vx1,[2,619]),o($VB1,[2,1092],{306:[1,269]}),{83:[2,598]},{83:[2,599]},{83:[2,600]},{83:[2,601]},o($Vx1,[2,647],{314:270,316:271,357:$VC1}),{316:273,357:$VC1},o($Vx1,[2,555]),o($Vx1,[2,1098]),o($VD1,[2,930]),o($VE1,[2,563]),o($VE1,[2,564]),o($VE1,[2,565]),{83:[1,274]},{83:[1,275]},o($Vx1,[2,1100]),o($Vx1,[2,1101]),o([36,47,54,58,59,67,81,83,85,89,99,111,112,113,116,117,133,146,197,229,240,253,254,255,256,257,258,259,260,265,267,271,278,279,292,301,303,306,379,383,387,388,391,395,396,397,398,399,400,402,405,406,407,408,410,413,414,415,416,418,419,421,423,424,425,426,427,430,431,476],[2,940]),{83:[1,276]},{83:[1,277]},{83:[1,278]},o($Vx1,[2,1103]),o($Vx1,[2,1104]),o($Vx1,[2,1112]),o($Vx1,[2,1113]),o($Vx1,[2,1114]),{83:[2,574]},{83:[2,575]},{83:[2,576]},{83:[2,577]},{83:[2,578]},{83:[2,579]},{83:[2,580]},{83:[2,581]},o($Vx1,[2,1105],{306:[1,279]}),{428:[1,280],429:[1,281]},{428:[1,282]},{58:[1,284],60:[1,283]},{59:[1,286],60:[1,285]},o($Vx1,[2,1117]),o($Vx1,[2,1118]),{129:[2,38]},{47:[2,47]},{44:287,63:82,67:$Vh,117:$Vi,123:114,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},o($VB,[2,294]),o($V2,[2,692]),o($V2,[2,30]),o($V2,[2,538]),o($V2,[2,539],{386:50,63:288,67:$Vh,117:$Vi,267:$Vj,387:$Vk,388:$Vl}),o($V2,[2,541]),o($V2,[2,542]),o($V2,[2,543]),o($V2,[2,544]),o($Vy,[2,1095]),{266:289,306:$VQ,428:$Va1,429:$Vb1,490:161,491:162},{266:290,306:$VQ,428:$Va1,429:$Vb1,490:161,491:162},o($VF1,[2,834]),o($VF1,[2,835]),o($Vv,[2,537]),o($Vm,$Vn,{297:57,299:58,210:291,301:$Vo}),{209:292,280:$Vd},{85:[1,293],89:[1,294]},o($VG1,[2,905]),{36:[1,295]},o($V2,$VH1,{64:296,52:297,53:298,54:$VI1}),{409:[1,300]},o($V2,[2,68]),o($VJ1,[2,164],{71:301,128:302,129:[1,303]}),o($VK1,[2,80],{77:304,80:305,81:[1,306],83:$VL1}),o($VM1,[2,898],{306:[1,308]}),o($VN1,[2,216],{148:309,150:310,83:[1,311]}),{63:82,67:$Vh,76:313,117:$Vi,123:209,167:312,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},o($V2,[2,841],{155:314,442:[1,315]}),o($VB,[2,844]),o($V2,[2,240],{157:316,158:[1,317]}),o($V2,[2,242]),{197:$VO1,198:318},{202:[1,320]},{63:82,67:$Vh,117:$Vi,123:321,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},o($V2,[2,545]),o($VP1,[2,680],{363:322,89:[1,323],197:[1,324]}),o($VQ1,[2,667]),{36:[1,325]},{36:[2,677]},o($VR1,[2,927],{306:[1,326]}),o($VF,[2,920]),o($VG,[2,917]),o($VH,[2,339]),o($VS1,$VT1,{219:327,503:328}),o($Vx,[2,469]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:125,176:163,266:155,267:$Vj,289:329,292:$VP,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($VU1,$VV1,{287:330,294:331,296:332,303:$VW1}),{44:341,63:82,67:$Vh,83:$Vy1,117:$Vi,123:114,222:334,225:335,246:337,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr,474:342,493:336,495:338,497:339,498:340},o($Ve1,[2,500]),o($VX1,[2,1119],{473:343,99:[1,344]}),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:345,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:346,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:347,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:348,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{81:$Vi1,398:[1,350],413:[1,349],418:$Vv1,419:$Vw1,477:351},{83:[1,352]},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:353,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:354,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:355,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:356,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:357,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:358,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($Vx1,[2,986]),o($VY1,[2,1166]),o($VY1,[2,1167]),{55:360,58:$VI,59:$VJ,63:82,67:$Vh,117:$Vi,123:359,176:196,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr,435:197},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:361,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:362,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:363,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($VZ1,[2,961],{477:247,36:$Vg1,81:$Vi1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,396:$Vq1,413:$Vs1,415:$Vt1,418:$Vv1,419:$Vw1}),o($VZ1,[2,962],{477:247,36:$Vg1,81:$Vi1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,396:$Vq1,413:$Vs1,415:$Vt1,418:$Vv1,419:$Vw1}),o($VZ1,[2,963],{477:247,36:$Vg1,81:$Vi1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,396:$Vq1,413:$Vs1,415:$Vt1,418:$Vv1,419:$Vw1}),o($V_1,[2,964],{477:247}),o($Vx1,[2,969]),o($VS1,$VT1,{503:328,474:342,219:364,498:365,83:$Vy1}),{36:$Vg1,81:$Vi1,85:[1,366],99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1,477:247},o($Vx1,[2,988]),{36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1,431:$Vz1,477:247,478:367,540:263,542:264},{407:[1,369],408:[1,368],431:$Vz1,542:370},o($V$1,[2,1251]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:371,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($Vx1,[2,614]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,85:[1,372],91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:374,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,331:373,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($Vx1,[2,615]),{63:82,67:$Vh,91:376,117:$Vi,123:157,267:$Vj,292:[1,375],386:50,387:$Vk,388:$Vl,397:$Vr},o($Vx1,[2,553]),o($Vx1,[2,648]),{63:82,67:$Vh,83:[1,379],117:$Vi,123:377,267:$Vj,358:378,386:50,387:$Vk,388:$Vl,397:$Vr},o($Vx1,[2,554]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,85:[1,380],91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:374,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,331:381,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,85:[1,383],91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:382,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o([58,59,67,83,85,99,100,111,116,117,267,306,308,309,310,333,334,335,336,337,338,339,340,341,342,343,345,346,387,388,390,391,394,397,401,409,428,429],$Vs,{281:384,34:$Vt,286:$Vu}),o($V02,$Vs,{281:387,34:$Vt,85:[1,386],286:$Vu,292:[1,385]}),o($V02,$Vs,{281:388,34:$Vt,85:[1,389],286:$Vu}),o($Vx1,[2,1106],{428:[1,390],429:[1,391]}),o($Vx1,[2,1108]),{428:[1,392]},o($Vx1,[2,1109]),{58:[1,393]},o($V12,[2,829]),{59:[1,394]},o($V22,[2,832]),{144:[1,395]},o($V2,[2,540]),o($Vy,[2,1096]),o($Vy,[2,1097]),o($Vm,[2,326]),o($Vx,[2,525]),o($V2,[2,856]),{63:82,67:$Vh,91:203,117:$Vi,123:157,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr,462:396},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:397,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($V2,[2,59]),o($V2,[2,65]),o([47,85,89,113,379,383],[2,51]),{55:398,58:$VI,59:$VJ,176:196,435:197},o([67,117,267,379,383,387,388,397],[2,847]),o($V2,[2,202],{72:399,47:[1,400]}),o($VJ1,[2,165]),{130:[1,401]},o($VK1,[2,77]),o($VK1,[2,81]),{44:402,63:82,67:$Vh,117:$Vi,123:114,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},{63:82,67:$Vh,84:403,88:404,91:405,117:$Vi,123:157,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},{63:82,67:$Vh,117:$Vi,123:406,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},{47:$VH1,52:407,53:298,54:$VI1},o($VN1,[2,217]),{63:82,67:$Vh,91:149,117:$Vi,123:157,151:408,153:409,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr,466:224},o($V2,[2,255]),{169:[1,410]},o($V2,[2,226]),o($V2,[2,842]),o($V2,[2,234]),o($V2,[2,241]),{162:[1,411]},{83:[1,412]},{201:[1,414],203:413},o($Vd1,[2,894]),o($V2,$VV1,{296:332,294:415,303:$VW1}),{63:82,67:$Vh,91:149,117:$Vi,123:157,153:223,267:$Vj,371:416,373:222,386:50,387:$Vk,388:$Vl,397:$Vr,466:224},{44:341,63:82,67:$Vh,83:$Vy1,117:$Vi,123:114,225:417,246:337,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr,474:342,493:336,495:338,497:339,498:340},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:419,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,374:418,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{63:82,67:$Vh,91:376,117:$Vi,123:157,267:$Vj,292:[1,420],386:50,387:$Vk,388:$Vl,397:$Vr},{85:[1,421]},{48:429,208:25,209:26,214:$Vc,280:$Vd,505:422,507:423,509:424,511:425,513:426,515:427,517:428},o($Ve1,[2,486]),o($Vx,[2,481]),o($V32,[2,358],{227:430,228:431,229:[1,432]}),o($VU1,[2,530]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:434,176:163,266:155,267:$Vj,304:433,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o([85,229,240,265,271,301,303,379,383],[2,348],{89:[1,435]}),o($V42,[2,351]),o($V42,[2,1121]),o($V42,[2,1123],{243:436,245:437,253:$V52,254:$V62,255:$V72,256:$V82,257:$V92,258:$Va2,259:$Vb2,260:$Vc2}),o($V42,[2,1124]),o($Vd2,$Vf1,{386:50,63:82,176:196,435:197,123:248,55:249,291:446,47:$Vh1,58:$VI,59:$VJ,67:$Vh,117:$Vi,267:$Vj,387:$Vk,388:$Vl,397:$Vr}),o($Vd2,$Vf1,{386:50,63:82,176:196,435:197,123:248,55:249,291:447,47:$Vh1,58:$VI,59:$VJ,67:$Vh,117:$Vi,267:$Vj,387:$Vk,388:$Vl,397:$Vr}),o($Ve2,[2,1135]),o($Ve2,[2,1137]),{100:[1,448],286:[1,451],308:[1,449],309:[1,450]},o($VX1,[2,1120]),o($Vf2,[2,971],{477:247,81:$Vi1,292:$Vn1,391:$Vo1,396:$Vq1,413:$Vs1,415:$Vt1,418:$Vv1,419:$Vw1}),o($Vf2,[2,972],{477:247,81:$Vi1,292:$Vn1,391:$Vo1,396:$Vq1,413:$Vs1,415:$Vt1,418:$Vv1,419:$Vw1}),o($Vf2,[2,973],{477:247,81:$Vi1,292:$Vn1,391:$Vo1,396:$Vq1,413:$Vs1,415:$Vt1,418:$Vv1,419:$Vw1}),o($Vf2,[2,974],{477:247,81:$Vi1,292:$Vn1,391:$Vo1,396:$Vq1,413:$Vs1,415:$Vt1,418:$Vv1,419:$Vw1}),{83:[1,452]},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:453,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($Vx1,[2,987]),o($VS1,$VT1,{386:50,63:82,347:127,348:135,344:136,312:137,350:138,466:140,313:145,315:146,317:147,486:148,91:149,324:150,325:151,326:152,266:155,488:156,123:157,330:158,490:161,491:162,176:163,435:164,492:165,503:328,219:454,475:455,142:456,58:$VI,59:$VJ,67:$Vh,83:$VK,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,345:$V31,346:$V41,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1}),{36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1,476:[1,457],477:247},o($Vg2,[2,981],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,418:$Vv1,419:$Vw1}),o($Vg2,[2,982],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,418:$Vv1,419:$Vw1}),o($V_1,[2,983],{477:247,81:$Vi1,413:$Vs1,415:$Vt1,418:$Vv1,419:$Vw1}),o($V_1,[2,984],{477:247,81:$Vi1,413:$Vs1,415:$Vt1,418:$Vv1,419:$Vw1}),o($V_1,[2,985],{477:247,81:$Vi1,413:$Vs1,415:$Vt1,418:$Vv1,419:$Vw1}),o($VY1,[2,1168]),o($VY1,[2,1169]),o($V_1,[2,1227],{477:247}),o($V_1,[2,1228],{477:247}),o($V_1,[2,1229],{477:247}),{85:[1,458]},{47:$Vh1,55:249,58:$VI,59:$VJ,63:82,67:$Vh,85:$Vf1,117:$Vi,123:248,176:196,267:$Vj,291:459,386:50,387:$Vk,388:$Vl,397:$Vr,435:197},o($Vx1,[2,970]),o($Vx1,[2,989]),o($Vx1,[2,1236]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:460,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($V$1,[2,1252]),{36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1,425:[1,461],477:247},o($Vx1,[2,629]),{85:[1,462],89:$Vh2},o($VG1,[2,634],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),o($VB1,[2,1093]),o($VD1,[2,931]),o($Vx1,[2,650]),o($Vx1,[2,651]),o($Vi2,[2,1180],{519:464,523:465,129:[1,466]}),{357:[2,593]},{85:[1,467],89:$Vh2},{36:$Vg1,47:[1,468],81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1,477:247},o($Vx1,[2,603]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,85:[1,469],91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:374,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,331:470,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{85:[1,471]},o($VE1,[2,583]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:374,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,331:472,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:473,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($VE1,[2,589]),o($Vx1,[2,1107]),{428:[1,474]},o($Vx1,[2,1110]),o($V12,[2,828]),o($V22,[2,831]),{83:$Vj2,193:475,194:476},o($VG1,[2,906]),o($VG1,[2,911],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),o([47,54,85,89,99,100,113,379,383],[2,52]),o($V2,[2,72]),o($VS1,[2,206],{147:478}),{131:479,133:[1,480]},o($VK1,[2,82]),{85:[1,481],89:[1,482]},o($VG1,[2,88]),{92:483,101:484,102:485,103:486,104:487,105:488,106:489,107:490,111:$Vk2,116:$Vl2,117:$Vm2,399:$Vn2,400:$Vo2,402:$Vp2,405:$Vq2,406:$Vr2,410:$Vs2,414:$Vt2,423:$Vu2,424:$Vv2,426:$Vw2,427:$Vx2,430:$Vy2},o($VM1,[2,899]),{47:[1,506]},{85:[1,507],89:[1,508]},o($VG1,$VH1,{53:298,52:509,54:$VI1}),{63:511,67:$Vh,117:$Vi,170:510,267:$Vj,386:50,387:$Vk,388:$Vl},{199:[1,512]},{58:$VI,176:514,206:513},{197:[1,515]},{202:[1,516]},o($V2,[2,653]),o($VQ1,[2,668]),o($VP1,[2,681]),o($VQ1,[2,673]),o($VQ1,[2,678],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),o($VR1,[2,928]),o($VH,[2,344]),{85:[2,1149]},{85:[2,1151]},{85:[2,1153]},{85:[2,1155]},{85:[2,1157]},{85:[2,1159]},{85:[2,1161]},{85:[2,1163]},o($Vz2,[2,387],{238:517,239:518,240:[1,519]}),o($V32,[2,359]),{130:[1,520]},o($VU1,[2,531]),o($VU1,[2,534],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),{44:341,63:82,67:$Vh,83:$Vy1,117:$Vi,123:114,225:521,246:337,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr,474:342,493:336,495:338,497:339,498:340},o($V42,[2,1127],{245:522,253:$V52,254:$V62,255:$V72,256:$V82,257:$V92,258:$Va2,259:$Vb2,260:$Vc2}),{44:341,63:82,67:$Vh,83:$Vy1,117:$Vi,123:114,246:523,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr,474:342,497:339,498:340},{254:[1,524]},{254:[1,525],256:[1,526]},{254:[1,527]},o($VA2,[2,412]),{254:[1,529],256:[1,530],257:[1,528],259:[1,531]},{254:[1,532]},{254:[1,534],256:[1,535],257:[1,533],259:[1,536]},{254:[1,537]},o($Vd2,[2,1130]),o($Vd2,[2,1131]),o($Vx1,[2,965]),o($Vx1,[2,966]),o($Vx1,[2,967]),{197:[1,538]},o($VS1,$VT1,{386:50,63:82,347:127,348:135,344:136,312:137,350:138,466:140,313:145,315:146,317:147,486:148,91:149,324:150,325:151,326:152,266:155,488:156,123:157,330:158,490:161,491:162,176:163,435:164,492:165,503:328,142:456,219:539,475:540,58:$VI,59:$VJ,67:$Vh,83:$VK,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,345:$V31,346:$V41,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1}),{36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1,476:[1,541],477:247},{85:[1,542]},{85:[1,543],89:$VB2},o($VC2,[2,1077],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:545,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($VD2,[2,1145]),{85:[1,546]},{36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,408:[1,547],413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1,477:247},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:548,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($Vx1,[2,630]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:549,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{85:[2,1186],270:551,271:$VE2,520:550},o($Vi2,[2,1181]),{130:[1,553]},{357:[2,594]},{101:554,399:$Vn2,400:$Vo2,402:$Vp2,405:$Vq2,406:$Vr2,410:$Vs2,414:$Vt2,423:$Vu2,424:$Vv2,426:$Vw2,427:$Vx2,430:$Vy2},o($VE1,[2,569]),{85:[1,555],89:$Vh2},o($VE1,[2,582]),{85:[1,556],89:$Vh2},{36:$Vg1,81:$Vi1,85:[1,557],99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1,477:247},o($Vx1,[2,1111]),o($V2,[2,284],{89:[1,558]}),o($VF2,[2,290]),{58:$VI,59:$VJ,63:82,67:$Vh,91:149,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,176:163,195:559,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:560,348:135,350:138,386:50,387:$Vk,388:$Vl,397:$Vr,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{48:561,208:25,209:26,214:$Vc,280:$Vd},o($VJ1,[2,166]),{83:[1,563],134:562},o([47,129,197,379,383],[2,86]),{63:82,67:$Vh,88:564,91:405,117:$Vi,123:157,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},o($VG1,[2,102],{93:565,96:566,97:567,53:570,54:$VI1,99:$VG2,100:$VH2}),o($VI2,[2,114]),o($VI2,[2,115]),o($VI2,[2,116]),o($VI2,[2,117]),o($VI2,[2,118]),o($VI2,[2,119]),o($VI2,[2,120]),o($VI2,[2,943]),o($VI2,[2,944]),o($VI2,$VJ2,{471:571,83:$VK2}),o($VI2,[2,957],{472:573,83:[1,574]}),o($VI2,[2,947]),o($VI2,[2,948]),o($VI2,[2,949]),o($VI2,[2,950]),o($VI2,[2,951]),o($VI2,[2,952]),o($VI2,[2,953]),o($VI2,$VJ2,{471:575,83:$VK2}),{112:[1,576]},{112:[1,577]},{112:[1,578]},{48:579,208:25,209:26,214:$Vc,280:$Vd},o($VN1,[2,218]),{63:82,67:$Vh,91:149,117:$Vi,123:157,153:580,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr,466:224},o($VG1,[2,220]),{171:[1,581]},{171:[2,261]},{63:82,67:$Vh,76:582,117:$Vi,123:209,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},{85:[1,583],89:[1,584]},o($VG1,[2,319]),{197:$VO1,198:585},{80:586,83:$VL1},o($VL2,[2,450],{269:587,270:588,271:$VE2}),o($Vz2,[2,388]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:589,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:591,176:163,230:590,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($V42,[2,352]),{44:341,63:82,67:$Vh,83:$Vy1,117:$Vi,123:114,246:592,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr,474:342,497:339,498:340},o($VM2,$VN2,{247:593,261:$VO2}),o($VA2,[2,408]),o($VA2,[2,409]),{254:[1,595]},o($VA2,[2,411]),{254:[1,596]},o($VA2,[2,414]),{254:[1,597]},{254:[1,598]},o($VA2,[2,417]),{254:[1,599]},o($VA2,[2,419]),{254:[1,600]},{254:[1,601]},o($VA2,[2,422]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:602,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{85:[1,603]},{85:[1,604],89:$VB2},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:605,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($Vx1,[2,977]),o($Vx1,[2,978]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:606,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o([47,58,59,67,85,89,117,133,197,229,240,253,254,255,256,257,258,259,260,265,267,271,278,279,301,303,379,383,387,388,395,397,398,407,408,416,421,425,431,476],[2,980],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,396:$Vq1,413:$Vs1,415:$Vt1,418:$Vv1,419:$Vw1}),o($VD2,[2,1146]),o($Vx1,[2,1237]),o($V$1,[2,1258],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),o($VG1,[2,635],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),{85:[1,607]},{85:[2,1191],133:[1,612],421:[1,611],524:608,526:609,527:610},{130:[1,613]},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:456,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,475:614,486:148,488:156,490:161,491:162,492:165},{85:[1,615]},o($VE1,[2,570]),o($VE1,[2,584]),o($VE1,[2,588]),{83:$Vj2,194:616},{85:[1,617],89:[1,618]},o($VG1,[2,1090]),o($V2,[2,203]),{83:[1,620],135:619},{63:82,67:$Vh,91:622,117:$Vi,123:157,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr,458:621},o($VG1,[2,89]),o($VG1,[2,98]),o($VG1,[2,103],{53:570,97:623,54:$VI1,99:$VG2,100:$VH2}),o($VP2,[2,104]),{100:[1,624]},o($VP2,[2,111]),o($VP2,[2,112]),o($VI2,[2,945]),{428:[1,625]},o($VI2,[2,946]),{428:[1,626]},o($VI2,[2,954]),{92:627,101:484,102:485,103:486,104:487,105:488,106:489,107:490,111:$Vk2,113:[1,628],116:$Vl2,117:$Vm2,399:$Vn2,400:$Vo2,402:$Vp2,405:$Vq2,406:$Vr2,410:$Vs2,414:$Vt2,423:$Vu2,424:$Vv2,426:$Vw2,427:$Vx2,430:$Vy2},{101:629,113:[1,630],399:$Vn2,400:$Vo2,402:$Vp2,405:$Vq2,406:$Vr2,410:$Vs2,414:$Vt2,423:$Vu2,424:$Vv2,426:$Vw2,427:$Vx2,430:$Vy2},{63:82,67:$Vh,113:[1,632],117:$Vi,118:631,120:633,123:634,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},o($V2,[2,207]),o($VG1,$VH1,{53:298,52:635,54:$VI1}),{58:$VI,172:636,176:637},o($V2,[2,295],{162:[1,638]}),{162:[2,316]},{58:$VI,176:639},{162:[1,640]},{197:[2,314]},o($Vx,[2,443],{263:641,264:642,265:[1,643]}),o($VL2,[2,451]),o($Vz2,[2,389],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),o($V32,[2,360],{89:[1,644]}),o($VQ2,[2,375],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),o($VM2,$VN2,{247:645,261:$VO2}),o($VM2,[2,395]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:646,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($VA2,[2,410]),o($VA2,[2,413]),o($VA2,[2,415]),o($VA2,[2,416]),o($VA2,[2,418]),o($VA2,[2,420]),o($VA2,[2,421]),o($V_1,[2,968],{477:247}),o($Vx1,[2,975]),o($Vx1,[2,976]),o($VZ1,[2,979],{477:247,36:$Vg1,81:$Vi1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,396:$Vq1,413:$Vs1,415:$Vt1,418:$Vv1,419:$Vw1}),o($VC2,[2,1078],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),o($Vx1,[2,1175]),{85:[2,1187]},{85:[2,1192]},{398:[1,647],531:[1,648]},o($VR2,[2,1209]),o($VR2,[2,1210]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:651,176:163,266:155,267:$Vj,272:649,275:650,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($Vi2,[2,1182],{89:$VB2}),o($Vx1,[2,602]),o($VF2,[2,291]),o($VF2,[2,292]),{58:$VI,59:$VJ,63:82,67:$Vh,91:149,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:652,348:135,350:138,386:50,387:$Vk,388:$Vl,397:$Vr,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($VJ1,[2,170]),{129:$VS2,138:653,140:654},{85:[1,656],89:[1,657]},o($VG1,[2,886]),o($VP2,[2,105]),o($VP2,[2,110]),{85:[1,658]},{85:[1,659],89:[1,660]},{113:[1,661]},o($VI2,[2,125]),{89:[1,662]},o($VI2,[2,129]),{89:[1,664],113:[1,663]},o($VI2,[2,135]),o($VT2,[2,137]),{124:[1,665]},o($VG1,[2,221]),{173:[1,666]},{173:[2,262]},{200:[1,667]},o($VG1,[2,320]),{199:[1,668]},o($Vx,[2,505]),o($Vx,[2,444]),{266:669,267:[1,670],306:$VQ,428:$Va1,429:$Vb1,490:161,491:162},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:671,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($VM2,[2,396]),o($VM2,[2,438],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),o($VU2,$VV2,{528:672}),o($VU2,$VV2,{528:673}),o([85,133,265,301,379,383,421],[2,452],{89:[1,674]}),o($VW2,[2,455]),o($VW2,[2,465],{477:247,277:675,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,278:[1,676],279:[1,677],292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),o($VG1,[2,1091]),{85:[1,678],89:[1,679]},o($VG1,[2,179]),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:680,144:[1,681],176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{83:[2,883]},{63:82,67:$Vh,91:682,117:$Vi,123:157,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},o($VI2,[2,956]),o($VI2,[2,958]),{428:[1,683]},o($VI2,[2,124]),{92:684,101:484,102:485,103:486,104:487,105:488,106:489,107:490,111:$Vk2,116:$Vl2,117:$Vm2,399:$Vn2,400:$Vo2,402:$Vp2,405:$Vq2,406:$Vr2,410:$Vs2,414:$Vt2,423:$Vu2,424:$Vv2,426:$Vw2,427:$Vx2,430:$Vy2},o($VI2,[2,134]),{63:82,67:$Vh,117:$Vi,120:685,123:634,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},{92:686,101:484,102:485,103:486,104:487,105:488,106:489,107:490,111:$Vk2,116:$Vl2,117:$Vm2,399:$Vn2,400:$Vo2,402:$Vp2,405:$Vq2,406:$Vr2,410:$Vs2,414:$Vt2,423:$Vu2,424:$Vv2,426:$Vw2,427:$Vx2,430:$Vy2},{58:$VI,174:687,176:688},{63:82,67:$Vh,76:689,117:$Vi,123:209,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},{63:82,67:$Vh,76:690,117:$Vi,123:209,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},o($Vx,[2,445],{89:[1,691]}),o($Vx,[2,447],{89:[1,692]}),o($VQ2,[2,376],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),o($VX2,$VY2,{529:693,539:694,403:$VZ2,428:$V_2,531:$V$2}),o($VX2,$VY2,{539:694,529:698,403:$VZ2,428:$V_2,531:$V$2}),{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:651,176:163,266:155,267:$Vj,275:699,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($VW2,[2,462]),o($VW2,[2,466]),o($VW2,[2,467]),o($VJ1,[2,176]),{129:$VS2,140:700},{36:$Vg1,81:$Vi1,99:$Vj1,112:[1,702],113:$Vl1,143:701,146:[1,703],292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1,477:247},{112:$V03,143:704,146:$V13},o($VG1,[2,887]),{85:[1,707]},{113:[1,708]},o($VT2,[2,138]),o($VT2,$VH1,{53:298,52:709,54:$VI1}),o($V2,[2,266],{175:710,180:[1,711]}),o([180,379,383],[2,264]),o($V2,[2,296]),o($V2,[2,297],{162:[1,712]}),{266:713,306:$VQ,428:$Va1,429:$Vb1,490:161,491:162},{267:[1,714]},{85:$V23,395:$V33,530:715},{417:[1,717]},{420:[1,718]},o($V43,[2,1222]),o($V43,[2,1223]),{85:$V23,395:$V33,530:719},o($VW2,[2,456]),o($VG1,[2,180]),{144:[1,720]},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:346,144:$V53,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:348,144:$V63,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:721,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},o($V02,$V53),o($V02,$V63),o($VI2,[2,959]),o($VI2,[2,128]),o($VT2,[2,144]),o($V2,[2,260]),{58:$VI,176:722},{200:[1,723]},o($Vx,[2,446]),o($Vx,[2,448]),{85:[2,1193]},{403:[1,724],428:$V_2,531:$V$2,539:725},o($VX2,[2,1212]),o($VX2,[2,1213]),{85:[2,1194]},o($VG1,[2,188],{143:726,112:$V03,146:$V13}),o($VG1,[2,187],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),{181:[1,727]},{63:82,67:$Vh,76:728,117:$Vi,123:209,267:$Vj,386:50,387:$Vk,388:$Vl,397:$Vr},{420:[1,729]},{411:[1,730]},{58:$VI,59:$VJ,63:82,67:$Vh,83:$VK,91:149,99:$VL,100:$VM,111:$VN,116:$VO,117:$Vi,123:157,142:731,176:163,266:155,267:$Vj,306:$VQ,308:$VR,309:$VS,310:$VT,312:137,313:145,315:146,317:147,324:150,325:151,326:152,330:158,333:$VU,334:$VV,335:$VW,336:$VX,337:$VY,338:$VZ,339:$V_,340:$V$,341:$V01,342:$V11,343:$V21,344:136,345:$V31,346:$V41,347:127,348:135,350:138,386:50,387:$Vk,388:$Vl,390:$V51,391:$V61,394:$V71,397:$Vr,401:$V81,409:$V91,428:$Va1,429:$Vb1,435:164,466:140,486:148,488:156,490:161,491:162,492:165},{58:$VI,176:732},o($V2,[2,298]),{85:[2,1217]},{85:[2,1218]},o($VG1,[2,186],{477:247,36:$Vg1,81:$Vi1,99:$Vj1,112:$Vk1,113:$Vl1,146:$Vm1,292:$Vn1,391:$Vo1,395:$Vp1,396:$Vq1,398:$Vr1,413:$Vs1,415:$Vt1,416:$Vu1,418:$Vv1,419:$Vw1}),o($V2,[2,267])],
defaultActions: {43:[2,686],78:[2,663],79:[2,665],117:[2,924],141:[2,598],142:[2,599],143:[2,600],144:[2,601],166:[2,574],167:[2,575],168:[2,576],169:[2,577],170:[2,578],171:[2,579],172:[2,580],173:[2,581],181:[2,38],182:[2,47],223:[2,677],380:[2,593],422:[2,1149],423:[2,1151],424:[2,1153],425:[2,1155],426:[2,1157],427:[2,1159],428:[2,1161],429:[2,1163],467:[2,594],511:[2,261],583:[2,316],586:[2,314],608:[2,1187],609:[2,1192],637:[2,262],656:[2,883],715:[2,1193],719:[2,1194],729:[2,1217],730:[2,1218]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 5; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 432; 
break;
case 5: this.popState(); return 476; 
break;
case 6: return 34; 
break;
case 7: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('ALTER', yy_.yylloc, yy.lexer.upcomingInput()); return 4; 
break;
case 8: return 395; 
break;
case 9: return 47; 
break;
case 10: return 278; 
break;
case 11: this.begin('between'); return 398; 
break;
case 12: return 399; 
break;
case 13: return 400; 
break;
case 14: return 130; 
break;
case 15: return 442; 
break;
case 16: return 401; 
break;
case 17: return 402; 
break;
case 18: return 54; 
break;
case 19: parser.determineCase(yy_.yytext); return 8; 
break;
case 20: return 253; 
break;
case 21: return 403; 
break;
case 22: return 404; 
break;
case 23: return 405; 
break;
case 24: return 279; 
break;
case 25: return 286; 
break;
case 26: return 396; 
break;
case 27: return 406; 
break;
case 28: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('DROP', yy_.yylloc, yy.lexer.upcomingInput()); return 12; 
break;
case 29: return 407; 
break;
case 30: return 408; 
break;
case 31: parser.yy.correlatedSubQuery = true; return 409; 
break;
case 32: return 309; 
break;
case 33: return 410; 
break;
case 34: return 411; 
break;
case 35: parser.determineCase(yy_.yytext); return 197; 
break;
case 36: return 255; 
break;
case 37: return 229; 
break;
case 38: return 240; 
break;
case 39: return 345; 
break;
case 40: return 413; 
break;
case 41: return 257; 
break;
case 42: return 190; 
break;
case 43: return 414; 
break;
case 44: return 191; 
break;
case 45: return 415; 
break;
case 46: return 254; 
break;
case 47: return 258; 
break;
case 48: return 81; 
break;
case 49: return 265; 
break;
case 50: return 99; 
break;
case 51: return 100; 
break;
case 52: return 261; 
break;
case 53: return 387; 
break;
case 54: return 416; 
break;
case 55: return 271; 
break;
case 56: return 256; 
break;
case 57: return 129; 
break;
case 58: return 417; 
break;
case 59: return 158; 
break;
case 60: return 133; 
break;
case 61: return 418; 
break;
case 62: return 260; 
break;
case 63: return 419; 
break;
case 64: return 420; 
break;
case 65: return 67; 
break;
case 66: return 421; 
break;
case 67: return 422; 
break;
case 68: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 280; 
break;
case 69: return 259; 
break;
case 70: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 18; 
break;
case 71: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 'SHOW'; 
break;
case 72: return 423; 
break;
case 73: return 424; 
break;
case 74: return 43; 
break;
case 75: return 425; 
break;
case 76: return 426; 
break;
case 77: return 427; 
break;
case 78: return 'TO'; 
break;
case 79: return 308; 
break;
case 80: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('TRUNCATE', yy_.yylloc, yy.lexer.upcomingInput()); return 310; 
break;
case 81: return 531; 
break;
case 82: return 301; 
break;
case 83: parser.determineCase(yy_.yytext); return 360; 
break;
case 84: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('USE', yy_.yylloc); return 376; 
break;
case 85: return 144; 
break;
case 86: return 430; 
break;
case 87: return 51; 
break;
case 88: return 431; 
break;
case 89: return 303; 
break;
case 90: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 214; 
break;
case 91: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('LOAD', yy_.yylloc, yy.lexer.upcomingInput()); return 196; 
break;
case 92: return 201; 
break;
case 93: return 202; 
break;
case 94: return 162; 
break;
case 95: return 166; 
break;
case 96: return 199; 
break;
case 97: return 200; 
break;
case 98: return 169; 
break;
case 99: return 171; 
break;
case 100: return 173; 
break;
case 101: return 180; 
break;
case 102: return 181; 
break;
case 103: return 357; 
break;
case 104: return 67; 
break;
case 105: yy.lexer.unput('('); yy_.yytext = 'avg'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 333; 
break;
case 106: yy.lexer.unput('('); yy_.yytext = 'cast'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 346; 
break;
case 107: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 341; 
break;
case 108: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 334; 
break;
case 109: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 335; 
break;
case 110: yy.lexer.unput('('); yy_.yytext = 'stddev_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 336; 
break;
case 111: yy.lexer.unput('('); yy_.yytext = 'stddev_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 337; 
break;
case 112: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 342; 
break;
case 113: yy.lexer.unput('('); yy_.yytext = 'var_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 338; 
break;
case 114: yy.lexer.unput('('); yy_.yytext = 'var_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 339; 
break;
case 115: yy.lexer.unput('('); yy_.yytext = 'variance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 340; 
break;
case 116: yy.lexer.unput('('); yy_.yytext = 'cume_dist'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 343; 
break;
case 117: yy.lexer.unput('('); yy_.yytext = 'dense_rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 343; 
break;
case 118: yy.lexer.unput('('); yy_.yytext = 'first_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 343; 
break;
case 119: yy.lexer.unput('('); yy_.yytext = 'lag'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 343; 
break;
case 120: yy.lexer.unput('('); yy_.yytext = 'last_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 343; 
break;
case 121: yy.lexer.unput('('); yy_.yytext = 'lead'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 343; 
break;
case 122: yy.lexer.unput('('); yy_.yytext = 'rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 343; 
break;
case 123: yy.lexer.unput('('); yy_.yytext = 'row_number'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 343; 
break;
case 124: return 428; 
break;
case 125: return 428; 
break;
case 126: return 429; 
break;
case 127: return 388; 
break;
case 128: parser.yy.cursorFound = true; return 5; 
break;
case 129: parser.yy.cursorFound = true; return 432; 
break;
case 130: return 412; 
break;
case 131: parser.addFileLocation(yy_.yylloc, yy_.yytext); return 536; 
break;
case 132: this.popState(); return 537; 
break;
case 133: return 379; 
break;
case 134: return 395; 
break;
case 135: return 416; 
break;
case 136: return 36; 
break;
case 137: return 112; 
break;
case 138: return 113; 
break;
case 139: return 146; 
break;
case 140: return 146; 
break;
case 141: return 146; 
break;
case 142: return 146; 
break;
case 143: return 146; 
break;
case 144: return 391; 
break;
case 145: return 292; 
break;
case 146: return 396; 
break;
case 147: return 396; 
break;
case 148: return 396; 
break;
case 149: return 396; 
break;
case 150: return 396; 
break;
case 151: return 396; 
break;
case 152: return 89; 
break;
case 153: return 306; 
break;
case 154: return 124; 
break;
case 155: return 383; 
break;
case 156: return 394; 
break;
case 157: return 390; 
break;
case 158: return 83; 
break;
case 159: return 85; 
break;
case 160: return 392; 
break;
case 161: return 393; 
break;
case 162: return 267; 
break;
case 163: this.begin('backtickedValue'); return 397; 
break;
case 164:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 434;
                                             }
                                             return 60;
                                           
break;
case 165: this.popState(); return 397; 
break;
case 166: this.begin('singleQuotedValue'); return 58; 
break;
case 167:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 434;
                                             }
                                             return 60;
                                           
break;
case 168: this.popState(); return 58; 
break;
case 169: this.begin('doubleQuotedValue'); return 59; 
break;
case 170:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 434;
                                             }
                                             return 60;
                                           
break;
case 171: this.popState(); return 59; 
break;
case 172: return 379; 
break;
case 173: /* To prevent console logging of unknown chars */ 
break;
case 174: 
break;
case 175: 
break;
case 176: 
break;
case 177: 
break;
case 178: 
break;
case 179:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:ALL)/i,/^(?:ALTER)/i,/^(?:AND)/i,/^(?:AS)/i,/^(?:ASC)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BOOLEAN)/i,/^(?:BY)/i,/^(?:CASCADE)/i,/^(?:CASE)/i,/^(?:CHAR)/i,/^(?:COMMENT)/i,/^(?:CREATE)/i,/^(?:CROSS)/i,/^(?:CURRENT)/i,/^(?:DATABASE)/i,/^(?:DECIMAL)/i,/^(?:DESC)/i,/^(?:DISTINCT)/i,/^(?:DIV)/i,/^(?:DOUBLE)/i,/^(?:DROP)/i,/^(?:ELSE)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:FALSE)/i,/^(?:FLOAT)/i,/^(?:FOLLOWING)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:GROUP)/i,/^(?:HAVING)/i,/^(?:IF)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JOIN)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:ON)/i,/^(?:OPTION)/i,/^(?:OR)/i,/^(?:ORDER)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PRECEDING)/i,/^(?:PURGE)/i,/^(?:RANGE)/i,/^(?:REGEXP)/i,/^(?:RIGHT)/i,/^(?:RLIKE)/i,/^(?:ROW)/i,/^(?:ROLE)/i,/^(?:ROWS)/i,/^(?:SCHEMA)/i,/^(?:SELECT)/i,/^(?:SEMI)/i,/^(?:SET)/i,/^(?:SHOW)/i,/^(?:SMALLINT)/i,/^(?:STRING)/i,/^(?:TABLE)/i,/^(?:THEN)/i,/^(?:TIMESTAMP)/i,/^(?:TINYINT)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TRUNCATE)/i,/^(?:UNBOUNDED)/i,/^(?:UNION)/i,/^(?:UPDATE)/i,/^(?:USE)/i,/^(?:VALUES)/i,/^(?:VARCHAR)/i,/^(?:VIEW)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:LOAD)/i,/^(?:SOURCE)/i,/^(?:FIELDS)/i,/^(?:EXTERNAL)/i,/^(?:STORAGE)/i,/^(?:LOCATION)/i,/^(?:FORMAT)/i,/^(?:TYPE)/i,/^(?:ENDPOINT)/i,/^(?:REGION)/i,/^(?:IDENTITY)/i,/^(?:CREDENTIAL)/i,/^(?:OVER)/i,/^(?:ROLE)/i,/^(?:AVG\s*\()/i,/^(?:CAST\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:STDDEV_POP\s*\()/i,/^(?:STDDEV_SAMP\s*\()/i,/^(?:SUM\s*\()/i,/^(?:VAR_POP\s*\()/i,/^(?:VAR_SAMP\s*\()/i,/^(?:VARIANCE\s*\()/i,/^(?:CUME_DIST\s*\()/i,/^(?:DENSE_RANK\s*\()/i,/^(?:FIRST_VALUE\s*\()/i,/^(?:LAG\s*\()/i,/^(?:LAST_VALUE\s*\()/i,/^(?:LEAD\s*\()/i,/^(?:RANK\s*\()/i,/^(?:ROW_NUMBER\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:\s+['"])/i,/^(?:[^'"\u2020\u2021]+)/i,/^(?:['"])/i,/^(?:$)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[128,129,130,131,132,133,175],"inclusive":false},"doubleQuotedValue":{"rules":[170,171,178],"inclusive":false},"singleQuotedValue":{"rules":[167,168,177],"inclusive":false},"backtickedValue":{"rules":[164,165,176],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,166,169,172,173,174,179],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,166,169,172,173,179],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default yellowbrickSyntaxParser;
