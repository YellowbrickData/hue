// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/yellowbrick/sqlParseSupport';

var yellowbrickSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[4,8,12,17,164,170,178,245,275,325,341,344,348],$V1=[2,630],$V2=[344,348],$V3=[2,631],$V4=[1,37],$V5=[1,28],$V6=[1,29],$V7=[1,19],$V8=[1,38],$V9=[1,30],$Va=[1,35],$Vb=[1,36],$Vc=[1,31],$Vd=[1,34],$Ve=[1,32],$Vf=[1,47],$Vg=[1,49],$Vh=[1,45],$Vi=[1,48],$Vj=[1,44],$Vk=[83,344,348],$Vl=[2,457],$Vm=[1,55],$Vn=[1,63],$Vo=[1,64],$Vp=[1,79],$Vq=[2,419],$Vr=[1,84],$Vs=[1,85],$Vt=[34,271],$Vu=[17,34,45,52,56,57,65,79,81,83,87,97,109,110,111,114,115,122,127,131,142,144,156,186,194,205,218,219,220,221,222,223,224,225,226,230,232,236,243,244,257,266,268,271,344,348,352,353,356,360,361,362,363,364,365,367,370,371,372,373,375,378,379,380,381,383,384,386,388,389,390,391,392,395,396,409,443],$Vv=[83,266,344,348],$Vw=[65,115,232,344,348,352,353],$Vx=[2,787],$Vy=[1,99],$Vz=[65,115,232,352,353,362],$VA=[65,115,232,310,344,348,352,353,362],$VB=[2,784],$VC=[1,104],$VD=[17,65,115,232,352,353,362],$VE=[81,87,245],$VF=[1,171],$VG=[1,172],$VH=[1,127],$VI=[1,122],$VJ=[1,133],$VK=[1,135],$VL=[1,137],$VM=[1,120],$VN=[1,169],$VO=[1,173],$VP=[1,174],$VQ=[1,138],$VR=[1,160],$VS=[1,161],$VT=[1,162],$VU=[1,163],$VV=[1,164],$VW=[1,165],$VX=[1,166],$VY=[1,167],$VZ=[1,153],$V_=[1,154],$V$=[1,147],$V01=[1,136],$V11=[1,148],$V21=[1,123],$V31=[1,125],$V41=[1,124],$V51=[1,128],$V61=[1,126],$V71=[1,168],$V81=[1,170],$V91=[56,57,65,81,83,97,98,109,114,115,232,245,257,271,273,274,275,298,299,300,301,302,303,304,305,306,307,308,310,311,352,353,355,356,359,362,366,374,393,394],$Va1=[83,87,186,266,344,348],$Vb1=[2,1106],$Vc1=[1,226],$Vd1=[1,241],$Ve1=[1,242],$Vf1=[1,230],$Vg1=[1,227],$Vh1=[1,228],$Vi1=[1,229],$Vj1=[1,236],$Vk1=[1,235],$Vl1=[1,234],$Vm1=[1,237],$Vn1=[1,232],$Vo1=[1,231],$Vp1=[1,225],$Vq1=[1,233],$Vr1=[1,244],$Vs1=[1,243],$Vt1=[34,45,56,57,65,79,83,87,97,110,111,115,131,144,186,194,205,218,219,220,221,222,223,224,225,230,232,236,243,244,257,266,268,344,348,352,353,356,360,361,362,363,372,373,378,380,381,383,384,386,390,396,443],$Vu1=[1,250],$Vv1=[1,256],$Vw1=[1,258],$Vx1=[34,45,56,57,65,79,81,83,87,97,110,111,115,131,144,186,194,205,218,219,220,221,222,223,224,225,230,232,236,243,244,257,266,268,344,348,352,353,356,360,361,362,363,372,373,378,380,381,383,384,386,390,396,443],$Vy1=[1,263],$Vz1=[34,45,52,56,57,65,79,81,83,87,97,110,111,115,131,144,186,194,205,218,219,220,221,222,223,224,225,230,232,236,243,244,257,266,268,271,344,348,352,353,356,360,361,362,363,372,373,378,380,381,383,384,386,390,396,443],$VA1=[34,45,56,57,65,79,83,87,97,110,111,115,131,144,186,194,205,218,219,220,221,222,223,224,225,230,232,236,243,244,257,266,268,322,344,348,352,353,356,360,361,362,363,372,373,378,380,381,383,384,386,390,396,443],$VB1=[45,56,57,65,83,87,115,127,142,156,194,205,218,219,220,221,222,223,224,225,226,230,232,236,266,268,344,348,352,353,362],$VC1=[45,52,83,87,97,98,111,186,194,205,218,219,220,221,222,223,224,225,226,230,236,266,268,344,348],$VD1=[83,87],$VE1=[2,48],$VF1=[1,291],$VG1=[45,344,348],$VH1=[45,127,344,348],$VI1=[45,52,79,81,127,344,348],$VJ1=[45,52],$VK1=[268,344,348],$VL1=[87,186,268,344,348],$VM1=[34,52,83,87],$VN1=[178,245],$VO1=[2,1084],$VP1=[83,194,205,230,236,266,344,348],$VQ1=[2,470],$VR1=[1,319],$VS1=[98,251,273,274],$VT1=[83,87,186,194,205,218,219,220,221,222,223,224,225,226,230,236,266,268,344,348],$VU1=[45,56,57,65,83,87,97,115,131,186,194,205,218,219,220,221,222,223,224,225,230,232,236,243,244,266,268,344,348,352,353,360,362,363,372,373,381,386,390,396,443],$VV1=[34,45,56,57,65,83,87,97,110,111,115,131,144,186,194,205,218,219,220,221,222,223,224,225,230,232,236,243,244,257,266,268,344,348,352,353,356,360,361,362,363,372,373,381,386,390,396,443],$VW1=[372,373,396],$VX1=[56,57,65,81,97,98,109,114,115,232,271,273,274,275,298,299,300,301,302,303,304,305,306,307,308,310,311,352,353,355,356,359,362,366,374,393,394],$VY1=[34,45,52,56,57,65,79,83,87,97,98,110,111,115,131,144,186,194,205,218,219,220,221,222,223,224,225,226,230,232,236,243,244,257,266,268,344,348,352,353,356,360,361,362,363,372,373,378,380,381,383,384,386,390,396,443],$VZ1=[83,205,230,236,266,344,348],$V_1=[83,87,194,205,230,236,266,268,344,348],$V$1=[1,420],$V02=[1,423],$V12=[1,421],$V22=[1,425],$V32=[1,422],$V42=[1,424],$V52=[1,427],$V62=[1,426],$V72=[83,87,194,205,218,219,220,221,222,223,224,225,226,230,236,266,268,344,348],$V82=[45,56,57,65,83,87,115,194,205,218,219,220,221,222,223,224,225,226,230,232,236,266,268,344,348,352,353,362],$V92=[34,45,56,57,65,83,87,97,110,111,115,131,144,186,194,205,218,219,220,221,222,223,224,225,230,232,236,243,244,266,268,344,348,352,353,360,362,363,372,373,381,386,390,396,443],$Va2=[45,56,57,65,83,87,115,131,186,194,205,218,219,220,221,222,223,224,225,230,232,236,243,244,266,268,344,348,352,353,360,362,372,373,381,386,390,396,443],$Vb2=[1,445],$Vc2=[83,236],$Vd2=[1,459],$Ve2=[1,485],$Vf2=[1,486],$Vg2=[1,487],$Vh2=[1,473],$Vi2=[1,474],$Vj2=[1,475],$Vk2=[1,476],$Vl2=[1,477],$Vm2=[1,478],$Vn2=[1,479],$Vo2=[1,480],$Vp2=[1,481],$Vq2=[1,482],$Vr2=[1,483],$Vs2=[1,484],$Vt2=[83,230,236,266,344,348],$Vu2=[65,81,115,232,352,353,362],$Vv2=[1,519],$Vw2=[83,87,236],$Vx2=[34,45,56,57,65,79,83,87,97,110,111,115,131,144,186,194,205,218,219,220,221,222,223,224,225,226,230,232,236,243,244,257,266,268,344,348,352,353,356,360,361,362,363,372,373,378,380,381,383,384,386,390,396,443],$Vy2=[1,527],$Vz2=[87,344,348],$VA2=[1,543],$VB2=[1,544],$VC2=[52,83,87,97,98,111],$VD2=[2,896],$VE2=[1,547],$VF2=[83,230,266,344,348],$VG2=[83,87,194,205,218,219,220,221,222,223,224,225,230,236,266,268,344,348],$VH2=[2,378],$VI2=[1,563],$VJ2=[52,83,87,97,98],$VK2=[83,87,205,230,236,266,344,348],$VL2=[363,498],$VM2=[1,619],$VN2=[87,111],$VO2=[83,360,368,393,498],$VP2=[2,1142],$VQ2=[83,87,131,230,266,344,348,386],$VR2=[83,360],$VS2=[2,1152],$VT2=[1,652],$VU2=[1,653],$VV2=[1,654],$VW2=[1,662],$VX2=[1,663],$VY2=[2,1157],$VZ2=[1,670],$V_2=[376,382],$V$2=[2,198],$V03=[2,199];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"DataDefinition_EDIT":3,"ALTER":4,"CURSOR":5,"AlterTable_EDIT":6,"AlterView_EDIT":7,"CREATE":8,"DatabaseDefinition_EDIT":9,"TableDefinition_EDIT":10,"ViewDefinition_EDIT":11,"DROP":12,"DropDatabaseStatement_EDIT":13,"DropTableStatement_EDIT":14,"DropViewStatement_EDIT":15,"LoadTableStatement_EDIT":16,"SET":17,"TruncateTableStatement_EDIT":18,"UseStatement_EDIT":19,"DataDefinition":20,"AlterTable":21,"AlterView":22,"DatabaseDefinition":23,"RoleDefinition":24,"TableDefinition":25,"ViewDefinition":26,"DropDatabaseStatement":27,"DropRoleStatement":28,"DropTableStatement":29,"DropViewStatement":30,"LoadTableStatement":31,"ALL":32,"SetOption":33,"=":34,"SetValue":35,"TruncateTableStatement":36,"UseStatement":37,"AlterTableLeftSide":38,"PartitionSpec":39,"AlterTableLeftSide_EDIT":40,"TABLE":41,"SchemaQualifiedTableIdentifier":42,"SchemaQualifiedTableIdentifier_EDIT":43,"AlterViewLeftSide":44,"AS":45,"QuerySpecification":46,"AlterViewLeftSide_EDIT":47,"QuerySpecification_EDIT":48,"VIEW":49,"OptionalComment":50,"Comment":51,"COMMENT":52,"QuotedValue":53,"OptionalComment_INVALID":54,"Comment_INVALID":55,"SINGLE_QUOTE":56,"DOUBLE_QUOTE":57,"VALUE":58,"DatabaseOrSchema":59,"OptionalIfNotExists":60,"RegularIdentifier":61,"DatabaseDefinitionOptionals":62,"OptionalIfNotExists_EDIT":63,"DatabaseDefinitionOptionals_EDIT":64,"ROLE":65,"TableDefinitionRightPart":66,"TableDefinitionRightPart_EDIT":67,"TableIdentifierAndOptionalColumnSpecification":68,"OptionalPartitionedBy":69,"OptionalAsSelectStatement":70,"TableIdentifierAndOptionalColumnSpecification_EDIT":71,"PartitionedBy_EDIT":72,"OptionalAsSelectStatement_EDIT":73,"SchemaQualifiedIdentifier":74,"OptionalColumnSpecificationsOrLike":75,"OptionalColumnSpecificationsOrLike_EDIT":76,"SchemaQualifiedIdentifier_EDIT":77,"ParenthesizedColumnSpecificationList":78,"LIKE":79,"ParenthesizedColumnSpecificationList_EDIT":80,"(":81,"ColumnSpecificationList":82,")":83,"ColumnSpecificationList_EDIT":84,"RightParenthesisOrError":85,"ColumnSpecification":86,",":87,"ColumnSpecification_EDIT":88,"ColumnIdentifier":89,"ColumnDataType":90,"OptionalColumnOptions":91,"ColumnDataType_EDIT":92,"ColumnOptions_EDIT":93,"ColumnOptions":94,"ColumnOption":95,"ColumnOption_EDIT":96,"NOT":97,"NULL":98,"PrimitiveType":99,"ArrayType":100,"MapType":101,"StructType":102,"ArrayType_INVALID":103,"MapType_INVALID":104,"StructType_INVALID":105,"ArrayType_EDIT":106,"MapType_EDIT":107,"StructType_EDIT":108,"ARRAY":109,"<":110,">":111,"AnyCursor":112,"GreaterThanOrError":113,"MAP":114,"STRUCT":115,"StructDefinitionList":116,"StructDefinitionList_EDIT":117,"StructDefinition":118,"StructDefinition_EDIT":119,"Commas":120,"RegularOrBacktickedIdentifier":121,":":122,"ColumnDataTypeList":123,"ColumnDataTypeList_EDIT":124,"ColumnDataTypeListInner_EDIT":125,"PartitionedBy":126,"PARTITION":127,"BY":128,"RangeClause":129,"RangeClause_EDIT":130,"RANGE":131,"ParenthesizedColumnList":132,"ParenthesizedPartitionValuesList":133,"ParenthesizedColumnList_EDIT":134,"ParenthesizedPartitionValuesList_EDIT":135,"PartitionValueList":136,"PartitionValueList_EDIT":137,"PartitionValue":138,"PartitionValue_EDIT":139,"ValueExpression":140,"LessThanOrEqualTo":141,"VALUES":142,"ValueExpression_EDIT":143,"COMPARISON_OPERATOR":144,"CommitLocations":145,"OptionalParenthesizedViewColumnList":146,"ParenthesizedViewColumnList_EDIT":147,"ParenthesizedViewColumnList":148,"ViewColumnList":149,"ViewColumnList_EDIT":150,"ColumnReference":151,"OptionalIfExists":152,"OptionalCascade":153,"OptionalIfExists_EDIT":154,"OptionalPurge":155,"PURGE":156,"DataManipulation":157,"InsertStatement":158,"UpdateStatement":159,"InsertValuesStatement":160,"DataManipulation_EDIT":161,"InsertValuesStatement_EDIT":162,"UpdateStatement_EDIT":163,"INSERT":164,"INTO":165,"OptionalTable":166,"InsertValuesList":167,"ParenthesizedRowValuesList":168,"InValueList":169,"LOAD":170,"LoadTableTarget":171,"CommonTableExpression":172,"SelectStatement":173,"OptionalUnions":174,"SelectStatement_EDIT":175,"OptionalUnions_EDIT":176,"CommonTableExpression_EDIT":177,"WITH":178,"WithQueries":179,"WithQueries_EDIT":180,"WithQuery":181,"WithQuery_EDIT":182,"TableSubQueryInner":183,"TableSubQueryInner_EDIT":184,"FromClause":185,"FROM":186,"TableReferenceList":187,"FromClause_EDIT":188,"TableReferenceList_EDIT":189,"TableReference":190,"TableReference_EDIT":191,"OptionalGroupByClause":192,"GroupByClause":193,"GROUP":194,"GroupByColumnList":195,"GroupByClause_EDIT":196,"GroupByColumnList_EDIT":197,"ColumnGroupingSets":198,"ColumnGroupingSets_EDIT":199,"ColumnGroupingSet_EDIT":200,"ColumnReference_EDIT":201,"GroupByColumnListPartTwo_EDIT":202,"OptionalHavingClause":203,"HavingClause":204,"HAVING":205,"HavingClause_EDIT":206,"OptionalJoins":207,"Joins":208,"Joins_INVALID":209,"JoinType":210,"TablePrimary":211,"OptionalJoinCondition":212,"Join_EDIT":213,"JoinType_EDIT":214,"TablePrimary_EDIT":215,"JoinCondition_EDIT":216,"Joins_EDIT":217,"CROSS":218,"JOIN":219,"FULL":220,"OUTER":221,"INNER":222,"LEFT":223,"SEMI":224,"RIGHT":225,"ON":226,"UsingColList":227,"OptionalLimitClause":228,"LimitClause":229,"LIMIT":230,"UnsignedNumericLiteral":231,"VARIABLE_REFERENCE":232,"LimitClause_EDIT":233,"OptionalOrderByClause":234,"OrderByClause":235,"ORDER":236,"OrderByColumnList":237,"OrderByClause_EDIT":238,"OrderByColumnList_EDIT":239,"OrderByIdentifier":240,"OrderByIdentifier_EDIT":241,"OptionalAscOrDesc":242,"ASC":243,"DESC":244,"SELECT":245,"OptionalAllOrDistinct":246,"SelectList":247,"TableExpression":248,"SelectList_EDIT":249,"TableExpression_EDIT":250,"DISTINCT":251,"OptionalSelectConditions":252,"OptionalSelectConditions_EDIT":253,"SelectSpecification":254,"SelectSpecification_EDIT":255,"OptionalCorrelationName":256,"*":257,"OptionalCorrelationName_EDIT":258,"OptionalWhereClause":259,"WhereClause_EDIT":260,"WhereClause":261,"Unions":262,"Unions_EDIT":263,"UnionClause":264,"UnionClause_EDIT":265,"UNION":266,"NewStatement":267,"WHERE":268,"SearchCondition":269,"SearchCondition_EDIT":270,".":271,"SignedInteger":272,"TRUE":273,"FALSE":274,"TRUNCATE":275,"OptionalPartitionSpec":276,"UserDefinedFunction":277,"AggregateFunction":278,"OptionalOverClause":279,"AnalyticFunction":280,"OverClause":281,"CastFunction":282,"UserDefinedFunction_EDIT":283,"AggregateFunction_EDIT":284,"OptionalOverClause_EDIT":285,"AnalyticFunction_EDIT":286,"OverClause_EDIT":287,"CastFunction_EDIT":288,"OtherAggregateFunction":289,"CountFunction":290,"SumFunction":291,"OtherAggregateFunction_EDIT":292,"CountFunction_EDIT":293,"SumFunction_EDIT":294,"OtherAggregateFunction_Type":295,"UdfArgumentList":296,"UdfArgumentList_EDIT":297,"AVG":298,"MAX":299,"MIN":300,"STDDEV_POP":301,"STDDEV_SAMP":302,"VAR_POP":303,"VAR_SAMP":304,"VARIANCE":305,"COUNT":306,"SUM":307,"ANALYTIC":308,"ArbitraryFunctionName":309,"IF":310,"CAST":311,"NonParenthesizedValueExpressionPrimary":312,"ColumnOrArbitraryFunctionRef":313,"ArbitraryFunctionRightPart":314,"UnsignedValueSpecification":315,"NonParenthesizedValueExpressionPrimary_EDIT":316,"ArbitraryFunctionRightPart_EDIT":317,"UnsignedValueSpecification_EDIT":318,"ColumnOrArbitraryFunctionRef_EDIT":319,"ArbitraryFunction":320,"ArbitraryFunction_EDIT":321,"OVER":322,"WindowExpression":323,"WindowExpression_EDIT":324,"UPDATE":325,"TargetTable":326,"SetClauseList":327,"OptionalFromJoinedTable":328,"TargetTable_EDIT":329,"SetClauseList_EDIT":330,"FromJoinedTable_EDIT":331,"TableName":332,"TableName_EDIT":333,"LocalOrSchemaQualifiedName":334,"LocalOrSchemaQualifiedName_EDIT":335,"SetClause":336,"SetClause_EDIT":337,"SetTarget":338,"UpdateSource":339,"UpdateSource_EDIT":340,"USE":341,"SqlSyntax":342,"SqlStatements":343,"EOF":344,"SqlAutocomplete":345,"SqlStatements_EDIT":346,"SqlStatement":347,";":348,"SqlStatement_EDIT":349,"SetSpecification_EDIT":350,"NonReservedKeyword":351,"OPTION":352,"REGULAR_IDENTIFIER":353,"NonStartingToken":354,"!":355,"-":356,"[":357,"]":358,"~":359,"AND":360,"ARITHMETIC_OPERATOR":361,"BACKTICK":362,"BETWEEN":363,"BIGINT":364,"BOOLEAN":365,"CASE":366,"CHAR":367,"CURRENT":368,"DATABASE":369,"DECIMAL":370,"DOUBLE":371,"ELSE":372,"END":373,"EXISTS":374,"FLOAT":375,"FOLLOWING":376,"HDFS_START_QUOTE":377,"IN":378,"INT":379,"IS":380,"OR":381,"PRECEDING":382,"REGEXP":383,"RLIKE":384,"ROW":385,"ROWS":386,"SCHEMA":387,"SMALLINT":388,"STRING":389,"THEN":390,"TIMESTAMP":391,"TINYINT":392,"UNSIGNED_INTEGER":393,"UNSIGNED_INTEGER_E":394,"VARCHAR":395,"WHEN":396,"PARTIAL_CURSOR":397,"FromOrIn":398,"SingleQuotedValue":399,"SingleQuotedValue_EDIT":400,"PARTIAL_VALUE":401,"DoubleQuotedValue":402,"DoubleQuotedValue_EDIT":403,"QuotedValue_EDIT":404,"OptionalFromDatabase":405,"DatabaseIdentifier":406,"OptionalFromDatabase_EDIT":407,"DatabaseIdentifier_EDIT":408,"CASCADE":409,"OptionalInDatabase":410,"OptionalPartitionSpec_EDIT":411,"PartitionSpec_EDIT":412,"PartitionSpecList":413,"PartitionSpecList_EDIT":414,"RangePartitionSpec":415,"RangePartitionComparisonOperator":416,"RangePartitionSpec_EDIT":417,"ConfigurationName":418,"PartialBacktickedOrAnyCursor":419,"PartialBacktickedIdentifier":420,"PartialBacktickedOrCursor":421,"PartialBacktickedOrPartialCursor":422,"OptionalParenthesizedColumnList":423,"OptionalParenthesizedColumnList_EDIT":424,"ColumnList":425,"ColumnList_EDIT":426,"ParenthesizedSimpleValueList":427,"SimpleValueList":428,"PartitionExpression":429,"PartitionExpression_EDIT":430,"RegularOrBackTickedSchemaQualifiedName":431,"RegularOrBackTickedSchemaQualifiedName_EDIT":432,"BasicIdentifierChain":433,"BasicIdentifierChain_EDIT":434,"DerivedColumnChain":435,"DerivedColumnChain_EDIT":436,"PartialBacktickedIdentifierOrPartialCursor":437,"OptionalTypeLength":438,"OptionalTypePrecision":439,"OptionalNot":440,"TableSubQuery":441,"ValueExpressionList":442,"BETWEEN_AND":443,"LikeRightPart":444,"CaseRightPart":445,"TableSubQuery_EDIT":446,"ValueExpressionInSecondPart_EDIT":447,"LikeRightPart_EDIT":448,"CaseRightPart_EDIT":449,"EndOrError":450,"ValueExpressionList_EDIT":451,"+":452,"UnsignedLiteral":453,"UnsignedLiteral_EDIT":454,"GeneralLiteral":455,"GeneralLiteral_EDIT":456,"ExactNumericLiteral":457,"ApproximateNumericLiteral":458,"TruthValue":459,"TablePrimaryOrJoinedTable":460,"TablePrimaryOrJoinedTable_EDIT":461,"JoinedTable":462,"JoinedTable_EDIT":463,"TableOrQueryName":464,"DerivedTable":465,"TableOrQueryName_EDIT":466,"DerivedTable_EDIT":467,"OptionalOnColumn":468,"OptionalOnColumn_EDIT":469,"PushQueryState":470,"PopQueryState":471,"SubQuery":472,"SubQuery_EDIT":473,"QueryExpression":474,"QueryExpression_EDIT":475,"QueryExpressionBody":476,"QueryExpressionBody_EDIT":477,"NonJoinQueryExpression":478,"NonJoinQueryExpression_EDIT":479,"NonJoinQueryTerm":480,"NonJoinQueryTerm_EDIT":481,"NonJoinQueryPrimary":482,"NonJoinQueryPrimary_EDIT":483,"SimpleTable":484,"SimpleTable_EDIT":485,"OptionalPartitionBy":486,"OptionalOrderByAndWindow":487,"PartitionBy_EDIT":488,"OptionalOrderByAndWindow_EDIT":489,"PartitionBy":490,"OptionalWindowSpec":491,"WindowSpec_EDIT":492,"WindowSpec":493,"RowsOrRange":494,"PopLexerState":495,"OptionalCurrentOrPreceding":496,"OptionalAndFollowing":497,"UNBOUNDED":498,"OptionalCurrentOrPreceding_EDIT":499,"OptionalAndFollowing_EDIT":500,"PushHdfsLexerState":501,"HdfsPath":502,"HDFS_PATH":503,"HDFS_END_QUOTE":504,"HdfsPath_EDIT":505,"IntegerOrUnbounded":506,"CaseWhenThenList":507,"CaseWhenThenList_EDIT":508,"CaseWhenThenListPartTwo":509,"CaseWhenThenListPartTwo_EDIT":510,"$accept":0,"$end":1},
terminals_: {2:"error",4:"ALTER",5:"CURSOR",8:"CREATE",12:"DROP",17:"SET",32:"ALL",34:"=",41:"TABLE",45:"AS",49:"VIEW",52:"COMMENT",56:"SINGLE_QUOTE",57:"DOUBLE_QUOTE",58:"VALUE",65:"ROLE",79:"LIKE",81:"(",83:")",87:",",97:"NOT",98:"NULL",109:"ARRAY",110:"<",111:">",114:"MAP",115:"STRUCT",122:":",127:"PARTITION",128:"BY",131:"RANGE",142:"VALUES",144:"COMPARISON_OPERATOR",156:"PURGE",164:"INSERT",165:"INTO",170:"LOAD",178:"WITH",186:"FROM",194:"GROUP",205:"HAVING",218:"CROSS",219:"JOIN",220:"FULL",221:"OUTER",222:"INNER",223:"LEFT",224:"SEMI",225:"RIGHT",226:"ON",230:"LIMIT",232:"VARIABLE_REFERENCE",236:"ORDER",243:"ASC",244:"DESC",245:"SELECT",251:"DISTINCT",257:"*",266:"UNION",268:"WHERE",271:".",273:"TRUE",274:"FALSE",275:"TRUNCATE",298:"AVG",299:"MAX",300:"MIN",301:"STDDEV_POP",302:"STDDEV_SAMP",303:"VAR_POP",304:"VAR_SAMP",305:"VARIANCE",306:"COUNT",307:"SUM",308:"ANALYTIC",310:"IF",311:"CAST",322:"OVER",325:"UPDATE",341:"USE",344:"EOF",348:";",350:"SetSpecification_EDIT",352:"OPTION",353:"REGULAR_IDENTIFIER",355:"!",356:"-",357:"[",358:"]",359:"~",360:"AND",361:"ARITHMETIC_OPERATOR",362:"BACKTICK",363:"BETWEEN",364:"BIGINT",365:"BOOLEAN",366:"CASE",367:"CHAR",368:"CURRENT",369:"DATABASE",370:"DECIMAL",371:"DOUBLE",372:"ELSE",373:"END",374:"EXISTS",375:"FLOAT",376:"FOLLOWING",377:"HDFS_START_QUOTE",378:"IN",379:"INT",380:"IS",381:"OR",382:"PRECEDING",383:"REGEXP",384:"RLIKE",385:"ROW",386:"ROWS",387:"SCHEMA",388:"SMALLINT",389:"STRING",390:"THEN",391:"TIMESTAMP",392:"TINYINT",393:"UNSIGNED_INTEGER",394:"UNSIGNED_INTEGER_E",395:"VARCHAR",396:"WHEN",397:"PARTIAL_CURSOR",401:"PARTIAL_VALUE",409:"CASCADE",443:"BETWEEN_AND",452:"+",498:"UNBOUNDED",503:"HDFS_PATH",504:"HDFS_END_QUOTE"},
productions_: [0,[3,2],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,2],[20,4],[20,1],[20,1],[21,2],[6,1],[6,2],[6,2],[6,3],[38,3],[40,3],[40,3],[22,3],[7,1],[7,2],[7,3],[7,3],[7,3],[44,3],[47,3],[47,3],[50,0],[50,1],[51,2],[54,1],[55,2],[55,2],[55,3],[55,3],[23,3],[23,5],[9,4],[9,3],[9,5],[9,4],[9,6],[62,1],[64,1],[24,3],[25,4],[10,4],[10,4],[10,3],[66,3],[67,3],[67,3],[67,3],[67,3],[68,2],[71,2],[71,2],[75,0],[75,1],[75,2],[76,1],[76,2],[76,2],[78,3],[80,3],[82,1],[82,3],[84,1],[84,3],[84,3],[84,5],[84,2],[84,4],[84,4],[84,6],[86,3],[88,3],[88,3],[88,3],[91,0],[91,1],[94,1],[94,2],[93,1],[93,2],[93,2],[93,3],[95,2],[95,1],[95,1],[96,2],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[92,1],[92,1],[92,1],[100,4],[103,3],[106,4],[106,4],[101,6],[104,3],[107,6],[107,4],[107,6],[107,5],[102,4],[105,3],[108,4],[116,1],[116,3],[117,1],[117,2],[117,3],[117,3],[117,5],[118,4],[119,5],[119,4],[119,4],[119,4],[119,3],[119,3],[123,1],[123,3],[124,1],[124,2],[124,3],[124,3],[124,5],[125,2],[125,2],[125,1],[125,1],[113,1],[113,1],[69,0],[69,1],[126,3],[72,2],[72,3],[72,3],[129,3],[130,2],[130,2],[130,3],[130,3],[130,3],[133,3],[135,3],[135,3],[136,1],[136,3],[137,1],[137,3],[137,5],[137,3],[137,5],[138,6],[138,4],[138,4],[139,2],[139,2],[139,3],[139,4],[139,4],[139,5],[139,6],[139,6],[139,3],[139,4],[139,4],[141,1],[141,1],[70,0],[70,3],[73,3],[73,3],[145,0],[26,8],[11,4],[11,9],[11,3],[11,6],[11,7],[11,8],[11,8],[11,8],[146,0],[146,1],[148,3],[147,3],[149,2],[149,4],[150,3],[150,5],[150,5],[150,7],[27,5],[13,3],[13,3],[13,4],[13,5],[13,5],[13,6],[28,3],[29,5],[14,3],[14,4],[14,5],[14,5],[14,6],[155,0],[155,1],[30,4],[15,4],[15,5],[15,3],[15,4],[15,4],[157,1],[157,1],[158,1],[161,1],[161,1],[160,6],[162,2],[162,4],[162,4],[162,5],[162,6],[167,1],[167,3],[168,3],[166,0],[166,1],[31,3],[171,1],[16,2],[16,3],[46,3],[46,5],[46,2],[48,4],[48,3],[48,3],[48,1],[48,4],[48,3],[48,2],[48,2],[172,2],[177,2],[179,1],[179,3],[180,1],[180,3],[180,3],[180,5],[181,5],[182,2],[182,5],[182,5],[185,2],[188,2],[188,2],[187,1],[187,3],[189,1],[189,3],[189,3],[189,5],[189,3],[192,0],[192,1],[193,3],[196,3],[196,3],[196,2],[198,0],[198,1],[198,3],[198,3],[199,1],[199,3],[199,3],[199,5],[199,3],[200,1],[200,1],[195,1],[195,3],[197,1],[197,2],[197,3],[197,3],[197,3],[197,4],[197,5],[202,1],[202,2],[202,1],[203,0],[203,1],[204,2],[206,2],[206,2],[207,0],[207,1],[207,1],[208,3],[208,4],[209,1],[209,2],[213,3],[213,1],[213,3],[213,3],[213,3],[217,1],[217,2],[217,2],[217,3],[210,2],[210,2],[210,3],[210,2],[210,1],[210,3],[210,2],[210,3],[210,3],[210,2],[210,3],[210,2],[210,3],[210,3],[210,2],[214,2],[214,3],[214,3],[214,2],[214,3],[214,3],[214,3],[214,3],[214,2],[214,3],[214,3],[214,3],[214,3],[214,2],[212,0],[212,2],[227,1],[227,3],[216,2],[216,2],[228,0],[228,1],[229,2],[229,4],[229,2],[229,4],[233,2],[234,0],[234,1],[235,3],[238,3],[238,2],[237,1],[237,3],[239,1],[239,2],[239,3],[239,4],[239,5],[240,2],[241,2],[241,2],[242,0],[242,1],[242,1],[173,3],[173,4],[175,3],[175,3],[175,4],[175,4],[175,4],[175,5],[175,6],[175,4],[246,0],[246,1],[246,1],[248,2],[250,2],[250,4],[250,3],[247,1],[247,3],[249,1],[249,2],[249,3],[249,3],[249,3],[249,4],[249,3],[249,3],[249,4],[249,4],[249,4],[249,5],[249,5],[254,2],[254,1],[255,2],[255,3],[255,2],[252,5],[253,5],[253,5],[253,5],[253,5],[253,5],[253,6],[253,6],[253,6],[253,6],[253,6],[174,0],[174,1],[176,1],[262,1],[262,2],[263,1],[263,2],[263,2],[263,3],[264,4],[265,3],[265,4],[265,4],[259,0],[259,1],[261,2],[260,2],[260,2],[269,1],[270,1],[33,1],[33,3],[35,1],[35,1],[35,2],[35,1],[35,1],[35,1],[35,1],[36,4],[18,2],[18,4],[18,3],[18,4],[18,5],[18,5],[18,5],[277,2],[277,2],[277,1],[283,1],[283,2],[283,1],[283,2],[283,2],[283,2],[283,1],[278,1],[278,1],[278,1],[284,1],[284,1],[284,1],[289,4],[289,5],[292,5],[292,6],[292,5],[295,1],[295,1],[295,1],[295,1],[295,1],[295,1],[295,1],[295,1],[290,4],[290,3],[290,5],[293,5],[293,6],[293,5],[291,5],[291,3],[294,5],[294,6],[294,5],[280,3],[280,4],[286,4],[286,5],[286,4],[309,1],[309,1],[309,1],[309,1],[282,6],[282,3],[288,6],[288,5],[288,4],[288,6],[288,5],[288,4],[288,6],[288,5],[288,6],[288,5],[312,2],[312,2],[312,1],[312,1],[312,1],[312,1],[316,2],[316,2],[316,1],[316,1],[316,1],[320,2],[320,2],[321,2],[321,2],[314,2],[314,3],[317,3],[317,4],[317,3],[296,1],[296,3],[297,1],[297,3],[297,3],[297,5],[297,3],[297,5],[297,4],[297,3],[297,2],[297,2],[297,4],[279,0],[279,1],[285,1],[281,2],[281,2],[287,2],[159,6],[163,6],[163,6],[163,6],[163,6],[163,7],[163,3],[163,2],[163,2],[163,2],[326,1],[329,1],[332,1],[333,1],[327,1],[327,3],[330,1],[330,3],[330,3],[330,5],[336,3],[337,3],[337,2],[337,1],[338,1],[339,1],[340,1],[328,0],[328,2],[331,2],[331,2],[37,2],[19,2],[342,3],[345,3],[345,3],[267,0],[343,0],[343,1],[343,4],[346,1],[346,4],[346,4],[346,7],[347,1],[347,1],[347,1],[349,1],[349,2],[349,1],[349,1],[349,1],[349,1],[351,1],[351,1],[351,1],[61,1],[61,1],[61,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[354,1],[120,1],[120,2],[112,1],[112,1],[398,1],[398,1],[59,1],[59,1],[399,3],[399,2],[400,2],[402,3],[402,2],[403,2],[53,1],[53,1],[404,1],[404,1],[405,0],[405,2],[407,2],[153,0],[153,1],[152,0],[152,2],[154,2],[60,0],[60,3],[63,2],[63,3],[410,0],[410,2],[410,2],[276,0],[276,1],[411,1],[39,4],[412,4],[415,5],[417,2],[417,3],[417,4],[417,5],[417,5],[417,5],[416,1],[416,1],[416,1],[416,1],[418,1],[418,1],[419,1],[419,1],[421,1],[421,1],[422,1],[422,1],[420,2],[85,1],[85,1],[423,0],[423,1],[424,1],[132,3],[134,3],[134,3],[425,1],[425,3],[426,3],[426,5],[427,3],[428,1],[428,3],[42,1],[42,3],[43,1],[43,3],[43,3],[74,1],[74,3],[77,1],[77,3],[77,3],[406,1],[408,1],[413,1],[413,3],[414,1],[414,3],[414,3],[414,5],[429,3],[430,3],[430,3],[430,3],[430,1],[121,1],[121,3],[121,2],[431,1],[431,3],[432,1],[432,3],[334,1],[334,2],[335,1],[335,2],[151,1],[151,3],[201,1],[433,1],[433,3],[434,3],[434,5],[435,1],[435,3],[436,1],[436,3],[436,5],[436,3],[89,1],[437,1],[437,1],[99,1],[99,1],[99,2],[99,2],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,2],[438,0],[438,3],[439,0],[439,3],[439,5],[140,1],[140,2],[140,2],[140,2],[140,2],[140,4],[140,4],[140,4],[140,6],[140,2],[140,3],[140,3],[140,3],[140,3],[140,3],[140,6],[140,6],[140,5],[140,5],[140,6],[140,5],[140,3],[140,3],[140,3],[140,3],[140,3],[140,2],[140,3],[140,2],[140,3],[143,1],[143,3],[143,2],[143,2],[143,2],[143,2],[143,2],[143,2],[143,2],[143,2],[143,3],[143,4],[143,5],[143,4],[143,4],[143,4],[143,6],[143,6],[143,2],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,4],[143,3],[143,6],[143,6],[143,5],[143,5],[143,6],[143,6],[143,6],[143,6],[143,5],[143,4],[143,5],[143,5],[143,5],[143,5],[143,4],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,2],[143,3],[143,2],[143,3],[143,2],[143,3],[143,2],[143,3],[143,3],[143,4],[143,3],[143,3],[143,3],[442,1],[442,3],[451,1],[451,3],[451,3],[451,5],[451,3],[451,5],[451,4],[451,3],[451,2],[451,2],[451,4],[169,1],[169,3],[313,1],[313,3],[319,1],[272,1],[272,2],[272,2],[315,1],[318,1],[453,1],[453,1],[454,1],[231,1],[231,1],[457,1],[457,2],[457,3],[457,2],[458,2],[458,3],[458,4],[455,1],[455,1],[455,1],[456,1],[456,1],[459,1],[459,1],[440,0],[440,1],[190,1],[191,1],[460,1],[460,1],[461,1],[461,1],[462,2],[463,2],[463,2],[211,2],[211,2],[215,2],[215,2],[215,2],[464,1],[466,1],[465,1],[467,1],[468,0],[468,2],[469,2],[469,2],[470,0],[471,0],[441,3],[441,4],[446,3],[446,3],[183,2],[184,3],[472,1],[473,1],[474,1],[475,1],[476,1],[477,1],[478,1],[479,1],[480,1],[481,1],[482,1],[483,1],[484,1],[485,1],[256,0],[256,1],[256,1],[256,2],[256,2],[258,1],[258,1],[258,2],[258,2],[258,2],[323,4],[324,4],[324,4],[324,5],[324,7],[486,0],[486,1],[490,3],[488,2],[488,3],[488,3],[487,0],[487,2],[489,1],[489,3],[489,2],[491,0],[491,1],[493,5],[493,5],[492,2],[492,6],[492,5],[492,5],[492,5],[492,4],[495,0],[501,0],[502,3],[505,5],[505,4],[505,3],[505,3],[505,2],[494,1],[494,1],[496,0],[496,2],[496,2],[499,2],[499,2],[497,0],[497,3],[497,3],[500,2],[500,3],[500,3],[506,1],[506,1],[447,3],[447,3],[447,3],[444,2],[444,2],[444,2],[448,2],[448,2],[448,2],[448,2],[448,2],[448,2],[445,2],[445,4],[449,2],[449,4],[449,4],[449,3],[449,4],[449,3],[449,4],[449,4],[449,3],[449,4],[449,3],[450,1],[450,1],[507,1],[507,2],[508,1],[508,2],[508,3],[508,3],[508,2],[509,4],[510,2],[510,3],[510,4],[510,4],[510,3],[510,3],[510,4],[510,2],[510,3],[510,2],[510,3],[510,3],[510,4],[510,3],[510,4],[510,4],[510,5],[510,4],[510,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

     parser.suggestKeywords(['TABLE', 'VIEW']);
   
break;
case 4:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW', 'EXTERNAL']);
   
break;
case 8:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW']);
   
break;
case 13:

     parser.suggestSetOptions();
   
break;
case 36: case 45: case 240: case 244: case 486: case 606:

     parser.addTablePrimary($$[$0]);
   
break;
case 37: case 235:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyTables = true;
     }
   
break;
case 38:

     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 41: case 286:

     parser.suggestKeywords(['AS']);
   
break;
case 43: case 202: case 211: case 287: case 642: case 1089:

     parser.suggestKeywords(['SELECT']);
   
break;
case 46: case 245:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyViews = true;
     }
   
break;
case 47:

     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 57:

     parser.addNewDatabaseLocation(_$[$0-1], [{ name: $$[$0-1] }]);
   
break;
case 58: case 68:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 60:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 61:

     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 62:

     parser.addNewDatabaseLocation(_$[$0-2], [{ name: $$[$0-2] }]);
   
break;
case 63:

     if (!$$[$0]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 74:

     var keywords = [];
     if (!$$[$0-2] && !$$[$0-1]) {
       keywords.push({ value: 'LIKE', weight: 1 });
     } else {
       if (!$$[$0-1]) {
         keywords.push({ value: 'PARTITIONED BY', weight: 12 });
       }
       keywords.push({ value: 'AS', weight: 1 });
     }

     if (keywords.length > 0) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 75:

     parser.addNewTableLocation(_$[$0-1], $$[$0-1], $$[$0]);
     this.$ = $$[$0];
   
break;
case 80:
this.$ = [];
break;
case 82: case 603: case 623: case 836:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 84: case 220: case 222: case 268: case 438: case 571: case 574: case 769: case 772: case 858: case 911: case 1086:
this.$ = $$[$0-1];
break;
case 86: case 279:
this.$ = [$$[$0]];
break;
case 87:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 92: case 94:

     parser.checkForKeywords($$[$0-1]);
   
break;
case 93: case 95:

     parser.checkForKeywords($$[$0-3]);
   
break;
case 96:

     this.$ = $$[$0-2];
     this.$.type = $$[$0-1];
     var keywords = [];
     if (!$$[$0]['comment']) {
       keywords.push('COMMENT');
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 97: case 124: case 130: case 131: case 144: case 147: case 156: case 158:

     parser.suggestKeywords(parser.getColumnDataTypeKeywords());
   
break;
case 100:
this.$ = {};
break;
case 102:

     this.$ = {};
     this.$[$$[$0]] = true;
   
break;
case 103:

     $$[$0-1][$$[$0]] = true;
   
break;
case 108: case 109:
this.$ = 'null';
break;
case 110:
this.$ = 'comment';
break;
case 111:

     parser.suggestKeywords(['NULL']);
   
break;
case 129:

     parser.suggestKeywords(parser.getTypeKeywords());
   
break;
case 143: case 146:

     parser.suggestKeywords(['COMMENT']);
   
break;
case 165: case 1124:

     parser.suggestKeywords(['BY']);
   
break;
case 166:

     parser.suggestKeywords(['RANGE']);
   
break;
case 175: case 180: case 181:

     parser.suggestKeywords(['PARTITION']);
   
break;
case 187:

     parser.suggestKeywords(['VALUE', 'VALUES']);
   
break;
case 188:

     if ($$[$0].endsWithLessThanOrEqual) {
      parser.suggestKeywords(['VALUES']);
     }
   
break;
case 189: case 192: case 195:

     parser.suggestKeywords(['<', '<=']);
   
break;
case 190: case 801: case 804:

     parser.suggestKeywords(['VALUES']);
   
break;
case 193: case 196:

     parser.suggestFunctions();
   
break;
case 204:

     parser.commitLocations();
   
break;
case 206:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.suggestDatabases({ appendDot: true });
   
break;
case 207:

     if (!$$[$0-6]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 210:

     var keywords = [{value: 'AS', weight: 1 }];
     if (!$$[$0-1]) {
       keywords.push({ value: 'COMMENT', weight: 3 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 217:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 221: case 223:
this.$ = $$[$0-3];
break;
case 227:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestDatabases();
   
break;
case 228:

     parser.suggestKeywords(['CASCADE']);
   
break;
case 230:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 232: case 491:

     parser.addTablePrimary($$[$0-1]);
   
break;
case 234:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 237:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0-1]) {
       parser.suggestKeywords(['PURGE']);
     }
   
break;
case 241:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 242:

     parser.addTablePrimary($$[$0]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 251:

     $$[$0-2].owner = 'insert';
     parser.addTablePrimary($$[$0-2]);
   
break;
case 252:

     parser.suggestKeywords(['INTO']);
   
break;
case 253:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['TABLE']);
     }
     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 255:

     $$[$0-1].owner = 'insert';
     parser.addTablePrimary($$[$0-1]);
     parser.suggestKeywords(['VALUES']);
   
break;
case 264:

    parser.suggestKeywords(['TABLE']);
  
break;
case 265:

    parser.suggestTables();
  
break;
case 267: case 440:
this.$ = $$[$0-2];
break;
case 269:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 270: case 271: case 282:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 277: case 293: case 317: case 393: case 397: case 435: case 445: case 472: case 622: case 1011: case 1013: case 1068: case 1123: case 1198:
this.$ = $$[$0];
break;
case 280:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 284:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 285:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 289:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 290: case 298:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 301:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 302: case 404:

     parser.suggestSelectListAliases();
   
break;
case 303:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 304:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 314: case 617: case 826: case 829: case 830: case 855: case 856: case 877: case 880:

     parser.suggestColumns();
   
break;
case 319: case 320: case 326: case 327: case 854: case 1082: case 1125:

     parser.valueExpressionSuggest();
   
break;
case 331:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 332:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 336:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 337:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 338:
this.$ = { joinType: $$[$0] };
break;
case 339:
this.$ = { joinType: $$[$0-1] };
break;
case 340:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 341:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 344:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 349:
this.$ = 'CROSS JOIN';
break;
case 350:
this.$ = 'FULL JOIN';
break;
case 351:
this.$ = 'FULL OUTER JOIN';
break;
case 352:
this.$ = 'INNER JOIN';
break;
case 353:
this.$ = 'JOIN';
break;
case 354:
this.$ = 'LEFT INNER JOIN';
break;
case 355:
this.$ = 'LEFT JOIN';
break;
case 356:
this.$ = 'LEFT OUTER JOIN';
break;
case 357:
this.$ = 'LEFT SEMI JOIN';
break;
case 358:
this.$ = 'OUTER JOIN';
break;
case 359: case 361:
this.$ = 'RIGHT OUTER JOIN';
break;
case 360:
this.$ = 'RIGHT JOIN';
break;
case 362:
this.$ = 'RIGHT SEMI JOIN';
break;
case 363:
this.$ = 'SEMI JOIN';
break;
case 364: case 366: case 367: case 369: case 370: case 371: case 372: case 374: case 375: case 376: case 377:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 365: case 368: case 373:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 378:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 379:
this.$ = { valueExpression: $$[$0] };
break;
case 383:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 390:

     parser.suggestKeywords([{ value: '10', weight: 10000 }, { value: '100', weight: 10000 }, { value: '1000', weight: 10000 }, { value: '5000', weight: 10000 }, { value: '10000', weight: 10000 }])
   
break;
case 394:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 395:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 399:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 400: case 401: case 402:
this.$ = { emptyOrderBy: false };
break;
case 403:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 405:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 406:
this.$ = { suggestKeywords: ['ASC', 'DESC'] };;
break;
case 409:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 410:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 411:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 412:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 413:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 414:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 415:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 416:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 417:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 418:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 422: case 423:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 424:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 425:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 426:
this.$ = [ $$[$0] ];
break;
case 427:

     $$[$0-2].push($$[$0]);
   
break;
case 429: case 430:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 432:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 433:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 434:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 436: case 437: case 439:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 441:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push($$[$0-1].function && $$[$0-1].types && $$[$0-1].types.length && $$[$0-1].types[0] === 'UDFREF' ? { name: $$[$0].alias, udfRef: $$[$0-1].function, types: $$[$0-1].types } : { name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 442:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 443:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 444:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 446:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 447:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 448:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 450:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 452:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 453:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 454:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 455:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 456:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 467:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 468:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 473:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 474:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 487:

     parser.suggestKeywords(['TABLE']);
   
break;
case 488:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 492:

     parser.addTablePrimary($$[$0-1]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 494:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 501:

     parser.suggestKeywords(['OVER']);
   
break;
case 510:

     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 511: case 529:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 512:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 513: case 527:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 514:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].activePosition);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 523:

     parser.addFunctionArgumentLocations($$[$0-3], [{
       expression: { text: $$[$0-1] },
       location: _$[$0-1]
     }]);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] }
   
break;
case 524: case 530:

     this.$ = { function: $$[$0-2], types: ['UDFREF'] }
   
break;
case 525:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] }
   
break;
case 526:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 528:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 531:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 532:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 533:

     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 534:

    this.$ = { function: $$[$0-2], types: ['UDFREF'] }
  
break;
case 535:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     this.$ = {
       function: $$[$0-3],
       expression: $$[$0-1].expressions[$$[$0-1].expressions.length - 1].expression,
       types: ['UDFREF']
     }
   
break;
case 536:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 537:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-2].expressions);
     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 538:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].activePosition);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 543:

     var expression = $$[$0-3];
     parser.extractExpressionText(expression, $$[$0-3], $$[$0-2], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-5], [{
       expression: expression,
       location: {
         first_line: _$[$0-3].first_line,
         last_line: _$[$0-1].last_line,
         first_column: _$[$0-3].first_column,
         last_column: _$[$0-1].last_column
       }
     }]);
     this.$ = { types: [ $$[$0-1].toUpperCase() ] }
   
break;
case 544: case 549: case 550: case 1017:
this.$ = { types: [ 'T' ] };
break;
case 545:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 546: case 547:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 548:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 551:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 552:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 553: case 554:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 555:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     if ($$[$0-1].lastLoc && $$[$0-1].lastLoc.location) {
       $$[$0-1].lastLoc.type = 'function';
       $$[$0-1].lastLoc.function = fn;
       $$[$0-1].lastLoc.location = {
         first_line: $$[$0-1].lastLoc.location.first_line,
         last_line: $$[$0-1].lastLoc.location.last_line,
         first_column: $$[$0-1].lastLoc.location.first_column,
         last_column: $$[$0-1].lastLoc.location.last_column - 1
       }
       if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
          $$[$0-1].firstLoc.type = 'database';
       } else {
         delete $$[$0-1].lastLoc.identifierChain;
       }
     }
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: fn, expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: fn, types: ['UDFREF'] }
     }
   
break;
case 556:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expressions && $$[$0].expressions.length) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
    } else {
      this.$ = { function: $$[$0-1], types: ['UDFREF'] }
    }
  
break;
case 559:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 560:
this.$ = { types: [ 'NULL' ], text: $$[$0] };
break;
case 561:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].activePosition);
     }
     this.$ = { function: fn, types: ['UDFREF'] };
   
break;
case 562: case 568: case 569:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].activePosition);
     }
     this.$ = { function: $$[$0-1], types: ['UDFREF'] };
   
break;
case 565:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 566: case 567:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: $$[$0-1], types: ['UDFREF'] }
     }
   
break;
case 572:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }]
     }
   
break;
case 573:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = $$[$0-3];
   
break;
case 575: case 577:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0], location: _$[$0] }]
     }
   
break;
case 576: case 578:

     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: $$[$0], location: _$[$0] }])
     }
   
break;
case 579:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0-2], location: _$[$0-2] }].concat($$[$0].expressions)
     }
   
break;
case 580:

     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: $$[$0-2], location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 581:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: { text: '' }, location: _$[$0] }])
     }
   
break;
case 582:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: { text: '' }, location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 583:

     parser.suggestValueExpressionKeywords($$[$0-3].expressions[$$[$0-3].expressions.length - 1].expression);
     this.$ = {
       activePosition: $$[$0-3].activePosition,
       expressions: $$[$0-3].expressions.concat($$[$0].expressions)
     }
   
break;
case 584:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 585:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 586:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 587:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-3] }, { expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 599:

     parser.suggestKeywords([ 'WHERE' ]);
   
break;
case 600:

     parser.suggestKeywords([ 'SET' ]);
   
break;
case 616:

     parser.suggestKeywords([ '=' ]);
   
break;
case 625:

     if (! parser.yy.cursorFound) {
       parser.yy.result.useDatabase = $$[$0];
     }
   
break;
case 626: case 845:

     parser.suggestDatabases();
   
break;
case 628: case 629:

     return parser.yy.result;
   
break;
case 630:

     parser.prepareNewStatement();
   
break;
case 632: case 634: case 636:

     parser.addStatementLocation(_$[$0]);
   
break;
case 635: case 637:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 641:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 770: case 773: case 859:
this.$ = '';
break;
case 785: case 788:

     parser.yy.correlatedSubQuery = false;
   
break;
case 786: case 790:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 789:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 800: case 802: case 803: case 805:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 834: case 860:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 835: case 861:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 837: case 842:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 838: case 863:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 839:
this.$ = [{ name: $$[$0] }];
break;
case 840:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 841:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 862:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 865:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 868:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 869: case 1034:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 871:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 872:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 873:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 874:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 875:
this.$ = [ $$[$0].identifier ];
break;
case 876:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 878:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 879:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 881:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 902: case 903:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 904: case 929:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 905:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 906: case 907: case 908:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 909:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 910:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 912: case 913: case 914: case 915:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 916: case 917: case 918: case 919: case 949: case 1007: case 1008:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 920:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 921:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 922: case 923:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 924: case 925: case 926:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 927:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 928:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 930:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 932:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 933: case 935:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 934:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 936:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 937:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 938:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 939:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 940:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 941:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 942:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 943:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 944: case 945: case 946:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 947:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 948:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 950:

     this.$ = $$[$0-1];
   
break;
case 951:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 952:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 953: case 954: case 955:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 956: case 957: case 958: case 959:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0]);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 960: case 962:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 961:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 963:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 964: case 965: case 966: case 967:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 968:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 969:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 970: case 971:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 972: case 973:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 974:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 975:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 976:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 977:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 978: case 984:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 979:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 980:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 981:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 982:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 983:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 985:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 986: case 988: case 990: case 992:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 987: case 991:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 989: case 993:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 994: case 995:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 996: case 997: case 998:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 999: case 1000: case 1001:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1002: case 1003: case 1004:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1005:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1006:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1009:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1010:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1012:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1014:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1015:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 1016:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1018: case 1020:

     $$[$0].position = 1;
   
break;
case 1019:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 1021:

     $$[$0-2].position += 1;
   
break;
case 1022:

     $$[$0-2].position = 1;
   
break;
case 1023:

     $$[$0-4].position += 1;
   
break;
case 1024:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 1025:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 1026:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 1027: case 1028:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 1029: case 1030:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 1033:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 1040:

     parser.suggestValues($$[$0]);
   
break;
case 1041:
this.$ = { types: [ 'NUMBER' ], text: $$[$0] };
break;
case 1047: case 1049: case 1050:
this.$ = $$[$0-1] + $$[$0];
break;
case 1048: case 1051:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1052:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1053:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: "'" + $$[$0] + "'" }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 1054:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: '"' + $$[$0] + '"' }
     } else {
       this.$ = { types: [ 'STRING' ], text: '"' + $$[$0] + '"' }
     }
   
break;
case 1055:
this.$ = { types: [ 'BOOLEAN' ], text: $$[$0] };
break;
case 1056:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1057:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1064:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 1071:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1072:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1073:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 1074:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 1084:

     parser.pushQueryState();
   
break;
case 1085:

     parser.popQueryState();
   
break;
case 1087:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 1090:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 1107: case 1108: case 1109: case 1110:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 1117: case 1118:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 1119:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 1120:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 1129:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 1130:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 1136:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 1137:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 1142:

    lexer.popState();
  
break;
case 1143:

    lexer.begin('hdfs');
  
break;
case 1145:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 1146:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 1147:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 1148:

     parser.suggestHdfs({ path: '' });
   
break;
case 1149:

      parser.suggestHdfs({ path: '' });
    
break;
case 1155:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 1156: case 1161:

     parser.suggestKeywords(['ROW']);
   
break;
case 1160:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 1162:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 1166:
this.$ = { inValueEdit: true };
break;
case 1167:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 1168: case 1169: case 1170:

     this.$ = { suggestKeywords: ['NOT'] }
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1174: case 1175: case 1176:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 1177:

     this.$ = parser.findCaseType($$[$0-1])
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1178:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1179:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 1180:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1181:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1182:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 1183:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1184:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 1185:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 1186:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1187:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1188:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 1189:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 1192:

     this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] }
     parser.extractExpressionText(this.$, $$[$0]);
   
break;
case 1193:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1197:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 1199:

     this.$ = $$[$0]
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1200:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 1201:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1202:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1203: case 1204:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 1205:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1206:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 1207:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1208:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 1209: case 1211:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1210:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1212:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 1213:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1214:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1215: case 1216: case 1217: case 1218:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
}
},
table: [o($V0,$V1,{342:1,267:2}),{1:[3]},o($V2,$V3,{343:3,347:4,20:5,157:6,46:7,21:8,22:9,23:10,24:11,25:12,26:13,27:14,28:15,29:16,30:17,31:18,36:20,37:21,158:22,159:23,172:24,173:25,38:26,44:27,160:33,4:$V4,8:$V5,12:$V6,17:$V7,164:$V8,170:$V9,178:$Va,245:$Vb,275:$Vc,325:$Vd,341:$Ve}),{344:[1,39],348:[1,40]},o($V2,[2,632]),o($V2,[2,638]),o($V2,[2,639]),o($V2,[2,640]),o($V2,[2,16]),o($V2,[2,17]),o($V2,[2,18]),o($V2,[2,19]),o($V2,[2,20]),o($V2,[2,21]),o($V2,[2,22]),o($V2,[2,23]),o($V2,[2,24]),o($V2,[2,25]),o($V2,[2,26]),{32:[1,41],33:42,61:43,65:$Vf,115:$Vg,232:$Vh,351:46,352:$Vi,353:$Vj},o($V2,[2,29]),o($V2,[2,30]),o($V2,[2,246]),o($V2,[2,247]),{81:[1,51],173:50,245:$Vb},o($Vk,$Vl,{174:52,262:53,264:54,266:$Vm}),{39:56,127:[1,57]},{45:[1,58]},{41:[1,61],49:[1,62],59:59,65:[1,60],369:$Vn,387:$Vo},{41:[1,67],49:[1,68],59:65,65:[1,66],369:$Vn,387:$Vo},{41:[1,70],171:69},{41:[1,71]},{61:72,65:$Vf,115:$Vg,232:$Vh,351:46,352:$Vi,353:$Vj},o($V2,[2,248]),{61:78,65:$Vf,115:$Vg,121:77,232:$Vh,326:73,332:74,334:75,351:46,352:$Vi,353:$Vj,362:$Vp,431:76},{61:78,65:$Vf,115:$Vg,121:82,179:80,181:81,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},o([56,57,65,81,97,98,109,114,115,232,257,271,273,274,275,298,299,300,301,302,303,304,305,306,307,308,310,311,352,353,355,356,359,362,366,374,393,394],$Vq,{246:83,32:$Vr,251:$Vs}),{41:[1,86],49:[1,87]},{165:[1,88]},{1:[2,627]},o($V0,$V1,{267:89}),o($V2,[2,27]),{34:[1,90],271:[1,91]},o($Vt,[2,477]),o($Vu,[2,650]),o($Vu,[2,651]),o($Vu,[2,652]),o($Vu,[2,647]),o($Vu,[2,648]),o($Vu,[2,649]),o($Vk,$Vl,{262:53,264:54,174:92,266:$Vm}),{46:93,172:24,173:25,178:$Va,245:$Vb},o($Vk,[2,268]),o($Vk,[2,458],{264:94,266:$Vm}),o($Vv,[2,460]),o([32,245,251],$V1,{267:95}),o($V2,[2,31]),{81:[1,96]},{46:97,172:24,173:25,178:$Va,245:$Vb},o($Vw,$Vx,{60:98,310:$Vy}),{61:100,65:$Vf,115:$Vg,232:$Vh,351:46,352:$Vi,353:$Vj},o($Vz,$Vx,{60:101,310:$Vy}),o($Vz,$Vx,{60:102,310:$Vy}),o($VA,[2,767]),o($VA,[2,768]),o($Vz,$VB,{152:103,310:$VC}),{61:105,65:$Vf,115:$Vg,232:$Vh,351:46,352:$Vi,353:$Vj},o($Vz,$VB,{152:106,310:$VC}),o($Vz,$VB,{152:107,310:$VC}),{61:78,65:$Vf,115:$Vg,121:108,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},o($Vz,[2,263]),o($Vz,$VB,{152:109,310:$VC}),o($V2,[2,625]),{17:[1,110]},{17:[2,604]},{17:[2,606]},{17:[2,864],61:78,65:$Vf,115:$Vg,121:111,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},o($VD,[2,860],{271:[1,112]}),o($Vu,[2,857]),{58:[1,113],362:[1,114]},o([81,245],[2,277],{87:[1,115]}),o($VE,[2,279]),{45:[1,116]},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:119,231:149,232:$Vh,247:117,254:118,257:$VM,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($V91,[2,420]),o($V91,[2,421]),{42:175,61:78,65:$Vf,115:$Vg,121:176,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},{42:177,61:78,65:$Vf,115:$Vg,121:176,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},o($Vz,[2,260],{166:178,41:[1,179]}),o($V2,$V3,{347:4,20:5,157:6,46:7,21:8,22:9,23:10,24:11,25:12,26:13,27:14,28:15,29:16,30:17,31:18,36:20,37:21,158:22,159:23,172:24,173:25,38:26,44:27,160:33,343:180,4:$V4,8:$V5,12:$V6,17:$V7,164:$V8,170:$V9,178:$Va,245:$Vb,275:$Vc,325:$Vd,341:$Ve}),{35:181,53:184,56:$VF,57:$VG,61:182,65:$Vf,98:[1,187],115:$Vg,231:188,232:$Vh,271:$VN,272:183,273:[1,185],274:[1,186],351:46,352:$Vi,353:$Vj,356:[1,189],393:$V71,394:$V81,399:191,402:192,452:[1,190],457:155,458:156},{61:193,65:$Vf,115:$Vg,232:$Vh,351:46,352:$Vi,353:$Vj},o($Vk,[2,266]),{83:[1,194]},o($Vv,[2,461]),{32:$Vr,245:$Vq,246:195,251:$Vs},{61:78,65:$Vf,89:198,115:$Vg,121:151,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp,413:196,429:197},o($V2,[2,39]),o($V2,[2,56],{351:46,61:199,65:$Vf,115:$Vg,232:$Vh,352:$Vi,353:$Vj}),{97:[1,200]},o($V2,[2,65]),{61:78,65:$Vf,66:201,68:202,74:203,115:$Vg,121:204,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},{61:78,65:$Vf,74:205,115:$Vg,121:204,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},{61:78,65:$Vf,115:$Vg,121:206,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},{374:[1,207]},o($V2,[2,231]),{42:208,61:78,65:$Vf,115:$Vg,121:176,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},{42:209,61:78,65:$Vf,115:$Vg,121:176,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},o($V2,[2,262]),{42:210,61:78,65:$Vf,115:$Vg,121:176,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},{61:78,65:$Vf,89:143,115:$Vg,121:151,151:214,232:$Vh,327:211,336:212,338:213,351:46,352:$Vi,353:$Vj,362:$Vp,433:215},{17:[2,865]},{61:78,65:$Vf,115:$Vg,121:216,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},{362:[1,217]},o($Vu,[2,859]),{61:78,65:$Vf,115:$Vg,121:82,181:218,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},{81:[1,219]},o($Vv,[2,409],{248:220,185:222,87:[1,221],186:[1,223]}),o($Va1,[2,426]),o($Va1,$Vb1,{351:46,61:78,399:191,402:192,256:224,444:238,121:239,53:240,34:$Vc1,45:$Vd1,56:$VF,57:$VG,65:$Vf,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,115:$Vg,144:$Vi1,232:$Vh,257:$Vj1,352:$Vi,353:$Vj,356:$Vk1,360:$Vl1,361:$Vm1,362:$Vp,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1}),o($Va1,[2,442]),o($Vt1,[2,901]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:245,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:246,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:247,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:248,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{81:$Vu1,441:249},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:251,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:253,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,396:$Vv1,399:157,402:158,433:134,445:252,453:142,455:150,457:155,458:156,459:159,507:254,509:255},o($Vt1,[2,559],{314:257,81:$Vw1}),{81:$Vw1,314:259},o($Vt1,[2,557]),o($Vt1,[2,558]),o($Vt1,[2,560]),o($Vx1,[2,1033],{271:[1,260]}),{81:[2,539]},{81:[2,540]},{81:[2,541]},{81:[2,542]},o($Vt1,[2,588],{279:261,281:262,322:$Vy1}),{281:264,322:$Vy1},o($Vt1,[2,496]),o($Vt1,[2,1039]),o($Vz1,[2,871]),o($VA1,[2,504]),o($VA1,[2,505]),o($VA1,[2,506]),{81:[1,265]},{81:[1,266]},o($Vt1,[2,1041]),o($Vt1,[2,1042]),o([34,45,52,56,57,65,79,81,83,87,97,109,110,111,114,115,131,144,186,194,205,218,219,220,221,222,223,224,225,230,232,236,243,244,257,266,268,271,344,348,352,353,356,360,361,362,363,364,365,367,370,371,372,373,375,378,379,380,381,383,384,386,388,389,390,391,392,395,396,443],[2,881]),{81:[1,267]},{81:[1,268]},{81:[1,269]},o($Vt1,[2,1044]),o($Vt1,[2,1045]),o($Vt1,[2,1053]),o($Vt1,[2,1054]),o($Vt1,[2,1055]),{81:[2,515]},{81:[2,516]},{81:[2,517]},{81:[2,518]},{81:[2,519]},{81:[2,520]},{81:[2,521]},{81:[2,522]},o($Vt1,[2,1046],{271:[1,270]}),{393:[1,271],394:[1,272]},{393:[1,273]},{56:[1,275],58:[1,274]},{57:[1,277],58:[1,276]},o($Vt1,[2,1058]),o($Vt1,[2,1059]),{127:[2,36]},o($VB1,[2,834],{271:[1,278]}),{45:[2,45]},{42:279,61:78,65:$Vf,115:$Vg,121:176,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},o($Vz,[2,261]),o($V2,[2,633]),o($V2,[2,28]),o($V2,[2,479]),o($V2,[2,480],{351:46,61:280,65:$Vf,115:$Vg,232:$Vh,352:$Vi,353:$Vj}),o($V2,[2,482]),o($V2,[2,483]),o($V2,[2,484]),o($V2,[2,485]),o($Vw,[2,1036]),{231:281,271:$VN,393:$V71,394:$V81,457:155,458:156},{231:282,271:$VN,393:$V71,394:$V81,457:155,458:156},o($VC1,[2,775]),o($VC1,[2,776]),o($Vt,[2,478]),o($Vk,$Vl,{262:53,264:54,174:283,266:$Vm}),{173:284,245:$Vb},{83:[1,285],87:[1,286]},o($VD1,[2,846]),{34:[1,287]},o($V2,$VE1,{62:288,50:289,51:290,52:$VF1}),{374:[1,292]},o($V2,[2,66]),o($VG1,[2,162],{69:293,126:294,127:[1,295]}),o($VH1,[2,78],{75:296,78:297,79:[1,298],81:[1,299]}),o($VI1,[2,839],{271:[1,300]}),o($VJ1,[2,214],{146:301,148:302,81:[1,303]}),o($V2,[2,782],{153:304,409:[1,305]}),o($Vz,[2,785]),o($V2,[2,238],{155:306,156:[1,307]}),o($V2,[2,240]),o($V2,[2,486]),o($VK1,[2,621],{328:308,87:[1,309],186:[1,310]}),o($VL1,[2,608]),{34:[1,311]},{34:[2,618]},o($VM1,[2,868],{271:[1,312]}),o($VD,[2,861]),o($Vu,[2,858]),o($VE,[2,280]),o($VN1,$VO1,{183:313,470:314}),o($Vv,[2,410]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:119,231:149,232:$Vh,254:315,257:$VM,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($VP1,$VQ1,{252:316,259:317,261:318,268:$VR1}),{42:327,61:78,65:$Vf,81:$Vu1,115:$Vg,121:176,187:320,190:321,211:323,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp,441:328,460:322,462:324,464:325,465:326},o($Va1,[2,441]),o($VS1,[2,1060],{440:329,97:[1,330]}),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:331,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:332,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:333,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:334,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{79:$Ve1,363:[1,336],378:[1,335],383:$Vr1,384:$Vs1,444:337},{81:[1,338]},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:339,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:340,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:341,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:342,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:343,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:344,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($Vt1,[2,927]),o($VT1,[2,1107]),o($VT1,[2,1108]),{53:346,56:$VF,57:$VG,61:78,65:$Vf,115:$Vg,121:345,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp,399:191,402:192},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:347,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:348,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:349,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($VU1,[2,902],{444:238,34:$Vc1,79:$Ve1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,361:$Vm1,378:$Vo1,380:$Vp1,383:$Vr1,384:$Vs1}),o($VU1,[2,903],{444:238,34:$Vc1,79:$Ve1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,361:$Vm1,378:$Vo1,380:$Vp1,383:$Vr1,384:$Vs1}),o($VU1,[2,904],{444:238,34:$Vc1,79:$Ve1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,361:$Vm1,378:$Vo1,380:$Vp1,383:$Vr1,384:$Vs1}),o($VV1,[2,905],{444:238}),o($Vt1,[2,910]),o($VN1,$VO1,{470:314,441:328,183:350,465:351,81:$Vu1}),{34:$Vc1,79:$Ve1,83:[1,352],97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1,444:238},o($Vt1,[2,929]),{34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1,396:$Vv1,444:238,445:353,507:254,509:255},{372:[1,355],373:[1,354],396:$Vv1,509:356},o($VW1,[2,1192]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:357,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($Vt1,[2,555]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,83:[1,358],89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:360,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,296:359,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($Vt1,[2,556]),{61:78,65:$Vf,89:362,115:$Vg,121:151,232:$Vh,257:[1,361],351:46,352:$Vi,353:$Vj,362:$Vp},o($Vt1,[2,494]),o($Vt1,[2,589]),{61:78,65:$Vf,81:[1,365],115:$Vg,121:363,232:$Vh,323:364,351:46,352:$Vi,353:$Vj,362:$Vp},o($Vt1,[2,495]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,83:[1,366],89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:360,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,296:367,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,83:[1,369],89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:368,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o([56,57,65,81,83,97,98,109,114,115,232,271,273,274,275,298,299,300,301,302,303,304,305,306,307,308,310,311,352,353,355,356,359,362,366,374,393,394],$Vq,{246:370,32:$Vr,251:$Vs}),o($VX1,$Vq,{246:373,32:$Vr,83:[1,372],251:$Vs,257:[1,371]}),o($VX1,$Vq,{246:374,32:$Vr,83:[1,375],251:$Vs}),o($Vt1,[2,1047],{393:[1,376],394:[1,377]}),o($Vt1,[2,1049]),{393:[1,378]},o($Vt1,[2,1050]),{56:[1,379]},o($VY1,[2,770]),{57:[1,380]},o($VY1,[2,773]),{61:78,65:$Vf,115:$Vg,121:381,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},{142:[1,382]},o($V2,[2,481]),o($Vw,[2,1037]),o($Vw,[2,1038]),o($Vk,[2,267]),o($Vv,[2,466]),o($V2,[2,797]),{61:78,65:$Vf,89:198,115:$Vg,121:151,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp,429:383},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:384,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($V2,[2,57]),o($V2,[2,63]),o([45,83,87,111,344,348],[2,49]),{53:385,56:$VF,57:$VG,399:191,402:192},o([65,115,232,344,348,352,353,362],[2,788]),o($V2,[2,200],{70:386,45:[1,387]}),o($VG1,[2,163]),{128:[1,388]},o($VH1,[2,75]),o($VH1,[2,79]),{42:389,61:78,65:$Vf,115:$Vg,121:176,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},{61:78,65:$Vf,82:390,86:391,89:392,115:$Vg,121:151,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},{61:78,65:$Vf,115:$Vg,121:393,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},{45:$VE1,50:394,51:290,52:$VF1},o($VJ1,[2,215]),{61:78,65:$Vf,89:143,115:$Vg,121:151,149:395,151:396,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp,433:215},o($V2,[2,224]),o($V2,[2,783]),o($V2,[2,232]),o($V2,[2,239]),o($V2,$VQ1,{261:318,259:397,268:$VR1}),{61:78,65:$Vf,89:143,115:$Vg,121:151,151:214,232:$Vh,336:398,338:213,351:46,352:$Vi,353:$Vj,362:$Vp,433:215},{42:327,61:78,65:$Vf,81:$Vu1,115:$Vg,121:176,190:399,211:323,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp,441:328,460:322,462:324,464:325,465:326},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:401,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,339:400,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{61:78,65:$Vf,89:362,115:$Vg,121:151,232:$Vh,257:[1,402],351:46,352:$Vi,353:$Vj,362:$Vp},{83:[1,403]},{46:411,172:24,173:25,178:$Va,245:$Vb,472:404,474:405,476:406,478:407,480:408,482:409,484:410},o($Va1,[2,427]),o($Vv,[2,422]),o($VZ1,[2,299],{192:412,193:413,194:[1,414]}),o($VP1,[2,471]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:416,231:149,232:$Vh,269:415,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o([83,194,205,230,236,266,268,344,348],[2,289],{87:[1,417]}),o($V_1,[2,292]),o($V_1,[2,1062]),o($V_1,[2,1064],{208:418,210:419,218:$V$1,219:$V02,220:$V12,221:$V22,222:$V32,223:$V42,224:$V52,225:$V62}),o($V_1,[2,1065]),o($V72,$Vb1,{351:46,61:78,399:191,402:192,121:239,53:240,256:428,45:$Vd1,56:$VF,57:$VG,65:$Vf,115:$Vg,232:$Vh,352:$Vi,353:$Vj,362:$Vp}),o($V72,$Vb1,{351:46,61:78,399:191,402:192,121:239,53:240,256:429,45:$Vd1,56:$VF,57:$VG,65:$Vf,115:$Vg,232:$Vh,352:$Vi,353:$Vj,362:$Vp}),o($V82,[2,1076]),o($V82,[2,1078]),{98:[1,430],251:[1,433],273:[1,431],274:[1,432]},o($VS1,[2,1061]),o($V92,[2,912],{444:238,79:$Ve1,257:$Vj1,356:$Vk1,361:$Vm1,378:$Vo1,380:$Vp1,383:$Vr1,384:$Vs1}),o($V92,[2,913],{444:238,79:$Ve1,257:$Vj1,356:$Vk1,361:$Vm1,378:$Vo1,380:$Vp1,383:$Vr1,384:$Vs1}),o($V92,[2,914],{444:238,79:$Ve1,257:$Vj1,356:$Vk1,361:$Vm1,378:$Vo1,380:$Vp1,383:$Vr1,384:$Vs1}),o($V92,[2,915],{444:238,79:$Ve1,257:$Vj1,356:$Vk1,361:$Vm1,378:$Vo1,380:$Vp1,383:$Vr1,384:$Vs1}),{81:[1,434]},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:435,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($Vt1,[2,928]),o($VN1,$VO1,{351:46,61:78,312:121,313:129,309:130,277:131,315:132,433:134,278:139,280:140,282:141,453:142,89:143,289:144,290:145,291:146,231:149,455:150,121:151,295:152,457:155,458:156,399:157,402:158,459:159,470:314,183:436,442:437,140:438,56:$VF,57:$VG,65:$Vf,81:$VH,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,310:$V01,311:$V11,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81}),{34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1,443:[1,439],444:238},o($Va2,[2,922],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,383:$Vr1,384:$Vs1}),o($Va2,[2,923],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,383:$Vr1,384:$Vs1}),o($VV1,[2,924],{444:238,79:$Ve1,378:$Vo1,380:$Vp1,383:$Vr1,384:$Vs1}),o($VV1,[2,925],{444:238,79:$Ve1,378:$Vo1,380:$Vp1,383:$Vr1,384:$Vs1}),o($VV1,[2,926],{444:238,79:$Ve1,378:$Vo1,380:$Vp1,383:$Vr1,384:$Vs1}),o($VT1,[2,1109]),o($VT1,[2,1110]),o($VV1,[2,1168],{444:238}),o($VV1,[2,1169],{444:238}),o($VV1,[2,1170],{444:238}),{83:[1,440]},{45:$Vd1,53:240,56:$VF,57:$VG,61:78,65:$Vf,83:$Vb1,115:$Vg,121:239,232:$Vh,256:441,351:46,352:$Vi,353:$Vj,362:$Vp,399:191,402:192},o($Vt1,[2,911]),o($Vt1,[2,930]),o($Vt1,[2,1177]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:442,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($VW1,[2,1193]),{34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1,390:[1,443],444:238},o($Vt1,[2,570]),{83:[1,444],87:$Vb2},o($VD1,[2,575],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1}),o($Vx1,[2,1034]),o($Vz1,[2,872]),o($Vt1,[2,591]),o($Vt1,[2,592]),o($Vc2,[2,1121],{486:446,490:447,127:[1,448]}),{322:[2,534]},{83:[1,449],87:$Vb2},{34:$Vc1,45:[1,450],79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1,444:238},o($Vt1,[2,544]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,83:[1,451],89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:360,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,296:452,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{83:[1,453]},o($VA1,[2,524]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:360,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,296:454,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:455,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($VA1,[2,530]),o($Vt1,[2,1048]),{393:[1,456]},o($Vt1,[2,1051]),o($VY1,[2,769]),o($VY1,[2,772]),o($VB1,[2,835]),{81:$Vd2,167:457,168:458},o($VD1,[2,847]),o($VD1,[2,852],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1}),o([45,52,83,87,97,98,111,344,348],[2,50]),o($V2,[2,70]),o($VN1,[2,204],{145:460}),{129:461,131:[1,462]},o($VH1,[2,80]),{83:[1,463],87:[1,464]},o($VD1,[2,86]),{90:465,99:466,100:467,101:468,102:469,103:470,104:471,105:472,109:$Ve2,114:$Vf2,115:$Vg2,364:$Vh2,365:$Vi2,367:$Vj2,370:$Vk2,371:$Vl2,375:$Vm2,379:$Vn2,388:$Vo2,389:$Vp2,391:$Vq2,392:$Vr2,395:$Vs2},o($VI1,[2,840]),{45:[1,488]},{83:[1,489],87:[1,490]},o($VD1,$VE1,{51:290,50:491,52:$VF1}),o($V2,[2,594]),o($VL1,[2,609]),o($VK1,[2,622]),o($VL1,[2,614]),o($VL1,[2,619],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1}),o($VM1,[2,869]),o($VE,[2,285]),{83:[2,1090]},{83:[2,1092]},{83:[2,1094]},{83:[2,1096]},{83:[2,1098]},{83:[2,1100]},{83:[2,1102]},{83:[2,1104]},o($Vt2,[2,328],{203:492,204:493,205:[1,494]}),o($VZ1,[2,300]),{128:[1,495]},o($VP1,[2,472]),o($VP1,[2,475],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1}),{42:327,61:78,65:$Vf,81:$Vu1,115:$Vg,121:176,190:496,211:323,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp,441:328,460:322,462:324,464:325,465:326},o($V_1,[2,1068],{210:497,218:$V$1,219:$V02,220:$V12,221:$V22,222:$V32,223:$V42,224:$V52,225:$V62}),{42:327,61:78,65:$Vf,81:$Vu1,115:$Vg,121:176,211:498,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp,441:328,464:325,465:326},{219:[1,499]},{219:[1,500],221:[1,501]},{219:[1,502]},o($Vu2,[2,353]),{219:[1,504],221:[1,505],222:[1,503],224:[1,506]},{219:[1,507]},{219:[1,509],221:[1,510],222:[1,508],224:[1,511]},{219:[1,512]},o($V72,[2,1071]),o($V72,[2,1072]),o($Vt1,[2,906]),o($Vt1,[2,907]),o($Vt1,[2,908]),{186:[1,513]},o($VN1,$VO1,{351:46,61:78,312:121,313:129,309:130,277:131,315:132,433:134,278:139,280:140,282:141,453:142,89:143,289:144,290:145,291:146,231:149,455:150,121:151,295:152,457:155,458:156,399:157,402:158,459:159,470:314,140:438,183:514,442:515,56:$VF,57:$VG,65:$Vf,81:$VH,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,310:$V01,311:$V11,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81}),{34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1,443:[1,516],444:238},{83:[1,517]},{83:[1,518],87:$Vv2},o($Vw2,[2,1018],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1}),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:520,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($Vx2,[2,1086]),{83:[1,521]},{34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,373:[1,522],378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1,444:238},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:523,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($Vt1,[2,571]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:524,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{83:[2,1127],235:526,236:$Vy2,487:525},o($Vc2,[2,1122]),{128:[1,528]},{322:[2,535]},{99:529,364:$Vh2,365:$Vi2,367:$Vj2,370:$Vk2,371:$Vl2,375:$Vm2,379:$Vn2,388:$Vo2,389:$Vp2,391:$Vq2,392:$Vr2,395:$Vs2},o($VA1,[2,510]),{83:[1,530],87:$Vb2},o($VA1,[2,523]),{83:[1,531],87:$Vb2},{34:$Vc1,79:$Ve1,83:[1,532],97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1,444:238},o($Vt1,[2,1052]),o($V2,[2,251],{87:[1,533]}),o($Vz2,[2,257]),{56:$VF,57:$VG,61:78,65:$Vf,89:143,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,169:534,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:535,313:129,315:132,351:46,352:$Vi,353:$Vj,362:$Vp,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{46:536,172:24,173:25,178:$Va,245:$Vb},o($VG1,[2,164]),{81:[1,538],132:537},o($VH1,[2,84]),{61:78,65:$Vf,86:539,89:392,115:$Vg,121:151,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},o($VD1,[2,100],{91:540,94:541,95:542,51:545,52:$VF1,97:$VA2,98:$VB2}),o($VC2,[2,112]),o($VC2,[2,113]),o($VC2,[2,114]),o($VC2,[2,115]),o($VC2,[2,116]),o($VC2,[2,117]),o($VC2,[2,118]),o($VC2,[2,884]),o($VC2,[2,885]),o($VC2,$VD2,{438:546,81:$VE2}),o($VC2,[2,898],{439:548,81:[1,549]}),o($VC2,[2,888]),o($VC2,[2,889]),o($VC2,[2,890]),o($VC2,[2,891]),o($VC2,[2,892]),o($VC2,[2,893]),o($VC2,[2,894]),o($VC2,$VD2,{438:550,81:$VE2}),{110:[1,551]},{110:[1,552]},{110:[1,553]},{46:554,172:24,173:25,178:$Va,245:$Vb},o($VJ1,[2,216]),{61:78,65:$Vf,89:143,115:$Vg,121:151,151:555,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp,433:215},o($VD1,[2,218]),o($VF2,[2,391],{234:556,235:557,236:$Vy2}),o($Vt2,[2,329]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:558,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:560,195:559,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($V_1,[2,293]),{42:327,61:78,65:$Vf,81:$Vu1,115:$Vg,121:176,211:561,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp,441:328,464:325,465:326},o($VG2,$VH2,{212:562,226:$VI2}),o($Vu2,[2,349]),o($Vu2,[2,350]),{219:[1,564]},o($Vu2,[2,352]),{219:[1,565]},o($Vu2,[2,355]),{219:[1,566]},{219:[1,567]},o($Vu2,[2,358]),{219:[1,568]},o($Vu2,[2,360]),{219:[1,569]},{219:[1,570]},o($Vu2,[2,363]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:571,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{83:[1,572]},{83:[1,573],87:$Vv2},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:574,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($Vt1,[2,918]),o($Vt1,[2,919]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:575,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o([45,56,57,65,83,87,115,131,186,194,205,218,219,220,221,222,223,224,225,230,232,236,243,244,266,268,344,348,352,353,360,362,363,372,373,381,386,390,396,443],[2,921],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,361:$Vm1,378:$Vo1,380:$Vp1,383:$Vr1,384:$Vs1}),o($Vx2,[2,1087]),o($Vt1,[2,1178]),o($VW1,[2,1199],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1}),o($VD1,[2,576],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1}),{83:[1,576]},{83:[2,1132],131:[1,581],386:[1,580],491:577,493:578,494:579},{128:[1,582]},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:438,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,442:583,453:142,455:150,457:155,458:156,459:159},{83:[1,584]},o($VA1,[2,511]),o($VA1,[2,525]),o($VA1,[2,529]),{81:$Vd2,168:585},{83:[1,586],87:[1,587]},o($VD1,[2,1031]),o($V2,[2,201]),{81:[1,589],133:588},{61:78,65:$Vf,89:591,115:$Vg,121:151,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp,425:590},o($VD1,[2,87]),o($VD1,[2,96]),o($VD1,[2,101],{51:545,95:592,52:$VF1,97:$VA2,98:$VB2}),o($VJ2,[2,102]),{98:[1,593]},o($VJ2,[2,109]),o($VJ2,[2,110]),o($VC2,[2,886]),{393:[1,594]},o($VC2,[2,887]),{393:[1,595]},o($VC2,[2,895]),{90:596,99:466,100:467,101:468,102:469,103:470,104:471,105:472,109:$Ve2,111:[1,597],114:$Vf2,115:$Vg2,364:$Vh2,365:$Vi2,367:$Vj2,370:$Vk2,371:$Vl2,375:$Vm2,379:$Vn2,388:$Vo2,389:$Vp2,391:$Vq2,392:$Vr2,395:$Vs2},{99:598,111:[1,599],364:$Vh2,365:$Vi2,367:$Vj2,370:$Vk2,371:$Vl2,375:$Vm2,379:$Vn2,388:$Vo2,389:$Vp2,391:$Vq2,392:$Vr2,395:$Vs2},{61:78,65:$Vf,111:[1,601],115:$Vg,116:600,118:602,121:603,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},o($V2,[2,205]),o($VD1,$VE1,{51:290,50:604,52:$VF1}),o($Vv,[2,384],{228:605,229:606,230:[1,607]}),o($VF2,[2,392]),o($Vt2,[2,330],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1}),o($VZ1,[2,301],{87:[1,608]}),o($VK2,[2,316],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1}),o($VG2,$VH2,{212:609,226:$VI2}),o($VG2,[2,336]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:610,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($Vu2,[2,351]),o($Vu2,[2,354]),o($Vu2,[2,356]),o($Vu2,[2,357]),o($Vu2,[2,359]),o($Vu2,[2,361]),o($Vu2,[2,362]),o($VV1,[2,909],{444:238}),o($Vt1,[2,916]),o($Vt1,[2,917]),o($VU1,[2,920],{444:238,34:$Vc1,79:$Ve1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,361:$Vm1,378:$Vo1,380:$Vp1,383:$Vr1,384:$Vs1}),o($Vw2,[2,1019],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1}),o($Vt1,[2,1116]),{83:[2,1128]},{83:[2,1133]},{363:[1,611],498:[1,612]},o($VL2,[2,1150]),o($VL2,[2,1151]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:615,231:149,232:$Vh,237:613,240:614,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($Vc2,[2,1123],{87:$Vv2}),o($Vt1,[2,543]),o($Vz2,[2,258]),o($Vz2,[2,259]),{56:$VF,57:$VG,61:78,65:$Vf,89:143,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:616,313:129,315:132,351:46,352:$Vi,353:$Vj,362:$Vp,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($VG1,[2,168]),{127:$VM2,136:617,138:618},{83:[1,620],87:[1,621]},o($VD1,[2,827]),o($VJ2,[2,103]),o($VJ2,[2,108]),{83:[1,622]},{83:[1,623],87:[1,624]},{111:[1,625]},o($VC2,[2,123]),{87:[1,626]},o($VC2,[2,127]),{87:[1,628],111:[1,627]},o($VC2,[2,133]),o($VN2,[2,135]),{122:[1,629]},o($VD1,[2,219]),o($Vv,[2,446]),o($Vv,[2,385]),{231:630,232:[1,631],271:$VN,393:$V71,394:$V81,457:155,458:156},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:632,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($VG2,[2,337]),o($VG2,[2,379],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1}),o($VO2,$VP2,{495:633}),o($VO2,$VP2,{495:634}),o([83,131,230,266,344,348,386],[2,393],{87:[1,635]}),o($VQ2,[2,396]),o($VQ2,[2,406],{444:238,242:636,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,243:[1,637],244:[1,638],257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1}),o($VD1,[2,1032]),{83:[1,639],87:[1,640]},o($VD1,[2,177]),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:641,142:[1,642],231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{81:[2,824]},{61:78,65:$Vf,89:643,115:$Vg,121:151,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},o($VC2,[2,897]),o($VC2,[2,899]),{393:[1,644]},o($VC2,[2,122]),{90:645,99:466,100:467,101:468,102:469,103:470,104:471,105:472,109:$Ve2,114:$Vf2,115:$Vg2,364:$Vh2,365:$Vi2,367:$Vj2,370:$Vk2,371:$Vl2,375:$Vm2,379:$Vn2,388:$Vo2,389:$Vp2,391:$Vq2,392:$Vr2,395:$Vs2},o($VC2,[2,132]),{61:78,65:$Vf,115:$Vg,118:646,121:603,232:$Vh,351:46,352:$Vi,353:$Vj,362:$Vp},{90:647,99:466,100:467,101:468,102:469,103:470,104:471,105:472,109:$Ve2,114:$Vf2,115:$Vg2,364:$Vh2,365:$Vi2,367:$Vj2,370:$Vk2,371:$Vl2,375:$Vm2,379:$Vn2,388:$Vo2,389:$Vp2,391:$Vq2,392:$Vr2,395:$Vs2},o($Vv,[2,386],{87:[1,648]}),o($Vv,[2,388],{87:[1,649]}),o($VK2,[2,317],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1}),o($VR2,$VS2,{496:650,506:651,368:$VT2,393:$VU2,498:$VV2}),o($VR2,$VS2,{506:651,496:655,368:$VT2,393:$VU2,498:$VV2}),{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:615,231:149,232:$Vh,240:656,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($VQ2,[2,403]),o($VQ2,[2,407]),o($VQ2,[2,408]),o($VG1,[2,174]),{127:$VM2,138:657},{34:$Vc1,79:$Ve1,97:$Vf1,110:[1,659],111:$Vh1,141:658,144:[1,660],257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1,444:238},{110:$VW2,141:661,144:$VX2},o($VD1,[2,828]),{83:[1,664]},{111:[1,665]},o($VN2,[2,136]),o($VN2,$VE1,{51:290,50:666,52:$VF1}),{231:667,271:$VN,393:$V71,394:$V81,457:155,458:156},{232:[1,668]},{83:$VY2,360:$VZ2,497:669},{382:[1,671]},{385:[1,672]},o($V_2,[2,1163]),o($V_2,[2,1164]),{83:$VY2,360:$VZ2,497:673},o($VQ2,[2,397]),o($VD1,[2,178]),{142:[1,674]},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:332,142:$V$2,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:334,142:$V03,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:675,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},o($VX1,$V$2),o($VX1,$V03),o($VC2,[2,900]),o($VC2,[2,126]),o($VN2,[2,142]),o($Vv,[2,387]),o($Vv,[2,389]),{83:[2,1134]},{368:[1,676],393:$VU2,498:$VV2,506:677},o($VR2,[2,1153]),o($VR2,[2,1154]),{83:[2,1135]},o($VD1,[2,186],{141:678,110:$VW2,144:$VX2}),o($VD1,[2,185],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1}),{385:[1,679]},{376:[1,680]},{56:$VF,57:$VG,61:78,65:$Vf,81:$VH,89:143,97:$VI,98:$VJ,109:$VK,114:$VL,115:$Vg,121:151,140:681,231:149,232:$Vh,271:$VN,273:$VO,274:$VP,275:$VQ,277:131,278:139,280:140,282:141,289:144,290:145,291:146,295:152,298:$VR,299:$VS,300:$VT,301:$VU,302:$VV,303:$VW,304:$VX,305:$VY,306:$VZ,307:$V_,308:$V$,309:130,310:$V01,311:$V11,312:121,313:129,315:132,351:46,352:$Vi,353:$Vj,355:$V21,356:$V31,359:$V41,362:$Vp,366:$V51,374:$V61,393:$V71,394:$V81,399:157,402:158,433:134,453:142,455:150,457:155,458:156,459:159},{83:[2,1158]},{83:[2,1159]},o($VD1,[2,184],{444:238,34:$Vc1,79:$Ve1,97:$Vf1,110:$Vg1,111:$Vh1,144:$Vi1,257:$Vj1,356:$Vk1,360:$Vl1,361:$Vm1,363:$Vn1,378:$Vo1,380:$Vp1,381:$Vq1,383:$Vr1,384:$Vs1})],
defaultActions: {39:[2,627],74:[2,604],75:[2,606],111:[2,865],135:[2,539],136:[2,540],137:[2,541],138:[2,542],160:[2,515],161:[2,516],162:[2,517],163:[2,518],164:[2,519],165:[2,520],166:[2,521],167:[2,522],175:[2,36],177:[2,45],214:[2,618],366:[2,534],404:[2,1090],405:[2,1092],406:[2,1094],407:[2,1096],408:[2,1098],409:[2,1100],410:[2,1102],411:[2,1104],449:[2,535],577:[2,1128],578:[2,1133],620:[2,824],669:[2,1134],673:[2,1135],679:[2,1158],680:[2,1159]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 5; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 397; 
break;
case 5: this.popState(); return 443; 
break;
case 6: return 32; 
break;
case 7: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('ALTER', yy_.yylloc, yy.lexer.upcomingInput()); return 4; 
break;
case 8: return 360; 
break;
case 9: return 45; 
break;
case 10: return 243; 
break;
case 11: this.begin('between'); return 363; 
break;
case 12: return 364; 
break;
case 13: return 365; 
break;
case 14: return 128; 
break;
case 15: return 409; 
break;
case 16: return 366; 
break;
case 17: return 367; 
break;
case 18: return 52; 
break;
case 19: parser.determineCase(yy_.yytext); return 8; 
break;
case 20: return 218; 
break;
case 21: return 368; 
break;
case 22: return 369; 
break;
case 23: return 370; 
break;
case 24: return 244; 
break;
case 25: return 251; 
break;
case 26: return 361; 
break;
case 27: return 371; 
break;
case 28: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('DROP', yy_.yylloc, yy.lexer.upcomingInput()); return 12; 
break;
case 29: return 372; 
break;
case 30: return 373; 
break;
case 31: parser.yy.correlatedSubQuery = true; return 374; 
break;
case 32: return 274; 
break;
case 33: return 375; 
break;
case 34: return 376; 
break;
case 35: parser.determineCase(yy_.yytext); return 186; 
break;
case 36: return 220; 
break;
case 37: return 194; 
break;
case 38: return 205; 
break;
case 39: return 310; 
break;
case 40: return 378; 
break;
case 41: return 222; 
break;
case 42: return 164; 
break;
case 43: return 379; 
break;
case 44: return 165; 
break;
case 45: return 380; 
break;
case 46: return 219; 
break;
case 47: return 223; 
break;
case 48: return 79; 
break;
case 49: return 230; 
break;
case 50: return 97; 
break;
case 51: return 98; 
break;
case 52: return 226; 
break;
case 53: return 352; 
break;
case 54: return 381; 
break;
case 55: return 236; 
break;
case 56: return 221; 
break;
case 57: return 127; 
break;
case 58: return 382; 
break;
case 59: return 156; 
break;
case 60: return 131; 
break;
case 61: return 383; 
break;
case 62: return 225; 
break;
case 63: return 384; 
break;
case 64: return 385; 
break;
case 65: return 65; 
break;
case 66: return 386; 
break;
case 67: return 387; 
break;
case 68: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 245; 
break;
case 69: return 224; 
break;
case 70: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 17; 
break;
case 71: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 'SHOW'; 
break;
case 72: return 388; 
break;
case 73: return 389; 
break;
case 74: return 41; 
break;
case 75: return 390; 
break;
case 76: return 391; 
break;
case 77: return 392; 
break;
case 78: return 'TO'; 
break;
case 79: return 273; 
break;
case 80: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('TRUNCATE', yy_.yylloc, yy.lexer.upcomingInput()); return 275; 
break;
case 81: return 498; 
break;
case 82: return 266; 
break;
case 83: parser.determineCase(yy_.yytext); return 325; 
break;
case 84: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('USE', yy_.yylloc); return 341; 
break;
case 85: return 142; 
break;
case 86: return 395; 
break;
case 87: return 49; 
break;
case 88: return 396; 
break;
case 89: return 268; 
break;
case 90: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 178; 
break;
case 91: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('LOAD', yy_.yylloc, yy.lexer.upcomingInput()); return 170; 
break;
case 92: return 322; 
break;
case 93: return 65; 
break;
case 94: yy.lexer.unput('('); yy_.yytext = 'avg'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 298; 
break;
case 95: yy.lexer.unput('('); yy_.yytext = 'cast'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 311; 
break;
case 96: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 306; 
break;
case 97: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 299; 
break;
case 98: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 300; 
break;
case 99: yy.lexer.unput('('); yy_.yytext = 'stddev_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 301; 
break;
case 100: yy.lexer.unput('('); yy_.yytext = 'stddev_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 302; 
break;
case 101: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 307; 
break;
case 102: yy.lexer.unput('('); yy_.yytext = 'var_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 303; 
break;
case 103: yy.lexer.unput('('); yy_.yytext = 'var_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 304; 
break;
case 104: yy.lexer.unput('('); yy_.yytext = 'variance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 305; 
break;
case 105: yy.lexer.unput('('); yy_.yytext = 'cume_dist'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 308; 
break;
case 106: yy.lexer.unput('('); yy_.yytext = 'dense_rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 308; 
break;
case 107: yy.lexer.unput('('); yy_.yytext = 'first_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 308; 
break;
case 108: yy.lexer.unput('('); yy_.yytext = 'lag'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 308; 
break;
case 109: yy.lexer.unput('('); yy_.yytext = 'last_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 308; 
break;
case 110: yy.lexer.unput('('); yy_.yytext = 'lead'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 308; 
break;
case 111: yy.lexer.unput('('); yy_.yytext = 'rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 308; 
break;
case 112: yy.lexer.unput('('); yy_.yytext = 'row_number'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 308; 
break;
case 113: return 393; 
break;
case 114: return 393; 
break;
case 115: return 394; 
break;
case 116: return 353; 
break;
case 117: parser.yy.cursorFound = true; return 5; 
break;
case 118: parser.yy.cursorFound = true; return 397; 
break;
case 119: return 377; 
break;
case 120: parser.addFileLocation(yy_.yylloc, yy_.yytext); return 503; 
break;
case 121: this.popState(); return 504; 
break;
case 122: return 344; 
break;
case 123: return 360; 
break;
case 124: return 381; 
break;
case 125: return 34; 
break;
case 126: return 110; 
break;
case 127: return 111; 
break;
case 128: return 144; 
break;
case 129: return 144; 
break;
case 130: return 144; 
break;
case 131: return 144; 
break;
case 132: return 144; 
break;
case 133: return 356; 
break;
case 134: return 257; 
break;
case 135: return 361; 
break;
case 136: return 361; 
break;
case 137: return 361; 
break;
case 138: return 361; 
break;
case 139: return 361; 
break;
case 140: return 361; 
break;
case 141: return 87; 
break;
case 142: return 271; 
break;
case 143: return 122; 
break;
case 144: return 348; 
break;
case 145: return 359; 
break;
case 146: return 355; 
break;
case 147: return 81; 
break;
case 148: return 83; 
break;
case 149: return 357; 
break;
case 150: return 358; 
break;
case 151: return 232; 
break;
case 152: this.begin('backtickedValue'); return 362; 
break;
case 153:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 401;
                                             }
                                             return 58;
                                           
break;
case 154: this.popState(); return 362; 
break;
case 155: this.begin('singleQuotedValue'); return 56; 
break;
case 156:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 401;
                                             }
                                             return 58;
                                           
break;
case 157: this.popState(); return 56; 
break;
case 158: this.begin('doubleQuotedValue'); return 57; 
break;
case 159:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 401;
                                             }
                                             return 58;
                                           
break;
case 160: this.popState(); return 57; 
break;
case 161: return 344; 
break;
case 162: /* To prevent console logging of unknown chars */ 
break;
case 163: 
break;
case 164: 
break;
case 165: 
break;
case 166: 
break;
case 167: 
break;
case 168:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:ALL)/i,/^(?:ALTER)/i,/^(?:AND)/i,/^(?:AS)/i,/^(?:ASC)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BOOLEAN)/i,/^(?:BY)/i,/^(?:CASCADE)/i,/^(?:CASE)/i,/^(?:CHAR)/i,/^(?:COMMENT)/i,/^(?:CREATE)/i,/^(?:CROSS)/i,/^(?:CURRENT)/i,/^(?:DATABASE)/i,/^(?:DECIMAL)/i,/^(?:DESC)/i,/^(?:DISTINCT)/i,/^(?:DIV)/i,/^(?:DOUBLE)/i,/^(?:DROP)/i,/^(?:ELSE)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:FALSE)/i,/^(?:FLOAT)/i,/^(?:FOLLOWING)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:GROUP)/i,/^(?:HAVING)/i,/^(?:IF)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JOIN)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:ON)/i,/^(?:OPTION)/i,/^(?:OR)/i,/^(?:ORDER)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PRECEDING)/i,/^(?:PURGE)/i,/^(?:RANGE)/i,/^(?:REGEXP)/i,/^(?:RIGHT)/i,/^(?:RLIKE)/i,/^(?:ROW)/i,/^(?:ROLE)/i,/^(?:ROWS)/i,/^(?:SCHEMA)/i,/^(?:SELECT)/i,/^(?:SEMI)/i,/^(?:SET)/i,/^(?:SHOW)/i,/^(?:SMALLINT)/i,/^(?:STRING)/i,/^(?:TABLE)/i,/^(?:THEN)/i,/^(?:TIMESTAMP)/i,/^(?:TINYINT)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TRUNCATE)/i,/^(?:UNBOUNDED)/i,/^(?:UNION)/i,/^(?:UPDATE)/i,/^(?:USE)/i,/^(?:VALUES)/i,/^(?:VARCHAR)/i,/^(?:VIEW)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:LOAD)/i,/^(?:OVER)/i,/^(?:ROLE)/i,/^(?:AVG\s*\()/i,/^(?:CAST\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:STDDEV_POP\s*\()/i,/^(?:STDDEV_SAMP\s*\()/i,/^(?:SUM\s*\()/i,/^(?:VAR_POP\s*\()/i,/^(?:VAR_SAMP\s*\()/i,/^(?:VARIANCE\s*\()/i,/^(?:CUME_DIST\s*\()/i,/^(?:DENSE_RANK\s*\()/i,/^(?:FIRST_VALUE\s*\()/i,/^(?:LAG\s*\()/i,/^(?:LAST_VALUE\s*\()/i,/^(?:LEAD\s*\()/i,/^(?:RANK\s*\()/i,/^(?:ROW_NUMBER\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:\s+['"])/i,/^(?:[^'"\u2020\u2021]+)/i,/^(?:['"])/i,/^(?:$)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[117,118,119,120,121,122,164],"inclusive":false},"doubleQuotedValue":{"rules":[159,160,167],"inclusive":false},"singleQuotedValue":{"rules":[156,157,166],"inclusive":false},"backtickedValue":{"rules":[153,154,165],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,155,158,161,162,163,168],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,155,158,161,162,168],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default yellowbrickSyntaxParser;
